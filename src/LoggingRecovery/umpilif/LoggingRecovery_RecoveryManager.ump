namespace com.sleepycat.je.recovery;

class RecoveryManager
{
    /** 
     * Send trace messages to the java.util.logger. Don't rely on the logger alone to conditionalize whether we send this message, we don't even want to construct the message if the level is not enabled.
     */
    private void traceINDeleteReplay(long nodeId, long logLsn, boolean found, boolean deleted, int index,
	    boolean isDuplicate) {



    }



  after Label578: RecoveryManager(EnvironmentImpl ) {
	detailedTraceLevel = Tracer.parseLevel(env, EnvironmentParams.JE_LOGGING_LEVEL_RECOVERY);

    }

    after Label579:  replayINDelete(DatabaseImpl , long , boolean , byte , byte , long ){
	traceINDeleteReplay(nodeId, logLsn, found, deleted, result.index, containsDuplicates);

    }

    after Label580: replaceOrInsertRoot(DatabaseImpl , IN , long ){
	trace(detailedTraceLevel, db, TRACE_ROOT_REPLACE, success, inFromLog, lsn, null, true,
		rootUpdater.getReplaced(), rootUpdater.getInserted(), rootUpdater.getOriginalLsn(), DbLsn.NULL_LSN, -1);

    }

    after Label581: replaceOrInsertDuplicateRoot(DatabaseImpl , DIN , long ) {

	trace(detailedTraceLevel, db, TRACE_DUP_ROOT_REPLACE, success, inFromLog, lsn, parent, found, replaced,
		inserted, origLsn, DbLsn.NULL_LSN, index);

    }

    after Label582: replaceOrInsertChild(DatabaseImpl , IN , long , long , List , boolean ) {
	trace(detailedTraceLevel, db, TRACE_IN_REPLACE, success, inFromLog, logLsn, result.parent,
		result.exactParentFound, replaced, inserted, origLsn, DbLsn.NULL_LSN, result.index);

    }

    after Label583:  redo(DatabaseImpl , TreeLocation , LN , byte , byte , long ,	  RecoveryInfo ) {
	trace(detailedTraceLevel, db, TRACE_LN_REDO, success, lnFromLog, logLsn, location.bin, found, replaced,
		inserted, location.childLsn, DbLsn.NULL_LSN, location.index);

    }


  after Label584: undo(Level , DatabaseImpl , TreeLocation , LN , byte ,
	    byte , long , long , boolean , RecoveryInfo , boolean ){
	    Label555: ;
	
    }

}
