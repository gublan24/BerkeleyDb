namespace com.sleepycat.je.dbi;

class MemoryBudget
{
    private long criticalThreshold;

    public long getCriticalThreshold() {
	return criticalThreshold;
    }

    /** 
     * Update the environment wide tree memory count, wake up the evictor if necessary.
     * @param incrementnote that increment may be negative.
     */
    after updateTreeMemoryUsage(long ) {

				if (getCacheMemoryUsage() > cacheBudget) {
						envImpl.alertEvictor();
				}
    }

    /** 
     * Update the environment wide misc memory count, wake up the evictor if necessary.
     * @param incrementnote that increment may be negative.
     */
    after updateMiscMemoryUsage(long ) {

			if (getCacheMemoryUsage() > cacheBudget) {
					envImpl.alertEvictor();
			}
    }

    after updateLockMemoryUsage(long , int ) {

			if (getCacheMemoryUsage() > cacheBudget) {
					envImpl.alertEvictor();
			}
    }

}
