namespace com.sleepycat.je.tree;

class IN
{
    private boolean inListResident;

    private int accumulatedDelta = 0;

    /** 
     * Initialize the per-node memory count by computing its memory usage.
     */
    protected void initMemorySize() {
	    inMemorySize = computeMemorySize();
    }

    public boolean verifyMemorySize() {
			long calcMemorySize = computeMemorySize();
			if (calcMemorySize != inMemorySize) {
					String msg = "-Warning: Out of sync. " + "Should be " + calcMemorySize + " / actual: " + inMemorySize
						+ " node: " + getNodeId();

				  Label615:				 // this.hook615(msg);
					System.out.println(msg);
					return false;
			} 
      else {
					return true;
			}
		}

    /** 
     * Return the number of bytes used by this IN.  Latching is up to the caller.
     */
    public long getInMemorySize() {
      return inMemorySize;
    }

    private long getEntryInMemorySize(int idx) {
      return getEntryInMemorySize(entryKeyVals[idx], entryTargets[idx]);
    }

    protected long getEntryInMemorySize(byte[] key, Node target) {
			long ret = 0;
			if (key != null) {
					ret += MemoryBudget.byteArraySize(key.length);
			}
			if (target != null) {
					ret += target.getMemorySizeIncludedByParent();
			}
		return ret;
		}

    /** 
     * Count up the memory usage attributable to this node alone. LNs children are counted by their BIN/DIN parents, but INs are not counted by their parents because they are resident on the IN list.
     */
    protected long computeMemorySize() {
		MemoryBudget mb = databaseImpl.getDbEnvironment().getMemoryBudget();
		long calcMemorySize = getMemoryOverhead(mb);
		calcMemorySize += computeLsnOverhead();
		for (int i = 0; i < nEntries; i++) {
			  calcMemorySize += getEntryInMemorySize(i);
		}
		if (provisionalObsolete != null) {
			  calcMemorySize += provisionalObsolete.size() * MemoryBudget.LONG_LIST_PER_ITEM_OVERHEAD;
		}
		return calcMemorySize;
		}

    public static long computeOverhead(DbConfigManager configManager) throws DatabaseException {
		return MemoryBudget.IN_FIXED_OVERHEAD + IN.computeArraysOverhead(configManager);
		  }

		  private int computeLsnOverhead() {
		if (entryLsnLongArray == null) {
			  return MemoryBudget.byteArraySize(entryLsnByteArray.length);
		} else {
			  return MemoryBudget.BYTE_ARRAY_OVERHEAD + entryLsnLongArray.length * MemoryBudget.LONG_OVERHEAD;
		}
		  }

    protected static long computeArraysOverhead(DbConfigManager configManager) throws DatabaseException {
		int capacity = configManager.getInt(EnvironmentParams.NODE_MAX);
		return MemoryBudget.byteArraySize(capacity) + (capacity * (2 * MemoryBudget.ARRAY_ITEM_OVERHEAD));
		  }

		  protected long getMemoryOverhead(MemoryBudget mb) {
		return mb.getINOverhead();
		  }

    protected void updateMemorySize(ChildReference oldRef, ChildReference newRef) {
		long delta = 0;
		if (newRef != null) {
			  delta = getEntryInMemorySize(newRef.getKey(), newRef.getTarget());
		}
		if (oldRef != null) {
			  delta -= getEntryInMemorySize(oldRef.getKey(), oldRef.getTarget());
		}
		changeMemorySize(delta);
		  }

    protected void updateMemorySize(long oldSize, long newSize) {
		long delta = newSize - oldSize;
		changeMemorySize(delta);
    }

    void updateMemorySize(Node oldNode, Node newNode) {
		long delta = 0;
		if (newNode != null) {
			  delta = newNode.getMemorySizeIncludedByParent();
		}
		if (oldNode != null) {
			  delta -= oldNode.getMemorySizeIncludedByParent();
		}
		changeMemorySize(delta);
		}

    private void changeMemorySize(long delta) {
			inMemorySize += delta;
			if (inListResident) {
					MemoryBudget mb = databaseImpl.getDbEnvironment().getMemoryBudget();
					accumulatedDelta += delta;
					if (accumulatedDelta > ACCUMULATED_LIMIT || accumulatedDelta < -ACCUMULATED_LIMIT) {
				mb.updateTreeMemoryUsage(accumulatedDelta);
				accumulatedDelta = 0;
					}
			}
		}

    public int getAccumulatedDelta() {
			return accumulatedDelta;
    }

    public void setInListResident(boolean resident) {
			inListResident = resident;
    }

    protected void hook615(String msg) {
    }

    /** 
     * Create a new IN.
     */
    IN(DatabaseImpl db, byte[] identifierKey, int capacity, int level) {
	    initMemorySize();
    }

    /** 
     * Initialize IN object.
     */
  after init(DatabaseImpl , byte , int , int ) {
     // original(db, identifierKey, initialCapacity, level);
      inListResident = false;
    }

  after Label637: postFetchInit(DatabaseImpl , long ) {
    initMemorySize();
//	original();
    }

    /** 
     * Initialize a node read in during recovery.
     */
  after postRecoveryInit(DatabaseImpl, long ) {
	//original(db, sourceLsn);
	  initMemorySize();
    }

    after Label638:fetchTarget(int){
      updateMemorySize(null, node);
//	original(node);
    }

    /** 
     * Update the idx'th entry of this node. This flavor is used when the target LN is being modified, by an operation like a delete or update. We don't have to check whether the LSN has been nulled or not, because we know an LSN existed before. Also, the modification of the target is done in the caller, so instead of passing in the old and new nodes, we pass in the old and new node sizes.
     */
  before updateEntry(int , long , long , long ) {
	updateMemorySize(oldLNSize, newLNSize);
	//original(idx, lsn, oldLNSize, newLNSize);
    }

    /** 
     * Add self and children to this in-memory IN list. Called by recovery, can run with no latching.
     */
  before rebuildINList(INList ){
	initMemorySize();
	//original(inList);
    }

}
