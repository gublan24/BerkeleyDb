
namespace com.sleepycat.je.tree;
class IN {
  

      after Label650: splitInternal(IN , int , int , int ) {
        ;
				long newSize = computeMemorySize();
            updateMemorySize(oldMemorySize, newSize);
      }
    

      after Label648:deleteEntry(int , boolean ) { 
				updateMemorySize(oldLSNArraySize, computeLsnOverhead());

      }
      after Label649: deleteEntry(int , boolean ) { 
       updateMemorySize(getEntryInMemorySize(index), 0);
       oldLSNArraySize = computeLsnOverhead();

      }
    

      after trackProvisionalObsolete(IN , long , long ) {

         if (memDelta != 0) {
            changeMemorySize(memDelta);
        }
      }
      after Label651: trackProvisionalObsolete(IN , long , long ) {
              child.changeMemorySize(0 - childMemDelta);
            	memDelta += childMemDelta;

      }
      after Label652: trackProvisionalObsolete(IN , long , long ) {
       childMemDelta = child.provisionalObsolete.size() *
                                MemoryBudget.LONG_LIST_PER_ITEM_OVERHEAD;
      }
       after Label653: trackProvisionalObsolete(IN , long , long ) {
					memDelta += MemoryBudget.LONG_LIST_PER_ITEM_OVERHEAD;
      }
      after Label654: trackProvisionalObsolete(IN , long , long ) {
				memDelta += MemoryBudget.LONG_LIST_PER_ITEM_OVERHEAD;
      }
    

      after Label645: insertEntry1(ChildReference ) {
					updateMemorySize(0, getEntryInMemorySize(index));

      }
      after Label646: insertEntry1(ChildReference ) {
					changeMemorySize(computeLsnOverhead() - oldSize);

      }
      after Label647: insertEntry1(ChildReference ) { 
					oldSize = computeLsnOverhead();
      }
    

      before updateEntryCompareKey(int , Node , long , byte ) {
        		long oldSize = getEntryInMemorySize(idx);

      }

  after Label644: updateEntryCompareKey(int , Node , long , byte ) {
				;
				long newSize = getEntryInMemorySize(idx);
				updateMemorySize(oldSize, newSize);
  }
   
  before updateEntry(int , Node ) {
       	long oldSize = getEntryInMemorySize(idx);
  }

  after updateEntry(int , Node ) {
     long newSize = getEntryInMemorySize(idx);
     updateMemorySize(oldSize, newSize);
   }
    
  before setLsn(int , long ) {
     int oldSize = computeLsnOverhead();
  }
  after Label639: setLsn(int , long ) {
    changeMemorySize(computeLsnOverhead() - oldSize);
  }
    

  before updateEntry(int , Node , long , byte ) {
        	long oldSize = getEntryInMemorySize(idx);
      }
  after Label642: updateEntry(int , Node , long , byte ) {
				;
				long newSize = getEntryInMemorySize(idx);
        updateMemorySize(oldSize, newSize);

      }

  before updateEntry(int , Node , long ) {
			long oldSize = getEntryInMemorySize(idx);

  }
      after Label643: updateEntry(int , Node , long ) {
			;
     	long newSize = getEntryInMemorySize(idx);
        updateMemorySize(oldSize, newSize);

      }
    
  

      after Label655: flushProvisionalObsolete(LogManager ) {
        changeMemorySize(0 - memDelta);

      }
      after Label656: flushProvisionalObsolete(LogManager ) {
    							memDelta = provisionalObsolete.size() *
                           MemoryBudget.LONG_LIST_PER_ITEM_OVERHEAD;
      }
    


      before  setEntry(int , Node , byte , long , byte ) {
    	long oldSize = getEntryInMemorySize(idx);
      }
      after Label640: setEntry(int , Node , byte , long , byte ) {IN_setEntry
				newSize = getEntryInMemorySize(idx);
				updateMemorySize(oldSize, newSize);
      }
      after Label641: setEntry(int , Node , byte , long , byte ) {
	    oldSize = 0;

      }
    
}
