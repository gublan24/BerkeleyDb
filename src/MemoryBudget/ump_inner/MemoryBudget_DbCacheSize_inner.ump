// Original file:/home/abdulaziz/Desktop/BerkeleyDb/ALL_FEATURE/features/MemoryBudget/com/sleepycat/je/util/DbCacheSize.java
namespace com.sleepycat.je.util;
class DbCacheSize {

  depend com.sleepycat.je.EnvironmentStats;

 static class DbCacheSize_insertRecords {


    public  DbCacheSize_insertRecords(PrintStream out, Environment env, Database db, long records, int keySize, int dataSize, boolean randomKeys) throws DatabaseException{
      DatabaseEntry key = new DatabaseEntry();
      DatabaseEntry data = new DatabaseEntry(new byte[dataSize]);
      BigInteger bigInt = BigInteger.ZERO;
      Random rnd = new Random(123);

      for (int i = 0; i < records; i += 1) {

          if (randomKeys) {
              byte[] a = new byte[keySize];
              rnd.nextBytes(a);
              key.setData(a);
          } else {
              bigInt = bigInt.add(BigInteger.ONE);
              byte[] a = bigInt.toByteArray();
              if (a.length < keySize) {
                  byte[] a2 = new byte[keySize];
                  System.arraycopy(a, 0, a2, a2.length - a.length, a.length);
                  a = a2;
              } else if (a.length > keySize) {
                  out.println("*** Key doesn't fit value=" + bigInt +
                              " byte length=" + a.length);
                  return;
              }
              key.setData(a);
          }

          OperationStatus status = db.putNoOverwrite(null, key, data);
          if (status == OperationStatus.KEYEXIST && randomKeys) {
              i -= 1;
              out.println("Random key already exists -- retrying");
              continue;
          }
          if (status != OperationStatus.SUCCESS) {
              out.println("*** " + status);
              return;
          }

          if (i % 10000 == 0) {
            Label833: //this.hook833();
    
              out.print(".");
              out.flush();
          }
      }
    }

  void execute() throws DatabaseException {
 
   // code move to DbCacheSize_insertRecords(..)

  }
  protected PrintStream out;
  protected Environment env;
  protected Database db;
  protected long records;
  protected int keySize;
  protected int dataSize;
  protected boolean randomKeys;
  protected DatabaseEntry key;
  protected DatabaseEntry data;
  protected BigInteger bigInt;
  protected Random rnd;
  protected byte[] a;
  protected byte[] a2;
  protected byte[] a3;
  protected OperationStatus status;
  protected EnvironmentStats stats;
  //protected void hook833() throws DatabaseException {
  //}
 }
}
