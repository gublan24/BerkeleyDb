namespace com.sleepycat.je.dbi;

class EnvironmentImpl
{
  depend com.sleepycat.je.log.LatchedLogManager;
  depend com.sleepycat.je.latch.SharedLatch;
  depend com.sleepycat.je.latch.LatchSupport;
  depend com.sleepycat.je.latch.Latch;
    private static boolean fairLatches;

    private Latch mapTreeRootLatch;

    private SharedLatch triggerLatch;

    public static boolean getFairLatches() {
	return fairLatches;
    }

    /** 
     * Returns the shared trigger latch.
     */
    public SharedLatch getTriggerLatch() {
	return triggerLatch;
    }

    after Label320: EnvironmentImpl(File , EnvironmentConfig ) {
	triggerLatch = LatchSupport.makeSharedLatch("TriggerLatch", this);
	//original();
    }

    after Label321: EnvironmentImpl(File , EnvironmentConfig ) { 
			if (fairLatches) {
					logManager = new LatchedLogManager(this, isReadOnly);
			} else 
			{
      logManager = new SyncedLogManager(this, isReadOnly); 

			}
    }

    after Label322: EnvironmentImpl(File , EnvironmentConfig ) { 
	fairLatches = configManager.getBoolean(EnvironmentParams.ENV_FAIR_LATCHES);
	//original();
    }

    after Label323: EnvironmentImpl(File , EnvironmentConfig ) { 
	mapTreeRootLatch = LatchSupport.makeLatch("MapTreeRoot", this);
	//original();
    }

    /** 
     * Log the map tree root and save the LSN.
     */

		before logMapTreeRoot() {
			mapTreeRootLatch.acquire();
		}
	
		after logMapTreeRoot_1:logMapTreeRoot() {

			//try {original();} finally {
					mapTreeRootLatch.release();
			//}
    }

    /** 
     * Force a rewrite of the map tree root if required.
     */
  before rewriteMapTreeRoot(long ) {
			mapTreeRootLatch.acquire();
    }

    after Label_rewriteMapTreeRoot_1: rewriteMapTreeRoot(long ) {
	    mapTreeRootLatch.release();
	
    }

  after Label324: readMapTreeFromLog(long ) {
	mapTreeRootLatch.acquire();
	}

  after Label324_1: readMapTreeFromLog(long ) {
	   mapTreeRootLatch.release();
    }

}
