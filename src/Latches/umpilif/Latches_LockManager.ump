namespace com.sleepycat.je.txn;

class LockManager
{
  depend com.sleepycat.je.latch.LatchSupport;
  depend com.sleepycat.je.latch.Latch;
    protected Latch[] lockTableLatches;

    private boolean checkNoLatchesHeld(boolean nonBlockingRequest) {
	if (nonBlockingRequest) {
	    return true;
	} else {
	    return (LatchSupport.countLatchesHeld() == 0);
	}
    }

    after Label770: LockManager(EnvironmentImpl ) {
	lockTableLatches = new Latch[nLockTables];
	//original();
    }

    after Label771: LockManager(EnvironmentImpl ) {

	lockTableLatches[i] = LatchSupport.makeLatch("Lock Table " + i, envImpl);
	//original(envImpl, i);
    }

    after Label772: lock(long , Locker , LockType , long , boolean ,   DatabaseImpl ) {

	assert checkNoLatchesHeld(nonBlockingRequest) : LatchSupport.countLatchesHeld()
		+ " latches held while trying to lock, lock table =" + LatchSupport.latchesHeldToString();
//	original(nonBlockingRequest);
    }

		after Label773:dumpToString()
		{
			lockTableLatches[i].acquire();
		}

    after Label773_1:
		{
	    lockTableLatches[i].release();
    }

}
