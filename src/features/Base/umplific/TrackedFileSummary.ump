namespace com.sleepycat.je.cleaner;

class TrackedFileSummary
{
  isA FileSummary;

  depend com.sleepycat.je.dbi.MemoryBudget;
    private UtilizationTracker tracker;

    private long fileNum;

    private OffsetList obsoleteOffsets;

    private boolean trackDetail;

    private boolean allowFlush = true;

    /** 
     * Creates an empty tracked summary.
     */
    TrackedFileSummary(UtilizationTracker tracker, long fileNum, boolean trackDetail) {
			this.tracker = tracker;
			this.fileNum = fileNum;
			this.trackDetail = trackDetail;
    }

    /** 
     * Returns whether this summary is allowed or prohibited from being flushed or evicted during cleaning.  By default, flushing is allowed.
     */
    public boolean getAllowFlush() {
	return allowFlush;
    }

    /** 
     * Allows or prohibits this summary from being flushed or evicted during cleaning.  By default, flushing is allowed.
     */
    void setAllowFlush(boolean allowFlush) {
	this.allowFlush = allowFlush;
    }

    /** 
     * Returns the file number being tracked.
     */
    public long getFileNumber() {
	return fileNum;
    }

    /** 
     * Overrides reset for a tracked file, and is called when a FileSummaryLN is written to the log. <p>Must be called under the log write latch.</p>
     */
    public void reset() {
			obsoleteOffsets = null;
			tracker.resetFile(this);
		
			Label168:   ;
      super.reset();
    }

    /** 
     * Tracks the given offset as obsolete or non-obsolete. <p>Must be called under the log write latch.</p>
     */
    void trackObsolete(long offset) {
        if (!trackDetail) {
            return;
        }
        int adjustMem = 0;
        if (obsoleteOffsets == null) {
            obsoleteOffsets = new OffsetList();
            Label171: ;

        }
        if (obsoleteOffsets.add(offset, tracker.getEnvironment().isOpen())) {
            Label172: ;

       }		

				Label_trackObsolete: ;

 
    }

    /** 
     * Adds the obsolete offsets as well as the totals of the given object.
     */
    void addTrackedSummary(TrackedFileSummary other) {
	add(other);
	if (other.obsoleteOffsets != null) {
	    if (obsoleteOffsets != null) {
		if (obsoleteOffsets.merge(other.obsoleteOffsets)) {

        Label169:   ;
		}
	    } else {
		obsoleteOffsets = other.obsoleteOffsets;
	    }
	}
    }

    /** 
     * Returns obsolete offsets as an array of longs, or null if none.
     */
    public long[] getObsoleteOffsets() {
	if (obsoleteOffsets != null) {
	    return obsoleteOffsets.toArray();
	} else {
	    return null;
	}
    }

    /** 
     * Returns whether the given offset is present in the tracked offsets. This does not indicate whether the offset is obsolete in general, but only if it is known to be obsolete in this version of the tracked information.
     */
    boolean containsObsoleteOffset(long offset) {
	if (obsoleteOffsets != null) {
	    return obsoleteOffsets.contains(offset);
	} else {
	    return false;
	}
    }


}
