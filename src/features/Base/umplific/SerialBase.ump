namespace com.sleepycat.bind.serial;

class SerialBase
{
  depend com.sleepycat.util.FastOutputStream;
     int outputBufferSize = 0 ;

   

    /** 
     * Sets the initial byte size of the output buffer that is allocated by the default implementation of  {@link #getSerialOutput}. <p> If this property is zero (the default), the default  {@link FastOutputStream#DEFAULT_INIT_SIZE} size is used.</p>
     * @param byteSizethe initial byte size of the output buffer, or zero to use thedefault size.
     */
    public void setSerialBufferSize(int byteSize) {
	outputBufferSize = byteSize;
    }

    /** 
     * Returns the initial byte size of the output buffer.
     * @return the initial byte size of the output buffer.
     * @see #setSerialBufferSize
     */
    public int getSerialBufferSize() {
	return outputBufferSize;
    }

    /** 
     * Returns an empty SerialOutput instance that will be used by the serial binding or key creator. <p> The default implementation of this method creates a new SerialOutput with an initial buffer size that can be changed using the  {@link #setSerialBufferSize} method.</p> <p> This method may be overridden to return a FastOutputStream instance. For example, an instance per thread could be created and returned by this method. If a FastOutputStream instance is reused, be sure to call its {@link FastOutputStream#reset} method before each use.</p>
     * @param objectis the object to be written to the serial output, and may beused by subclasses to determine the size of the output buffer.
     * @return an empty FastOutputStream instance.
     * @see #setSerialBufferSize
     */
    protected FastOutputStream getSerialOutput(Object object) {
	int byteSize = getSerialBufferSize();
	if (byteSize != 0) {
	    return new FastOutputStream(byteSize);
	} else {
	    return new FastOutputStream();
	}
    }

}
