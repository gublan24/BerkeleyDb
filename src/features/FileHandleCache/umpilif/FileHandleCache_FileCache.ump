namespace com.sleepycat.je.log;

class FileCache
{
		depend com.sleepycat.je.dbi.DbConfigManager;
		depend com.sleepycat.je.config.EnvironmentParams;
		depend com.sleepycat.je.DatabaseException;
		depend java.util.Set;
		depend java.util.Map;
		depend java.util.LinkedList;
		depend java.util.Iterator;
		depend java.util.Hashtable;
		depend java.io.IOException;
    private Map fileMap;

    private LinkedList fileList;

    private int fileCacheSize;

    FileCache(DbConfigManager configManager) throws DatabaseException {
      fileMap = new Hashtable();
	    fileList = new LinkedList();
	    fileCacheSize = configManager.getInt(EnvironmentParams.LOG_FILE_CACHE_SIZE);
    }

    FileHandle get(Long fileId) {
			return (FileHandle) fileMap.get(fileId);
    }

    void add(Long fileId, FileHandle fileHandle) throws DatabaseException 
		{
			if (fileList.size() >= fileCacheSize) {
					Iterator iter = fileList.iterator();
					boolean done = false;
					while (!done && iter.hasNext()) {
						Long evictId = (Long) iter.next();
						FileHandle evictTarget = (FileHandle) fileMap.get(evictId);

						Label438: 		;
						try {
							fileMap.remove(evictId);
							iter.remove();
							evictTarget.close();
							} 
						catch (IOException e) 
						{
								throw new DatabaseException(e);
						} 
						finally {
							Label441: ;

						}
						done = true;
						Label438_1: ;		     
					}
			}
			fileList.add(fileId);
			fileMap.put(fileId, fileHandle);
		}

    /** 
     * Take any file handles corresponding to this file name out of the cache. A file handle could be there twice, in rd only and in r/w mode.
     */
    void remove(long fileNum) throws IOException, DatabaseException {
			Iterator iter = fileList.iterator();
			while (iter.hasNext()) {
					Long evictId = (Long) iter.next();
					if (evictId.longValue() == fileNum) {
						FileHandle evictTarget = (FileHandle) fileMap.get(evictId);

						try { 
                Label439: 						

									Label442:
									fileMap.remove(evictId);
									iter.remove();
									evictTarget.close();
															}
						finally {
								Label439_1: ;
						}
					}
			}
		}

	void clear() throws IOException, DatabaseException {
			Iterator iter = fileMap.values().iterator();
			while (iter.hasNext()) {
					FileHandle fileHandle = (FileHandle) iter.next();

				  Label440:	 
					Label443:
					fileHandle.close();
					iter.remove();
					Label440_1: ;
			}
			fileMap.clear();
			fileList.clear();
				}

				Set getCacheKeys() {
			return fileMap.keySet();
		}


}
