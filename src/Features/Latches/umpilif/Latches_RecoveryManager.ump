namespace com.sleepycat.je.recovery;

class RecoveryManager
{
  depend com.sleepycat.je.latch.LatchSupport;

    after Label585: replayOneIN(INFileReader , DatabaseImpl , boolean ) {
	in.latch();
	//original(in);
    }

    after Label586_1: undoLNs(RecoveryInfo , Set ) {
//	try {	    //original(info, reader, location, ln, logLsn, abortLsn, abortKnownDeleted, db);	} finally {
	    if (location.bin != null) {
		location.bin.releaseLatchIfOwner();
	    }
	//}
    }

    after Label587:  replaceOrInsert(DatabaseImpl , IN , long , long , boolean ) {
	inFromLog.releaseLatchIfOwner();
	assert (LatchSupport.countLatchesHeld() == 0) : LatchSupport.latchesHeldToString() + "LSN = "
		+ DbLsn.toString(logLsn) + " inFromLog = " + inFromLog.getNodeId();
	//original(inFromLog, logLsn);
    }

    after Label588:replayINDelete(DatabaseImpl , long , boolean , byte , byte , long ) {
	if (result.parent != null) {
	    result.parent.releaseLatch();
	}
	//original(result);
    }

    after Label589: replaceOrInsertDuplicateRoot(DatabaseImpl , DIN , long ) {
	if (parent != null) {
	    parent.releaseLatch();
	}
	//original(parent);
    }

    after Label590: replaceOrInsertChild(DatabaseImpl , IN , long , long , List , boolean )  {
	if (result.parent != null) {
	    result.parent.releaseLatch();
	}
	//original(result);
    }

    after Label591: redo(DatabaseImpl , TreeLocation , LN , byte , byte , long , RecoveryInfo ) {
	if (location.bin != null) {
	    location.bin.releaseLatchIfOwner();
	}
	//original(location);
    }

    after Label592: undo(Level , DatabaseImpl , TreeLocation , LN , byte ,byte , long , long , boolean , RecoveryInfo ,  boolean ) {
//(TreeLocation location, long logLsn, long abortLsn, boolean replaced,    DIN duplicateRoot) throws DatabaseException {
	duplicateRoot.latch();
  }

    after Label592_1: undo (Level , DatabaseImpl , TreeLocation , LN , byte ,byte , long , long , boolean , RecoveryInfo ,  boolean ) {
	//try {replaced = //original(location, logLsn, abortLsn, replaced, duplicateRoot);} finally {
	    duplicateRoot.releaseLatch();//}return replaced;
    }


}
