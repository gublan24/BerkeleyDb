namespace com.sleepycat.je.txn;

class Txn
{
    private Set deletedDatabases;

    /** 
     * @param dbImpl databaseImpl to remove
     * @param deleteAtCommit true if this databaseImpl should be cleaned on commit, false if it should be cleaned on abort.
     * @param mb environment memory budget.
     */
    public void markDeleteAtTxnEnd(DatabaseImpl dbImpl, boolean deleteAtCommit) throws DatabaseException {

        synchronized (this) {
            int delta = 0;
            if (deletedDatabases == null) {
                deletedDatabases = new HashSet();
                Label798: ;
            }

            deletedDatabases.add(new DatabaseCleanupInfo(dbImpl,
                                                         deleteAtCommit));
		       Label796: ;
        }
    }

    

    private void setDeletedDatabaseState(boolean isCommit) throws DatabaseException {
			if (deletedDatabases != null) {
					Iterator iter = deletedDatabases.iterator();
					while (iter.hasNext()) {
				DatabaseCleanupInfo info = (DatabaseCleanupInfo) iter.next();
				if (info.deleteAtCommit == isCommit) {
						info.dbImpl.startDeleteProcessing();
				}
					}
			}
    }

    /** 
     * Cleanup leftover databaseImpls that are a by-product of database operations like removeDatabase(), truncateDatabase(). This method must be called outside the synchronization on this txn, because it calls deleteAndReleaseINs, which gets the TxnManager's allTxns latch. The checkpointer also gets the allTxns latch, and within that latch, needs to synchronize on individual txns, so we must avoid a latching hiearchy conflict.
     */
    private void cleanupDatabaseImpls(boolean isCommit) throws DatabaseException {
			if (deletedDatabases != null) {
					DatabaseCleanupInfo[] infoArray;
					synchronized (this) {
				infoArray = new DatabaseCleanupInfo[deletedDatabases.size()];
				deletedDatabases.toArray(infoArray);
					}
					for (int i = 0; i < infoArray.length; i += 1) {
				DatabaseCleanupInfo info = infoArray[i];
				if (info.deleteAtCommit == isCommit) {
						info.dbImpl.releaseDeletedINs();
				}
					}
					deletedDatabases = null;
			}
    }

    after Label805:commit(byte ){
			cleanupDatabaseImpls(true);

    }

    after Label806:commit(byte ){
			setDeletedDatabaseState(true);
			
    }

    after Label807:abortInternal(boolean , boolean ){
			cleanupDatabaseImpls(false);
			
		}

    after Label808:abortInternal(boolean , boolean ){
			setDeletedDatabaseState(false);
			
    }

}
