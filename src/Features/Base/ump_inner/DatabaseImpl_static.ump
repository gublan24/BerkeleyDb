
namespace com.sleepycat.je.dbi;
class DatabaseImpl {
  static class ObsoleteProcessor {
      isA TreeNodeProcessor;
      private UtilizationTracker tracker;
      ObsoleteProcessor(    UtilizationTracker tracker){
        this.tracker=tracker;
      }
      public void processLSN(    long childLsn,    LogEntryType childType){
        assert childLsn != DbLsn.NULL_LSN;
        tracker.countObsoleteNodeInexact(childLsn,childType);
      }
    }
  static class LNCounter {
      isA TreeNodeProcessor;
      private long counter;
      public void processLSN(    long childLsn,    LogEntryType childType){
        assert childLsn != DbLsn.NULL_LSN;
        if (childType.equals(LogEntryType.LOG_LN_TRANSACTIONAL) || childType.equals(LogEntryType.LOG_LN)) {
          counter++;
        }
      }
      long getCount(){
        return counter;
      }
    }
  static class HaltPreloadException {
      isA RuntimeException;
      private PreloadStatus status;
      HaltPreloadException(    PreloadStatus status){
        super(status.toString());
        this.status=status;
      }
      PreloadStatus getStatus(){
        return status;
      }
    }
   
}
