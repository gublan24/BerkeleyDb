namespace com.sleepycat.je.tree;

class DeltaInfo
{
  isA LogWritable,LogReadable;
  depend com.sleepycat.je.utilint.DbLsn;
  depend com.sleepycat.je.log.LogWritable;
  depend com.sleepycat.je.log.LogUtils;
  depend com.sleepycat.je.log.LogReadable;
  depend com.sleepycat.je.log.LogException;
  depend java.nio.ByteBuffer;
    private byte[] key;

    long lsn = DbLsn.NULL_LSN;

    private byte state;

    DeltaInfo(byte[] key, long lsn, byte state) {
	this.key = key;
	this.lsn = lsn;
	this.state = state;
    }

    /** 
     * For reading from the log only.
     */
//    DeltaInfo() {	lsn = DbLsn.NULL_LSN; }

    public int getLogSize() {
	return LogUtils.getByteArrayLogSize(key) + LogUtils.getLongLogSize() + 1;
    }

    public void writeToLog(ByteBuffer logBuffer) {
	LogUtils.writeByteArray(logBuffer, key);
	LogUtils.writeLong(logBuffer, lsn);
	logBuffer.put(state);
    }

    public void readFromLog(ByteBuffer itemBuffer, byte entryTypeVersion) throws LogException {
	key = LogUtils.readByteArray(itemBuffer);
	lsn = LogUtils.readLong(itemBuffer);
	state = itemBuffer.get();
    }

    public void dumpLog(StringBuffer sb, boolean verbose) {
	sb.append(Key.dumpString(key, 0));
	sb.append(DbLsn.toString(lsn));
	IN.dumpDeletedState(sb, state);
    }

    /** 
     * @see LogReadable#logEntryIsTransactional
     */
    public boolean logEntryIsTransactional() {
	return false;
    }

    /** 
     * @see LogReadable#getTransactionId
     */
    public long getTransactionId() {
	return 0;
    }

    /** 
     * @return the Key.
     */
    byte[] getKey() {
	return key;
    }

    /** 
     * @return the state flags.
     */
    byte getState() {
	return state;
    }

    /** 
     * @return true if this is known to be deleted.
     */
    boolean isKnownDeleted() {
	return IN.isStateKnownDeleted(state);
    }

    /** 
     * @return the LSN.
     */
    long getLsn() {
	return lsn;
    }

}
