namespace com.sleepycat.je.util;

class DbRunAction
{
  depend com.sleepycat.je.utilint.CmdUtil;
  depend com.sleepycat.je.dbi.EnvironmentImpl;
  depend com.sleepycat.je.config.EnvironmentParams;
  depend com.sleepycat.je.Transaction;
  depend com.sleepycat.je.OperationStatus;
  depend com.sleepycat.je.LockMode;
  depend com.sleepycat.je.EnvironmentMutableConfig;
  depend com.sleepycat.je.EnvironmentConfig;
  depend com.sleepycat.je.Environment;
  depend com.sleepycat.je.DbInternal;
  depend com.sleepycat.je.DatabaseException;
  depend com.sleepycat.je.DatabaseEntry;
  depend com.sleepycat.je.DatabaseConfig;
  depend com.sleepycat.je.Database;
  depend com.sleepycat.je.Cursor;
  depend com.sleepycat.je.CheckpointConfig;
  depend java.text.DecimalFormat;
  depend java.io.File;
    private static final int CLEAN = 1;

    private static final int CHECKPOINT = 4;

    public static void main(String[] argv) {
	    long recoveryStart = 0;
        long actionStart = 0;
        long actionEnd = 0;

        try {
            int whichArg = 0;

            if (argv.length == 0) {
                usage();
                System.exit(1);
            }


            String dbName = null;
            int doAction = 0;
            String envHome = "."; // default to current directory
            boolean readOnly = false;

            while (whichArg < argv.length) {
                String nextArg = argv[whichArg];

                if (nextArg.equals("-h")) {
                    whichArg++;
                    envHome = CmdUtil.getArg(argv, whichArg);
                } else if (nextArg.equals("-a")) {
                    whichArg++;
                    String action = CmdUtil.getArg(argv, whichArg);
                    if (action.equalsIgnoreCase("clean")) {
                        doAction = CLEAN;
                    } else if (action.equalsIgnoreCase("compress")) {
                        Label840: ;
                    } else if (action.equalsIgnoreCase("checkpoint")) {
                        doAction = CHECKPOINT;
                    } else if (action.equalsIgnoreCase("evict")) {
                       Label846: ;
                    } else if (action.equalsIgnoreCase("removedb")) {
                        Label843: ;
                    } else if (action.equalsIgnoreCase("dbstats")) {
                        Label839:;

                    } else {
                        usage();
                        System.exit(1);
                    }
                } else if (nextArg.equals("-ro")) {
                    readOnly = true;
                } else if (nextArg.equals("-s")) {
                    dbName = argv[++whichArg];
                } else {
                    throw new IllegalArgumentException
                        (nextArg + " is not a supported option.");
                }
                whichArg++;
            }

            /* Make an environment */
            EnvironmentConfig envConfig = new EnvironmentConfig();

            /* Do debug log to the console.*/
            Label848: ;

            /* Don't debug log to the database log. */
            Label847: ;
	

            /* 
             * If evicting, scan the given database first and don't run the
             * background evictor.
             */
            Label845: ;


                
            recoveryStart = System.currentTimeMillis();

            Environment env =
		new Environment(new File(envHome), envConfig);

            CheckpointConfig forceConfig = new CheckpointConfig();
            forceConfig.setForce(true);
            
            actionStart = System.currentTimeMillis();
            switch(doAction) {
            case CLEAN:
                /* Since this is batch cleaning, repeat until no progress. */
                while (true) {
                    int nFiles = env.cleanLog();
                    System.out.println("Files cleaned: " + nFiles);
                    if (nFiles == 0) {
                        break;
                    }
                }
                env.checkpoint(forceConfig);
                break;
            case COMPRESS:
                Label840: ;
                break;
            case EVICT:
                Label844: ;
                break;
            case CHECKPOINT:
                env.checkpoint(forceConfig);
                break;
            case REMOVEDB:
                Label842: ;

                break;
            case DBSTATS:
	               Label838: ;
                break;
            }
            actionEnd = System.currentTimeMillis();

            env.close();


        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(e.getMessage());
            usage();
            System.exit(1);
        } finally {
            DecimalFormat f = new DecimalFormat();
            f.setMaximumFractionDigits(2);

            long recoveryDuration = actionStart - recoveryStart;
            System.out.println("\nrecovery time = " +
                               f.format(recoveryDuration) +
                               " millis " +
                               f.format((double)recoveryDuration/60000) +
                               " minutes");

            long actionDuration = actionEnd - actionStart;
            System.out.println("action time = " +
                               f.format(actionDuration) +
                               " millis " +
                               f.format(actionDuration/60000) +
                               " minutes");

        }
    
    }

    private static String getSecs(long start, long end) {
	return (end - start) / 1000 + " secs";
    }

    private static void preload(Environment env, String dbName) throws DatabaseException {
	System.out.println("Preload starting");
	Database db = env.openDatabase(null, dbName, null);
	Cursor cursor = db.openCursor(null, null);
	try {
	    DatabaseEntry key = new DatabaseEntry();
	    DatabaseEntry data = new DatabaseEntry();
	    int count = 0;
	    while (cursor.getNext(key, data, LockMode.DEFAULT) == OperationStatus.SUCCESS) {
		count++;
		if ((count % 50000) == 0) {
		    System.out.println(count + "...");
		}
	    }
	    System.out.println("Preloaded " + count + " records");
	} finally {
	    cursor.close();
	    db.close();
	}
    }

    private static void usage() {
	System.out.println("Usage: \n " + CmdUtil.getJavaCommand(DbRunAction.class));
	System.out.println("  -h <environment home> ");
	System.out.println("  -a <clean|compress|evict|checkpoint|removedb>");
	System.out.println("  -ro (read-only - defaults to read-write)");
	System.out.println("  -s <dbName> (for preloading of evict or db remove)");
    }

}
