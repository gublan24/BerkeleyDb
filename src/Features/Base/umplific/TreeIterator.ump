namespace com.sleepycat.je.tree;

class TreeIterator
{
  isA Iterator;
  depend com.sleepycat.je.DatabaseException;
  depend java.util.NoSuchElementException;
  depend java.util.Iterator;
    private Tree tree;

    private BIN nextBin;

    private int index;

    public TreeIterator(Tree tree) throws DatabaseException {
	nextBin = (BIN) tree.getFirstNode();
	Label755:           ;  //this.hook755();
	index = -1;
	this.tree = tree;
    }

    public boolean hasNext() {
	boolean ret = false;
	try {
	    Label756:           ;  //this.hook756();
	    advance();
	    ret = (nextBin != null) && (index < nextBin.getNEntries());
	} catch (DatabaseException e) {
	} finally {
	    Label757:           ;  //this.hook757();
	}
	return ret;
    }

  public Object next() {
    Object ret = null;
    try {
      if (nextBin == null) {
        throw new NoSuchElementException();
      }
      Label758: ; // this.hook758();
      ret = nextBin.getKey(index);
    } 
    catch (DatabaseException e) {

    } 
    finally {
      Label759: ; // this.hook759();
    }
    return ret;
  }

    public void remove() {
	throw new UnsupportedOperationException();
    }

    private void advance() throws DatabaseException {
	while (nextBin != null) {
	    if (++index < nextBin.getNEntries()) {
		return;
	    }
	    nextBin = tree.getNextBin(nextBin, false);
	    index = -1;
	}
    }
/*
    protected void hook755() throws DatabaseException {
    }

    protected void hook756() throws DatabaseException {
    }

    protected void hook757() {
    }

    protected void hook758() throws DatabaseException {
    }

    protected void hook759() {
    }
*/
}
