namespace com.sleepycat.bind.serial;

class TupleSerialBinding
{
  isA EntityBinding;
  isA TupleBase;
  depend com.sleepycat.je.DatabaseEntry;
  depend com.sleepycat.bind.tuple.TupleOutput;
  depend com.sleepycat.bind.tuple.TupleInput;
  depend com.sleepycat.bind.tuple.TupleBase;
  depend com.sleepycat.bind.EntityBinding;
    protected SerialBinding dataBinding;

    /** 
     * Creates a tuple-serial entity binding.
     * @param classCatalogis the catalog to hold shared class information and for adatabase should be a  {@link StoredClassCatalog}.
     * @param baseClassis the base class.
     */
    public TupleSerialBinding(ClassCatalog classCatalog, Class baseClass) {
	this(new SerialBinding(classCatalog, baseClass));
    }

    /** 
     * Creates a tuple-serial entity binding.
     * @param dataBindingis the data binding.
     */
    public TupleSerialBinding(SerialBinding dataBinding) {
	this.dataBinding = dataBinding;
    }

    public Object entryToObject(DatabaseEntry key, DatabaseEntry data) {
	return entryToObject(entryToInput(key), dataBinding.entryToObject(data));
    }

    public void objectToKey(Object object, DatabaseEntry key) {
	TupleOutput output = getTupleOutput(object);
	objectToKey(object, output);
	outputToEntry(output, key);
    }

    public void objectToData(Object object, DatabaseEntry data) {
	object = objectToData(object);
	dataBinding.objectToEntry(object, data);
    }

    /** 
     * Constructs an entity object from  {@link TupleInput} key entry anddeserialized data entry objects.
     * @param keyInputis the {@link TupleInput} key entry object.
     * @param dataInputis the deserialized data entry object.
     * @return the entity object constructed from the key and data.
     */
    public abstract Object entryToObject(TupleInput keyInput, Object dataInput);

    /** 
     * Extracts a key tuple from an entity object.
     * @param objectis the entity object.
     * @param keyOutputis the {@link TupleOutput} to which the key should be written.
     */
    public abstract void objectToKey(Object object, TupleOutput keyOutput);

    /** 
     * Extracts a data object from an entity object.
     * @param objectis the entity object.
     * @return the deserialized data object.
     */
    public abstract Object objectToData(Object object);

}
