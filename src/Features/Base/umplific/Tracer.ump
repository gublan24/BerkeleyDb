namespace com.sleepycat.je.utilint;
class Tracer
{
  depend com.sleepycat.je.log.LoggableObject;
  depend com.sleepycat.je.log.LogUtils;
  depend com.sleepycat.je.log.LogReadable;
  depend com.sleepycat.je.log.LogEntryType;
  depend com.sleepycat.je.dbi.EnvironmentImpl;
  depend com.sleepycat.je.config.ConfigParam;
  depend com.sleepycat.je.DatabaseException;
  depend java.util.logging.Level;
  depend java.util.Calendar;
  depend java.sql.Timestamp;
  depend java.nio.ByteBuffer;
  depend java.io.StringWriter;
  depend java.io.PrintWriter;
  
  strictness disable constructor;

    public static final String INFO_FILES = "je.info";

    private Timestamp time;

    private String msg;

    /** 
     * Create a new debug record.
     */
    public Tracer(String msg) {
	this.time = getCurrentTimestamp();
	this.msg = msg;
    }

    /** 
     * Logger method for recording a general message.
     */
    public static void trace(Level logLevel, EnvironmentImpl envImpl, String msg) {
    }

    /** 
     * Parse a logging level config parameter, and return a more explanatory error message if it doesn't parse.
     */
    public static Level parseLevel(EnvironmentImpl envImpl, ConfigParam configParam) throws DatabaseException {
	Level level = null;
	try {
	    String levelVal = envImpl.getConfigManager().get(configParam);
	    level = Level.parse(levelVal);
	} catch (IllegalArgumentException e) {
	    throw new DatabaseException("Problem parsing parameter " + configParam.getName() + ": " + e.getMessage(),
		    e);
	}
	return level;
    }

    /** 
     * @return a timestamp for "now"
     */
    private Timestamp getCurrentTimestamp() {
	Calendar cal = Calendar.getInstance();
	return new Timestamp(cal.getTime().getTime());
    }

    /** 
     * @return the stacktrace for an exception
     */
    public static String getStackTrace(Throwable t) {
	StringWriter s = new StringWriter();
	t.printStackTrace(new PrintWriter(s));
	String stackTrace = s.toString();
	stackTrace = stackTrace.replaceAll("<", "&lt;");
	stackTrace = stackTrace.replaceAll(">", "&gt;");
	return stackTrace;
    }

}
