namespace com.sleepycat.je.txn;

class SyncedLockManager
{
  isA LockManager;
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.je.dbi.MemoryBudget;
  depend com.sleepycat.je.dbi.EnvironmentImpl;
  depend com.sleepycat.je.dbi.DatabaseImpl;
  depend com.sleepycat.je.LockStats;
  depend com.sleepycat.je.DatabaseException;
  depend java.util.Set;
    public SyncedLockManager(EnvironmentImpl envImpl) throws DatabaseException {
	super(envImpl);
    }

    /** 
     * @see LockManager#attemptLock
     */
  protected LockAttemptResult attemptLock(Long nodeId, Locker locker, LockType type, boolean nonBlockingRequest)
      throws DatabaseException {
    int lockTableIndex = getLockTableIndex(nodeId);
    LockAttemptResult temp =null;
    Label782: ; // this.hook782(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
    temp= attemptLockInternal(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
    Label782_1: ; // end of hook782
    return temp;

  }

    /** 
     * @see LockManager#makeTimeoutMsg
     */
  protected String makeTimeoutMsg(String lockOrTxn, Locker locker, long nodeId, LockType type, LockGrantType grantType,
      Lock useLock, long timeout, long start, long now, DatabaseImpl database) {
    int lockTableIndex = getLockTableIndex(nodeId);
    String temp; 
    Label783: ; 
    temp = makeTimeoutMsgInternal(lockOrTxn, locker, nodeId, type, grantType, useLock, timeout, start, now,
        database);
    Label783_1: ;// end of hook783
    return temp;

  }

    /** 
     * @see LockManager#releaseAndNotifyTargets
     */
  protected Set releaseAndFindNotifyTargets(long nodeId, Lock lock, Locker locker, boolean removeFromLocker)
      throws DatabaseException {

    long nid = nodeId;
    if (nid == -1) {
      nid = lock.getNodeId().longValue();
    }
    int lockTableIndex = getLockTableIndex(nid);
    Set temp = null;
    Label784: ; // this.hook784(nodeId, lock, locker, removeFromLocker, lockTableIndex);
    temp = releaseAndFindNotifyTargetsInternal(nodeId, lock, locker, removeFromLocker, lockTableIndex);
    Label784_1: ;// end hook784
    return temp;

  }

    /** 
     * @see LockManager#transfer
     */
    void transfer(long nodeId, Locker owningLocker, Locker destLocker, boolean demoteToRead) throws DatabaseException {
	int lockTableIndex = getLockTableIndex(nodeId);
	Label785:           ;  //this.hook785(nodeId, owningLocker, destLocker, demoteToRead, lockTableIndex);
	transferInternal(nodeId, owningLocker, destLocker, demoteToRead, lockTableIndex);
  Label785_1: ;//end hook785
    }

    /** 
     * @see LockManager#transferMultiple
     */
    void transferMultiple(long nodeId, Locker owningLocker, Locker[] destLockers) throws DatabaseException {
	int lockTableIndex = getLockTableIndex(nodeId);
	Label786:           ;  //this.hook786(nodeId, owningLocker, destLockers, lockTableIndex);
	transferMultipleInternal(nodeId, owningLocker, destLockers, lockTableIndex);
  Label786_1: ;//end hook786
    }

    /** 
     * @see LockManager#demote
     */
    void demote(long nodeId, Locker locker) throws DatabaseException {
	int lockTableIndex = getLockTableIndex(nodeId);
	Label787:           ;  //this.hook787(nodeId, locker, lockTableIndex);
	demoteInternal(nodeId, locker, lockTableIndex);
	Label787_1: ;// end hook787
    }

    /** 
     * @see LockManager#isLocked
     */
    boolean isLocked(Long nodeId) {
	    int lockTableIndex = getLockTableIndex(nodeId);
      boolean temp = true;
	    Label788:           ;  //this.hook788(nodeId, lockTableIndex);
	    temp = isLockedInternal(nodeId, lockTableIndex);
      Label788_1: ;
      return temp;
    }

    /** 
     * @see LockManager#isOwner
     */
    boolean isOwner(Long nodeId, Locker locker, LockType type) {
	    int lockTableIndex = getLockTableIndex(nodeId);
      boolean temp  = false;
	    Label789:           ;  //this.hook789(nodeId, locker, type, lockTableIndex);
      temp = isOwnerInternal(nodeId, locker, type, lockTableIndex);
      Label789_1: ;//end hook789
      return temp;
    }

    /** 
     * @see LockManager#isWaiter
     */
    boolean isWaiter(Long nodeId, Locker locker) {
	    int lockTableIndex = getLockTableIndex(nodeId);
      boolean temp  = false;
	    Label790:           ;  //this.hook790(nodeId, locker, lockTableIndex);
	    temp = isWaiterInternal(nodeId, locker, lockTableIndex);
      Label790_1: ;//end hook790
	    return temp;
    }

    /** 
     * @see LockManager#nWaiters
     */
    int nWaiters(Long nodeId) {
	    int lockTableIndex = getLockTableIndex(nodeId);
      int temp = 0;
	    Label791:           ;  //this.hook791(nodeId, lockTableIndex);
	    temp= nWaitersInternal(nodeId, lockTableIndex);
      Label791_1: ;
      return temp;
    }

    /** 
     * @see LockManager#nOwners
     */
    int nOwners(Long nodeId) {
	    int lockTableIndex = getLockTableIndex(nodeId);
      int temp =0;
	    Label792:           ;  //this.hook792(nodeId, lockTableIndex);
	    temp = nOwnersInternal(nodeId, lockTableIndex);
      Label792_1: ;
      return temp;
    }

    /** 
     * @see LockManager#getWriterOwnerLocker
     */
    Locker getWriteOwnerLocker(Long nodeId) throws DatabaseException {
	    int lockTableIndex = getLockTableIndex(nodeId);
      Locker temp = null;
	    Label793:           ;  //this.hook793(nodeId, lockTableIndex);
	    temp = getWriteOwnerLockerInternal(nodeId, lockTableIndex);
	    Label793_1: ;
      return temp;
    }

    /** 
     * @see LockManager#validateOwnership
     */
    protected boolean validateOwnership(Long nodeId, Locker locker, LockType type, boolean flushFromWaiters,
	    MemoryBudget mb) throws DatabaseException {
	    int lockTableIndex = getLockTableIndex(nodeId);
      boolean temp = true;
	    Label794:           ;  //this.hook794(nodeId, locker, type, flushFromWaiters, mb, lockTableIndex);
	    temp = validateOwnershipInternal(nodeId, locker, type, flushFromWaiters, mb, lockTableIndex);
      Label794_1: ;

	    return temp;
    }

    /** 
     * @see LockManager#dumpLockTable
     */
    protected void dumpLockTable(LockStats stats) throws DatabaseException {
	    for (int i = 0; i < nLockTables; i++) {
	      Label795:           ;  //this.hook795(stats, i);
	      dumpLockTableInternal(stats, i);
	      Label795_1: ;//end hook795
	    }
    }

}
