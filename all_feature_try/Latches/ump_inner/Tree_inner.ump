// Original file:/home/abdulaziz/Desktop/BerkeleyDb/all_feature_try/Latches/com/sleepycat/je/tree/Tree.java
class Tree {
  @MethodObject static class Tree_forceSplit {
      protected void hook722() throws DatabaseException, SplitRequiredException {
        isRootLatched=false;
        original();
      }
      protected void hook723() throws DatabaseException, SplitRequiredException {
        if (origParent.isDbRoot()) {
          _this.rootLatch.acquireExclusive();
          isRootLatched=true;
        }
        origParent.latch();
        original();
      }
      protected void hook724() throws DatabaseException, SplitRequiredException {
        child.latch();
        original();
      }
      protected void hook725() throws DatabaseException, SplitRequiredException {
        child.releaseLatch();
        original();
      }
      protected void hook726() throws DatabaseException, SplitRequiredException {
        assert isRootLatched;
        original();
      }
      protected void hook727() throws DatabaseException, SplitRequiredException {
        if (!success) {
          if (child != null) {
            child.releaseLatchIfOwner();
          }
          origParent.releaseLatchIfOwner();
        }
        if (nodeLadder.size() > 0) {
          iter=nodeLadder.listIterator(nodeLadder.size());
          while (iter.hasPrevious()) {
            info2=(SplitInfo)iter.previous();
            info2.child.releaseLatchIfOwner();
          }
        }
        if (isRootLatched) {
          _this.rootLatch.release();
        }
        original();
      }
    }
  @MethodObject static class Tree_searchSplitsAllowed {
      protected void hook716() throws DatabaseException {
        try {
          original();
        }
    finally {
          if (rootLatched) {
            _this.rootLatch.release();
          }
        }
      }
      protected void hook717() throws DatabaseException {
        _this.rootLatch.acquireShared();
        rootLatched=true;
        rootLatchedExclusive=false;
        original();
      }
      protected void hook718() throws DatabaseException {
        rootIN.latch();
        original();
      }
      protected void hook719() throws DatabaseException {
        rootLatched=true;
        _this.rootLatch.acquireExclusive();
        original();
      }
      protected void hook720() throws DatabaseException {
        _this.splitRoot();
        _this.rootLatch.release();
        rootLatched=false;
        original();
      }
      protected void hook721() throws DatabaseException {
        b=!rootLatchedExclusive;
        if (b) {
          rootIN=null;
          _this.rootLatch.release();
          _this.rootLatch.acquireExclusive();
          rootLatchedExclusive=true;
        }
        original();
      }
    }
  inner class RootChildReference {
      protected void hook666() throws DatabaseException {
        if (getTarget() == null && !rootLatch.isWriteLockedByCurrentThread()) {
          rootLatch.release();
          rootLatch.acquireExclusive();
        }
        original();
      }
      protected void hook667(){
        assert rootLatch.isWriteLockedByCurrentThread();
        original();
      }
      protected void hook668(){
        assert rootLatch.isWriteLockedByCurrentThread();
        original();
      }
      protected void hook669(){
        assert rootLatch.isWriteLockedByCurrentThread();
        original();
      }
    }
}
