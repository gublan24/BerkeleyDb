// Original file:/home/abdulaziz/Desktop/BerkeleyDb/all_feature_try/base/com/sleepycat/je/dbi/DatabaseImpl.java
class DatabaseImpl {
  static class ObsoleteProcessor implements TreeNodeProcessor {
      private UtilizationTracker tracker;
      ObsoleteProcessor(    UtilizationTracker tracker){
        this.tracker=tracker;
      }
      public void processLSN(    long childLsn,    LogEntryType childType){
        assert childLsn != DbLsn.NULL_LSN;
        tracker.countObsoleteNodeInexact(childLsn,childType);
      }
    }
  static class LNCounter implements TreeNodeProcessor {
      private long counter;
      public void processLSN(    long childLsn,    LogEntryType childType){
        assert childLsn != DbLsn.NULL_LSN;
        if (childType.equals(LogEntryType.LOG_LN_TRANSACTIONAL) || childType.equals(LogEntryType.LOG_LN)) {
          counter++;
        }
      }
      long getCount(){
        return counter;
      }
    }
  static class HaltPreloadException extends RuntimeException {
      private PreloadStatus status;
      HaltPreloadException(    PreloadStatus status){
        super(status.toString());
        this.status=status;
      }
      PreloadStatus getStatus(){
        return status;
      }
    }
  @MethodObject static class DatabaseImpl_preload {
      DatabaseImpl_preload(    DatabaseImpl _this,    PreloadConfig config){
        this._this=_this;
        this.config=config;
      }
      PreloadStats execute() throws DatabaseException {
        maxBytes=config.getMaxBytes();
        maxMillisecs=config.getMaxMillisecs();
        targetTime=Long.MAX_VALUE;
        if (maxMillisecs > 0) {
          targetTime=System.currentTimeMillis() + maxMillisecs;
        }
        this.hook290();
        ret=new PreloadStats();
        callback=new PreloadProcessor(_this.envImpl,maxBytes,targetTime,ret);
        walker=new PreloadLSNTreeWalker(_this,callback,config);
        this.hook287();
        return ret;
      }
      protected DatabaseImpl _this;
      protected PreloadConfig config;
      protected long maxBytes;
      protected long maxMillisecs;
      protected long targetTime;
      protected long cacheBudget;
      protected PreloadStats ret;
      protected PreloadProcessor callback;
      protected SortedLSNTreeWalker walker;
      protected void hook287() throws DatabaseException {
        walker.walk();
      }
      protected void hook290() throws DatabaseException {
      }
    }
}
