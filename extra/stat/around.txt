FileHandleCache/umpilif/FileHandleCache_FileManager.ump:namespace com.sleepycat.je.log;

class FileManager
{
    private FileCache fileCache;

    Set getCacheKeys() {
			return fileCache.getCacheKeys();
    }

    /** 
     * Clear a file out of the file cache regardless of mode type.
     */
    private void clearFileCache(long fileNum) throws IOException, DatabaseException {
			fileCache.remove(fileNum);
    }

  //  protected void hook451() throws IOException, DatabaseException {
	//		fileCache.clear();
  //  }

  after LLLLLLLLLLLLLL457: FileManager(EnvironmentImpl, File , boolean )
  {
    		fileCache = new FileCache(configManager);
  }
 //   protected void hook457(DbConfigManager configManager) throws DatabaseException {
		//	fileCache = new FileCache(configManager);
//			original(configManager);
    //}

  //  protected void hook458(long fileNum) throws DatabaseException, IOException {
	//		clearFileCache(fileNum);
	//		original(fileNum);
   // }
  after LLLLLLLLLLLLLL458:renameFile(long, String )
  {
    clearFileCache(fileNum);
  }

//    protected void hook459(long fileNum) throws DatabaseException, IOException {
//			clearFileCache(fileNum);
//			original(fileNum);
//    }
  after LLLLLLLLLLLLLL459: deleteFile(long)
  {
			clearFileCache(fileNum);
  }

  around Label460-Label460_1:getFileHandle(long ){

			while (true) {
			  around_proceed: //original(fileNum, fileId, fileHandle);
			}
		 }

  after LLLLLLLLLLLLLL461: abortCommittedTxns(ByteBuffer ) {
	data.position(0);

  }
 //   protected void hook461(ByteBuffer data) {
//	data.position(0);
//	original(data);
 //   }

    /** 
     * Close all file handles and empty the cache.
     */
//    public void clear() throws IOException, DatabaseException {
//	{
//	    this.hook451();
//	}
//	original();
 //   }

  before clear()
  {
    fileCache.clear();
  }


  after LLLLLLLLLLLLLL462: getFileHandle(long) 
  {
    fileHandle = fileCache.get(fileId);
	  if (fileHandle == null) // continue 
  }
 


  after LLLLLLLLLLLLLL464: getFileHandle(long )
	{
	fileCache.add(fileId, fileHandle);
	}    

 //protected void hook464(Long fileId, FileHandle fileHandle) throws LogException, DatabaseException {
	//fileCache.add(fileId, fileHandle);
	//original(fileId, fileHandle);
    //}

	

}
\00Latches/umpilif/Latches_SyncedLockManager.ump:namespace com.sleepycat.je.txn;

class SyncedLockManager
{
    around Label782-Label782_1:attemptLock(Long , Locker , LockType , boolean ){
	    synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }

    around Label783-Label783_1: makeTimeoutMsg(String , Locker , long , LockType , LockGrantType , Lock , long , long , long , DatabaseImpl ) {
     synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }

    around Label784-Label784_1: releaseAndFindNotifyTargets(long , Lock , Locker , boolean ) {
     synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }

    around Label785-Label785_1: transfer(long , Locker , Locker , boolean )  {
	   synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }

    around Label786-Label786_1:  	transferMultiple(long , Locker , Locker ) {
	   synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }

    around Label787-Label787_1:  demote(long , Locker ) {
	   synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }
    around Label788-Label788_1: isLocked(Long ) {
	   synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }
    around Label789-Label789_1: isOwner(Long , Locker , LockType ) { //isOwner(Long nodeId, Locker locker, LockType type){
	   synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }
    around Label790-Label790_1: isWaiter(Long , Locker ) {
	   synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }
    around Label791-Label791_1:  nWaiters(Long ) {
	   synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }
    around Label792-Label792_1: nOwners(Long ) {
	   synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }
    around Label793-Label793_1:  getWriteOwnerLocker(Long ) {
	   synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }
    around Label794-Label794_1:  validateOwnership(Long , Locker , LockType , boolean ,	    MemoryBudget ) {
	   synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }
    around Label795-Label795_1: dumpLockTable(LockStats ) {
	   synchronized (lockTableLatches[lockTableIndex]) { 
        around_proceed:
	      // //original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
	    }
    }
}
\00Latches/ump_inner/Latches_CursorImpl_inner.ump:// //original file:/home/abdulaziz/Desktop/BerkeleyDb/ALL_FEATURE/features/Latches/com/sleepycat/je/dbi/CursorImpl.java
namespace com.sleepycat.je.dbi;
class CursorImpl {
   static class CursorImpl_latchBIN {

      around Label244-Label244_1: execute() {
        while (_this.bin != null) {
          around_proceed:
        }
        throw new ReturnObject(null);
      }

      around Label245-Label244_1: execute() {
        waitingOn=_this.bin;
        waitingOn.latch();
        if (_this.bin == waitingOn) {
          around_proceed:
        }
        waitingOn.releaseLatch();
      }

    }

   static class CursorImpl_getNextDuplicate {

      after LLLLLLLLLLLLLL250: execute() {
        assert _this.checkAlreadyLatched(alreadyLatched) : _this.dumpToString(true);
        //original();
      }

      after LLLLLLLLLLLLLL251: execute() {
        if (!alreadyLatched) {
          _this.latchDBIN();
        }
   else {
          alreadyLatched=false;
        }
        //original();
      }
      after LLLLLLLLLLLLLL252: execute() {
        _this.releaseDBIN();
        //original();
      }
      after LLLLLLLLLLLLLL253: execute() {
        assert LatchSupport.countLatchesHeld() == 0;
        //original();
      }
      after LLLLLLLLLLLLLL254: execute() {

        assert (LatchSupport.countLatchesHeld() == 0);
        _this.dupBinToBeRemoved.latch();
        //original();
      }
      after LLLLLLLLLLLLLL255: execute() {
        _this.dupBinToBeRemoved.releaseLatch();
        //original();
      }
      after LLLLLLLLLLLLLL256: execute() {

        alreadyLatched=true;
        //original();
      }
      after LLLLLLLLLLLLLL257: execute() {
        assert LatchSupport.countLatchesHeld() == 0;
        //original();
      }
    }
   static class CursorImpl_lockNextKeyForInsert {
      around Label248-Label248_1:execute(){
        latched=true;
        try {
              around_proceed:
        }
    finally {
          if (latched) {
            _this.releaseBINs();
          }
        }
      }
      after LLLLLLLLLLLLLL249:execute(){
        latched=false;
        //original();
      }
    }
   static class CursorImpl_latchDBIN {
      around Label246-Label246_1:execute(){
        while (_this.dupBin != null) {
          around_proceed:
        }
        throw new ReturnObject(null);
      }
      
      around Label247-Label246_1:execute(){
        waitingOn=_this.dupBin;
        waitingOn.latch();
        if (_this.dupBin == waitingOn) {
                    around_proceed://original();
        }
        waitingOn.releaseLatch();
      }
    }
   static class CursorImpl_fetchCurrent {

     around Label258-Label258_1:execute(){
        try {
          around_proceed://original();
        }
    finally {
          _this.releaseBINs();
        }
      }

      after LLLLLLLLLLLLLL259:execute(){
        assert _this.targetBin.isLatchOwner();
        //original();
      }

      around Label260-Label260_1:execute(){
        try {
          around_proceed://original();
        }
        catch (      DatabaseException DE) {
          _this.targetBin.releaseLatchIfOwner();
          throw DE;
        }
      }
      after LLLLLLLLLLLLLL261:execute(){
        _this.targetBin.releaseLatchIfOwner();
        //original();
      }
      after LLLLLLLLLLLLLL262:execute(){
        duplicateRoot.latch();
        _this.targetBin.releaseLatch();
        //original();
      }
      around Label263-Label263_1:execute(){
        try {
          around_proceed://original();
        }
   catch (      DatabaseException DE) {
          _this.releaseBINs();
          throw DE;
        }
      }
    }
}
\00Evictor/ump_inner/Evictor_Checkpointer_inner.ump:// Original file:/home/abdulaziz/Desktop/BerkeleyDb/ALL_FEATURE/features/Evictor/com/sleepycat/je/recovery/Checkpointer.java
namespace com.sleepycat.je.recovery;
class Checkpointer {
   static class Checkpointer_doCheckpoint {
      around Label547-Label551:execute() {    
        synchronized (_this.envImpl.getEvictor()) {
          around_proceed:
        }
      }
    }
}
\00Derivative_Statistics_Verifier_INCompressor/umpilif/Derivative_Statistics_Verifier_INCompressor_DbTree.ump:namespace com.sleepycat.je.dbi;

class DbTree
{
    around Label292_1-Label292: verify(VerifyConfig , PrintStream ) {
    	synchronized (envImpl.getINCompressor()) {
  	    around_proceed: //ret = original(config, out, ret);
			}
    }

}
\00Statistics/ump_inner/Statistics_DatabaseImpl_inner.ump:// Original file:/home/abdulaziz/Desktop/BerkeleyDb/ALL_FEATURE/features/Statistics/com/sleepycat/je/dbi/DatabaseImpl.java
namespace com.sleepycat.je.dbi;
class DatabaseImpl {
  static class DatabaseImpl_preload {
      around Label287-Label287_1:execute() {
        try {
              around_proceed:
        }
   catch (   HaltPreloadException HPE) {
          ret.status=HPE.getStatus();
        }
      }
    }
}
\00Derivative_Latches_FileHandleCache/umpilif/Derivative_Latches_FileHandleCache_FileCache.ump:namespace com.sleepycat.je.log;

class FileCache
{
    around Label438-Label438_1:  add(Long , FileHandle ){

			if (evictTarget.latchNoWait()) {
					around_proceed: //original(iter, done, evictId, evictTarget);
			}
    }


    after LLLLLLLLLLLLLL439_1:remove(long ){
	    evictTarget.release();

    }

    after LLLLLLLLLLLLLL440_1:clear(){
//	try {	    original(iter, fileHandle);} finally {
	    fileHandle.release();
//	}
    }


    after LLLLLLLLLLLLLL441:add(Long, FileHandle ){
	evictTarget.release();
	//original(evictTarget);
    }

    after LLLLLLLLLLLLLL442: remove(long ){
	evictTarget.latch();
	//original(evictTarget);
    }

    after LLLLLLLLLLLLLL443: clear(){
	fileHandle.latch();
	//original(fileHandle);
    }

}
\00Derivative_NIO_ChunkedNIO/ump_inner/Derivative_NIO_ChunkedNIO_FileManager_inner.ump:// Original file:/home/abdulaziz/Desktop/BerkeleyDb/ALL_FEATURE/features/Derivative_NIO_ChunkedNIO/com/sleepycat/je/log/FileManager.java
namespace com.sleepycat.je.log;
class FileManager {
   static class FileManager_writeToFile {
      after LLLLLLLLLLLLLL445: execute(){

        if (_this.chunkedNIOSize > 0) {
          useData=data.duplicate();
          origLimit=useData.limit();
          useData.limit(useData.position());
          while (useData.limit() < origLimit) {
            useData.limit((int)(Math.min(useData.limit() + _this.chunkedNIOSize,origLimit)));
            bytesWritten=channel.write(useData,destOffset);
            destOffset+=bytesWritten;
            totalBytesWritten+=bytesWritten;
          }
        }
//   else {
 //         original();
  //      }
      }
    }
   static class FileManager_readFromFile {
      around Label446-Label446_1: execute(){
        if (_this.chunkedNIOSize > 0) {
          readLength=readBuffer.limit();
          currentPosition=offset;
          while (readBuffer.position() < readLength) {
            readBuffer.limit((int)(Math.min(readBuffer.limit() + _this.chunkedNIOSize,readLength)));
            bytesRead1=channel.read(readBuffer,currentPosition);
            if (bytesRead1 < 1)           break;
            currentPosition+=bytesRead1;
          }
        }
   else {
          around_proceed: //original();
        }
      }
    }
}
\00Derivative_IO_SynchronizedIO/ump_inner/Derivative_IO_SynchronizedIO_FileManager_inner.ump:
class FileManager {
   static class FileManager_writeToFile {
     around Label447-Label447_1: execute() {
			synchronized (file) {
				around_proceed:
        }
      }
    }
   static class FileManager_readFromFile {
      around Label448-Label448_1: execute() {
				synchronized (file) {
					around_proceed:
        }
      }
    }
}
\00
