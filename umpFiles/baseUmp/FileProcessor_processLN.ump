namespace com.sleepycat.je.cleaner;

class FileProcessor_processLN
{
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.je.utilint.Tracer;
  depend com.sleepycat.je.utilint.DbLsn;
  depend com.sleepycat.je.utilint.DaemonThread;
  depend com.sleepycat.je.txn.LockType;
  depend com.sleepycat.je.txn.LockResult;
  depend com.sleepycat.je.txn.LockGrantType;
  depend com.sleepycat.je.txn.BasicLocker;
  depend com.sleepycat.je.tree.WithRootLatched;
  depend com.sleepycat.je.tree.TreeLocation;
  depend com.sleepycat.je.tree.Tree;
  depend com.sleepycat.je.tree.SearchResult;
  depend com.sleepycat.je.tree.LN;
  depend com.sleepycat.je.tree.IN;
  depend com.sleepycat.je.tree.DIN;
  depend com.sleepycat.je.tree.ChildReference;
  depend com.sleepycat.je.tree.BIN;
  depend com.sleepycat.je.log.CleanerFileReader;
  depend com.sleepycat.je.dbi.MemoryBudget;
  depend com.sleepycat.je.dbi.EnvironmentImpl;
  depend com.sleepycat.je.dbi.DbTree;
  depend com.sleepycat.je.dbi.DatabaseImpl;
  depend com.sleepycat.je.dbi.DatabaseId;
  depend com.sleepycat.je.DatabaseException;
  depend java.util.logging.Level;
  depend java.util.TreeMap;
  depend java.util.SortedMap;
  depend java.util.Set;
  depend java.util.Map;
  depend java.util.Iterator;
  depend java.util.HashSet;
  depend java.util.HashMap;
  depend java.io.IOException;
    protected FileProcessor _this;

    protected Long fileNum;

    protected TreeLocation location;

    protected Long offset;

    protected LNInfo info;

    protected Object lookAheadCachep;

    protected Map dbCache;

    protected LN ln;

    protected byte[] key;

    protected byte[] dupKey;

    protected long logLsn;

    protected DatabaseImpl db;

    protected boolean processedHere;

    protected boolean obsolete;

    protected boolean completed;

    protected BIN bin;

    protected DIN parentDIN;

    protected boolean b;

    protected Tree tree;

    protected boolean parentFound;

    protected int index;

    protected boolean isDupCountLN;

    protected long treeLsn;

    protected ChildReference dclRef;

    protected long lsn;

    protected Long myOffset;

    protected LNInfo myInfo;

    FileProcessor_processLN(FileProcessor _this, Long fileNum, TreeLocation location, Long offset, LNInfo info,
	    Object lookAheadCachep, Map dbCache) {
	this._this = _this;
	this.fileNum = fileNum;
	this.location = location;
	this.offset = offset;
	this.info = info;
	this.lookAheadCachep = lookAheadCachep;
	this.dbCache = dbCache;
    }

    void execute() throws DatabaseException {
	this.hook132();
	ln = info.getLN();
	key = info.getKey();
	dupKey = info.getDupKey();
	logLsn = DbLsn.makeLsn(fileNum.longValue(), offset.longValue());
	db = _this.env.getDbMapTree().getDb(info.getDbId(), _this.cleaner.lockTimeout, dbCache);
	processedHere = true;
	obsolete = false;
	completed = false;
	bin = null;
	parentDIN = null;
	try {
	    b = db == null;
	    this.hook157();
	    if (b) {
		this.hook158();
		this.hook148();
		obsolete = true;
		completed = true;
		return;
	    }
	    tree = db.getTree();
	    assert tree != null;
	    parentFound = tree.getParentBINForChildLN(location, key, dupKey, ln, false, true, false,
		    Cleaner.UPDATE_GENERATION);
	    bin = location.bin;
	    index = location.index;
	    if (!parentFound) {
		this.hook149();
		obsolete = true;
		completed = true;
		return;
	    }
	    if (bin.isEntryKnownDeleted(index)) {
		this.hook150();
		obsolete = true;
		completed = true;
		return;
	    }
	    isDupCountLN = ln.containsDuplicates();
	    {
	    }
	    if (isDupCountLN) {
		parentDIN = (DIN) bin.fetchTarget(index);
		parentDIN.latch(Cleaner.UPDATE_GENERATION);
		dclRef = parentDIN.getDupCountLNRef();
		treeLsn = dclRef.getLsn();
	    } else {
		treeLsn = bin.getLsn(index);
	    }
	    processedHere = false;
	    _this.processFoundLN(info, logLsn, treeLsn, bin, index, parentDIN);
	    completed = true;
	    this.hook133();
	    return;
	} finally {
	    this.hook135();
	    this.hook126();
	}
    }

    protected void hook126() throws DatabaseException {
    }

    protected void hook132() throws DatabaseException {
    }

    protected void hook133() throws DatabaseException {
    }

    protected void hook135() throws DatabaseException {
    }

    protected void hook148() throws DatabaseException {
    }

    protected void hook149() throws DatabaseException {
    }

    protected void hook150() throws DatabaseException {
    }

    protected void hook157() throws DatabaseException {
    }

    protected void hook158() throws DatabaseException {
    }

}
