namespace com.sleepycat.je.cleaner;

class Cleaner_processPending
{
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.je.utilint.Tracer;
  depend com.sleepycat.je.utilint.PropUtil;
  depend com.sleepycat.je.utilint.DbLsn;
  depend com.sleepycat.je.utilint.DaemonRunner;
  depend com.sleepycat.je.txn.LockType;
  depend com.sleepycat.je.txn.LockResult;
  depend com.sleepycat.je.txn.LockGrantType;
  depend com.sleepycat.je.txn.BasicLocker;
  depend com.sleepycat.je.tree.TreeLocation;
  depend com.sleepycat.je.tree.Tree;
  depend com.sleepycat.je.tree.Node;
  depend com.sleepycat.je.tree.LN;
  depend com.sleepycat.je.tree.DIN;
  depend com.sleepycat.je.tree.ChildReference;
  depend com.sleepycat.je.tree.BIN;
  depend com.sleepycat.je.log.FileManager;
  depend com.sleepycat.je.dbi.EnvironmentImpl;
  depend com.sleepycat.je.dbi.EnvConfigObserver;
  depend com.sleepycat.je.dbi.DbTree;
  depend com.sleepycat.je.dbi.DbConfigManager;
  depend com.sleepycat.je.dbi.DatabaseImpl;
  depend com.sleepycat.je.dbi.DatabaseId;
  depend com.sleepycat.je.config.EnvironmentParams;
  depend com.sleepycat.je.DatabaseException;
  depend java.util.logging.Logger;
  depend java.util.logging.Level;
  depend java.util.Set;
  depend java.util.Iterator;
  depend java.util.Comparator;
  depend java.util.Collections;
  depend java.util.Arrays;
  depend java.io.IOException;
    protected Cleaner _this;

    protected DbTree dbMapTree;

    protected LNInfo[] pendingLNs;

    protected TreeLocation location;

    protected LNInfo info;

    protected DatabaseId dbId1;

    protected DatabaseImpl db1;

    protected byte[] key;

    protected byte[] dupKey;

    protected LN ln;

    protected DatabaseId[] pendingDBs;

    protected DatabaseId dbId2;

    protected DatabaseImpl db2;

    Cleaner_processPending(Cleaner _this) {
	this._this = _this;
    }

    void execute() throws DatabaseException {
	dbMapTree = _this.env.getDbMapTree();
	pendingLNs = _this.fileSelector.getPendingLNs();
	if (pendingLNs != null) {
	    location = new TreeLocation();
	    for (int i = 0; i < pendingLNs.length; i += 1) {
		info = pendingLNs[i];
		dbId1 = info.getDbId();
		db1 = dbMapTree.getDb(dbId1, _this.lockTimeout);
		key = info.getKey();
		dupKey = info.getDupKey();
		ln = info.getLN();
		this.hook114();
		_this.processPendingLN(ln, db1, key, dupKey, location);
	    }
	}
    }

    protected void hook114() throws DatabaseException {
    }

}
