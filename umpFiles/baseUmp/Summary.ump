namespace com.sleepycat.je.util;

class Summary
{
  isA Comparable;
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.je.utilint.CmdUtil;
  depend com.sleepycat.je.dbi.EnvironmentImpl;
  depend com.sleepycat.je.cleaner.UtilizationProfile;
  depend com.sleepycat.je.cleaner.FileSummary;
  depend com.sleepycat.je.JEVersion;
  depend com.sleepycat.je.EnvironmentConfig;
  depend com.sleepycat.je.Environment;
  depend com.sleepycat.je.DbInternal;
  depend com.sleepycat.je.DatabaseException;
  depend java.util.SortedMap;
  depend java.util.Map;
  depend java.util.Iterator;
  depend java.util.Arrays;
  depend java.io.PrintStream;
  depend java.io.File;
    static final String HEADER = "  File    Size (KB)  % Used\n" + "--------  ---------  ------";

    Long fileNum;

    long totalSize;

    long obsoleteSize;

    Summary() {
    }

    Summary(Long fileNum, FileSummary summary) throws DatabaseException {
	this.fileNum = fileNum;
	totalSize = summary.totalSize;
	obsoleteSize = summary.getObsoleteSize();
    }

    public int compareTo(Object other) {
	Summary o = (Summary) other;
	return utilization() - o.utilization();
    }

    void add(Summary o) {
	totalSize += o.totalSize;
	obsoleteSize += o.obsoleteSize;
    }

    void print(PrintStream out) {
	if (fileNum != null) {
	    pad(out, Long.toHexString(fileNum.longValue()), 8, '0');
	} else {
	    out.print(" TOTALS ");
	}
	int kb = (int) (totalSize / 1024);
	int util = utilization();
	out.print("  ");
	pad(out, Integer.toString(kb), 9, ' ');
	out.print("     ");
	pad(out, Integer.toString(util), 3, ' ');
	out.println();
    }

    int utilization() {
	return UtilizationProfile.utilization(obsoleteSize, totalSize);
    }

    private void pad(PrintStream out, String val, int digits, char padChar) {
	int padSize = digits - val.length();
	for (int i = 0; i < padSize; i += 1) {
	    out.print(padChar);
	}
	out.print(val);
    }

}
