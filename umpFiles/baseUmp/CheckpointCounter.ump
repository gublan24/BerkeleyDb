namespace com.sleepycat.je.log;

class CheckpointCounter
{
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.je.utilint.DbLsn;
  depend com.sleepycat.je.dbi.EnvironmentImpl;
  depend com.sleepycat.je.config.EnvironmentParams;
  depend com.sleepycat.je.DatabaseException;
  depend java.util.TreeMap;
  depend java.util.Map;
  depend java.util.Iterator;
  depend java.util.Comparator;
  depend java.util.ArrayList;
  depend java.text.NumberFormat;
  depend java.nio.ByteBuffer;
  depend java.io.IOException;
    public long startCkptLsn = DbLsn.NULL_LSN;

    public long endCkptLsn = DbLsn.NULL_LSN;

    public int preStartLNTxnCount;

    public int preStartLNCount;

    public int preStartMapLNTxnCount;

    public int preStartMapLNCount;

    public int postStartLNTxnCount;

    public int postStartLNCount;

    public int postStartMapLNTxnCount;

    public int postStartMapLNCount;

    public void increment(FileReader reader, byte currentEntryTypeNum) {
	if (currentEntryTypeNum == LogEntryType.LOG_CKPT_START.getTypeNum()) {
	    startCkptLsn = reader.getLastLsn();
	} else if (currentEntryTypeNum == LogEntryType.LOG_LN_TRANSACTIONAL.getTypeNum()) {
	    if (startCkptLsn == DbLsn.NULL_LSN) {
		preStartLNTxnCount++;
	    } else {
		postStartLNTxnCount++;
	    }
	} else if (currentEntryTypeNum == LogEntryType.LOG_LN.getTypeNum()) {
	    if (startCkptLsn == DbLsn.NULL_LSN) {
		preStartLNCount++;
	    } else {
		postStartLNCount++;
	    }
	} else if (currentEntryTypeNum == LogEntryType.LOG_MAPLN.getTypeNum()) {
	    if (startCkptLsn == DbLsn.NULL_LSN) {
		preStartMapLNCount++;
	    } else {
		postStartMapLNCount++;
	    }
	} else if (currentEntryTypeNum == LogEntryType.LOG_MAPLN_TRANSACTIONAL.getTypeNum()) {
	    if (startCkptLsn == DbLsn.NULL_LSN) {
		preStartMapLNTxnCount++;
	    } else {
		postStartMapLNTxnCount++;
	    }
	}
    }

}
