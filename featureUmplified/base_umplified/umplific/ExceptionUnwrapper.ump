namespace com.sleepycat.util;

class ExceptionUnwrapper
{
  depend de.ovgu.cide.jakutil.*;
    /** 
     * Unwraps an Exception and returns the underlying Exception, or throws an Error if the underlying Throwable is an Error.
     * @param e is the Exception to unwrap.
     * @return the underlying Exception.
     * @throws Error if the underlying Throwable is an Error.
     * @throws IllegalArgumentException if the underlying Throwable is not anException or an Error.
     */
    public static Exception unwrap(Exception e) {
	Throwable t = unwrapAny(e);
	if (t instanceof Exception) {
	    return (Exception) t;
	} else if (t instanceof Error) {
	    throw (Error) t;
	} else {
	    throw new IllegalArgumentException("Not Exception or Error: " + t);
	}
    }

    /** 
     * Unwraps an Exception and returns the underlying Throwable.
     * @param e is the Exception to unwrap.
     * @return the underlying Throwable.
     */
    public static Throwable unwrapAny(Throwable e) {
	while (true) {
	    if (e instanceof ExceptionWrapper) {
		Throwable e2 = ((ExceptionWrapper) e).getCause();
		if (e2 == null) {
		    return e;
		} else {
		    e = e2;
		}
	    } else {
		return e;
	    }
	}
    }

}
