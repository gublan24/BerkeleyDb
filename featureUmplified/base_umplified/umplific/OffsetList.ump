namespace com.sleepycat.je.cleaner;

class OffsetList
{
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.je.utilint.Tracer;
    static final int SEGMENT_CAPACITY = 100;

    private Segment head;

    private Segment tail;

    private int size;

    public OffsetList() {
	head = new Segment();
	tail = head;
    }

    /** 
     * Adds the given value and returns whether a new segment was allocated.
     */
    public boolean add(long value, boolean checkDupOffsets) {
	if (checkDupOffsets) {
	    assert (!contains(value)) : Tracer.getStackTrace(new Exception("Dup Offset " + Long.toHexString(value)));
	}
	Segment oldTail = tail;
	tail = tail.add(value);
	size += 1;
	return tail != oldTail;
    }

    public int size() {
	return size;
    }

    /** 
     * Merges the given list and returns whether a segment was freed.
     */
    boolean merge(OffsetList other) {
	boolean oneSegFreed = true;
	Segment seg = other.head;
	while (true) {
	    Segment next = seg.next();
	    if (next != null) {
		seg.setNext(head);
		head = seg;
		seg = next;
	    } else {
		for (int i = 0; i < seg.size(); i += 1) {
		    if (add(seg.get(i), false)) {
			assert oneSegFreed;
			oneSegFreed = false;
		    }
		}
		break;
	    }
	}
	return oneSegFreed;
    }

    /** 
     * Returns an array of all values as longs.  If a writer thread is appending to the list while this method is excuting, some values may be missing from the returned array, but the operation is safe.
     */
    public long[] toArray() {
	long[] a = new long[size];
	int next = 0;
	segments: for (Segment seg = head; seg != null; seg = seg.next()) {
	    for (int i = 0; i < seg.size(); i += 1) {
		if (next >= a.length) {
		    break segments;
		}
		a[next] = seg.get(i);
		next += 1;
	    }
	}
	return a;
    }

    /** 
     * Returns whether this list contains the given offset.
     */
    boolean contains(long offset) {
	for (Segment seg = head; seg != null; seg = seg.next()) {
	    for (int i = 0; i < seg.size(); i += 1) {
		if (seg.get(i) == offset) {
		    return true;
		}
	    }
	}
	return false;
    }

}
