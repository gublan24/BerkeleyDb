<?xml version="1.0"?>

<!-- ============================================ -->
<!-- Ant Build File for Berkeley DB Java Database -->
<!-- ============================================ -->

<project name="JE" default="jar" basedir=".">
<description>Compile and test JE</description>

    <!-- Modify build.properties to point to the proper j2ee paths for
         JCA and JMX support  -->
    <property file="build.properties"/>

    <property name="srcdir" value="${basedir}/src"/>
    <property name="builddir" value="${basedir}/build"/>
    <property name="destdir" value="${builddir}/classes"/>
    <property name="libdir" value="${builddir}/lib"/>

    <property name="dist.srcdir" value="${basedir}/dist"/>
    <property name="dist.destdir" value="${builddir}/dist"/>

    <property name="unittest.srcdir" value="${basedir}/test"/>
    <property name="unittest.dir" value="${builddir}/test"/>
    <property name="unittest.destdir" value="${unittest.dir}/classes"/>
    <property name="unittest.datadir" value="${unittest.dir}/data"/>
    <property name="unittest.extraenvdir" value="${unittest.destdir}/propTest"/>
    <property name="unittest.reportsdir" value="${unittest.dir}/reports"/>
    <property name="unittest.testserialdir" value="${unittest.dir}/testserial"/>

    <property name="doc.dir" value="${basedir}/docs"/>
    <property name="doc.javadir" value="${doc.dir}/java"/>
    <property name="docsrc.dir" value="${basedir}/docs_src"/>
    <property name="docsrc.m4dir" value="${docsrc.dir}/com.src"/>
    <property name="docsrc.postm4dir" value="${builddir}/docs"/>
    <property name="docsrc.javadir" value="${docsrc.postm4dir}/java"/>

    <property name="jarfile" value="${libdir}/je.jar"/>
    <property name="jcararfile" value="${libdir}/jejca.rar"/>
    <property name="srczipfile" value="${basedir}/src.zip"/>
    <property name="buildzipfile" value="${basedir}/build.zip"/>
    <property name="zipfile" value="${basedir}/je.zip"/>

    <property name="clover.tmpdir" value="${builddir}/tmp"/>
    <property name="clover.initstring"
              location="${clover.tmpdir}/jecoverage.db"/>
    <property name="clover.libdir" value="/clover/lib"/>
    <property name="clover.excludes" value="**/rpcserver/** **/je/examples/** **/je/junit/** **/*Test.java **/*TestBase.java **/compat/** **/je/util/**"/>

    <property name="example.srcdir" value="${basedir}/examples"/>
    <property name="example.destdir" value="${destdir}"/>


    <property name="packages" value="com.sleepycat.*"/>
    <property file="${user.home}/ant.properties"/>
    <property name="build.propertyfile"
              value="${dist.destdir}/build.properties"/>
    <property name="installdestdir" value="/usr/local"/>

    <!--
    For unit testing using different default isolation levels.  May be:
     empty string (repeatableRead)
     readCommitted (degree 2)
     serializable (degree 3)
    -->
    <property name="isolationLevel" value=""/>

    <!-- For long and short version of unit tests. May be:
               empty string (false);
	       true
	       false
    -->
    <property name="longtest" value="false"/>

    <path id="class.path">
      <pathelement location="${destdir}"/>
      <pathelement location="."/>
    </path>

    <path id="unittest.classpath">
      <pathelement location="${destdir}"/>
      <pathelement location="."/>
      <pathelement location="${unittest.destdir}"/>
    </path>

    <path id="clover.classpath">
      <pathelement path="${clover.libdir}/clover.jar"/>
      <pathelement path="${clover.libdir}/velocity.jar"/>
    </path>

    <path id="unittest-j2ee.classpath">
      <pathelement location="${destdir}"/>
      <pathelement location="."/>
      <pathelement location="${unittest.destdir}"/>
      <pathelement location="${examples.destdir}"/>
      <pathelement path="${j2ee.jarfile}"/>
    </path>

    <path id="jca.classpath">
      <pathelement location="${destdir}"/>
      <pathelement location="."/>
      <pathelement path="${j2ee.jarfile}"/>
      <pathelement path="${example.resources}"/>
    </path>

    <path id="j2ee.classpath">
      <pathelement location="${destdir}"/>
      <pathelement location="."/>
      <pathelement path="${j2ee.jarfile}"/>
    </path>

    <target name="buildDbg">
    <description>debug the build file itself</description>
      <property name="classpath.string" refid="class.path"/>
      <property name="unittestclasspath.string" refid="unittest.classpath"/>
      <echoproperties/>
    </target>

    <!-- ============================================================ -->
    <!-- Global Targets                                               -->
    <!-- ============================================================ -->
    <target name="init">
        <mkdir dir="${builddir}"/>
        <mkdir dir="${destdir}"/>
        <mkdir dir="${libdir}"/>
        <mkdir dir="${dist.destdir}"/>
        <mkdir dir="${doc.dir}"/>
        <mkdir dir="${doc.javadir}"/>
        <mkdir dir="${clover.tmpdir}"/>
        <mkdir dir="${unittest.dir}"/>
        <mkdir dir="${unittest.destdir}"/>
        <mkdir dir="${unittest.extraenvdir}"/>
        <mkdir dir="${unittest.testserialdir}"/>
        <tstamp/>
	<antcall target="do-internal">
	   <param name="target" value="init"/>
        </antcall>
    </target>

    <target name="compile"
            depends="compile-src,
	             compile-examples,
		     compile-unittest">
	<antcall target="do-internal">
	   <param name="target" value="compile"/>
        </antcall>
    </target>

    <target name="compile-j2ee"
            depends="check-j2ee-present,
	             compile-jmx,
	             compile-jca"/>
       
    <target name="check-j2ee-present">
        <available classname="javax.resource.ResourceException"
	           property="j2eelib.present">
	  <classpath refid="j2ee.classpath"/>
	</available>

	<fail message="You need to set the 'j2ee.jarfile' property in
	the build.properties file"
	      unless="j2eelib.present"/>

    </target>

    <target name="do-internal">
       <ant antfile="ant/internal.xml" target="${target}" inheritAll="true"/>
    </target>

    <!-- internal targets -->
    <target name="regress" depends="compile">
	<antcall target="do-internal">
	   <param name="target" value="regress"/>
        </antcall>
    </target>
    
    <!-- ============================================================ -->
    <!-- Clean                                                        -->
    <!-- ============================================================ -->
    <target name="clean" depends="clean-src,
                                  clean-unittest,
                                  clean-clover,
				  clean-jar,
                                  clean-package">
	<antcall target="do-internal">
	   <param name="target" value="clean"/>
        </antcall>
    </target>

    <!-- ============================================================ -->
    <!-- Compiles                                                     -->
    <!-- ============================================================ -->
    <target name="clean-src" depends="init">
        <delete>
            <fileset dir="${destdir}"
             includes="**/*.class,**/package.html,**/*.xml"/>
        </delete>
        <delete dir="${dist.destdir}"/>
    </target>

    <target name="compile-src" depends="init">
        <ant antfile="ant/compile.xml" dir="." inheritall="false">
            <reference refid="class.path" torefid="compile.classpath"/>
        </ant>
    </target>

    <target name="compile-examples" depends="compile-src">
        <ant antfile="ant/compile.xml" dir="." inheritall="false">
            <property name="srcdir" value="${example.srcdir}"/>
            <property name="include" value="**/*.java"/>
            <property name="exclude1" value="jmx/**/*.java"/>
            <property name="exclude2" value="jca/**/*.java"/>
            <reference refid="class.path" torefid="compile.classpath"/>
        </ant>
    </target>

    <target name="compile-jmx" depends="check-j2ee-present,compile-src, init">
        <ant antfile="ant/compile.xml" dir="." inheritall="false">
            <reference refid="j2ee.classpath" torefid="compile.classpath"/>
            <property name="include" value="com/sleepycat/je/jmx/**/*.java"/>
            <property name="exclude2" value=""/>
        </ant>
    </target>

    <target name="compile-jmxexamples" depends="compile-jmx">
        <ant antfile="ant/compile.xml" dir="." inheritall="false">
            <reference refid="j2ee.classpath" torefid="compile.classpath"/>
            <property name="srcdir" value="${example.srcdir}"/>
            <property name="include" value="jmx/**/*.java"/>
            <property name="exclude2" value=""/>
        </ant>
    </target>

    <target name="compile-jca" depends="check-j2ee-present,compile-src">
        <ant antfile="ant/compile.xml" dir="." inheritall="false">
            <reference refid="j2ee.classpath" torefid="compile.classpath"/>
            <property name="include" value="com/sleepycat/je/jca/**/*.java"/>
            <property name="exclude1" value=""/>
        </ant>
    </target>

    <target name="compile-jcaexamples" depends="compile-jca">
        <ant antfile="ant/compile.xml" dir="." inheritall="false">
            <reference refid="j2ee.classpath" torefid="compile.classpath"/>
            <property name="srcdir" value="${example.srcdir}"/>
            <property name="include" value="jca/**/*.java"/>
            <property name="exclude1" value=""/>
        </ant>
    </target>

    <!-- for jar packaging -->
    <target name="compile-dist" depends="init">
        <javac srcdir="${dist.srcdir}"
               destdir="${dist.destdir}" 
               source="1.4">
            <classpath refid="class.path"/>
        </javac>
    </target>


    <!-- ============================================================ -->
    <!-- Jars                                                         -->
    <!-- ============================================================ -->
    <target name="clean-jar">
        <delete dir="${libdir}"/>
    </target>

    <!-- JE jar -->
    <target name="jar" depends="compile, clean-package">
        <jar jarfile="${jarfile}">
	<fileset dir="${destdir}"
                 includes="com/sleepycat/bind/**/*.class,
                           com/sleepycat/collections/**/*.class,
                           com/sleepycat/compat/**/*.class,
                           com/sleepycat/je/**/*.class,
                           com/sleepycat/util/**/*.class"/>
        <manifest>
            <attribute name="Main-Class"
                       value="com.sleepycat.je.utilint.JarMain"/>
        </manifest>
        </jar>
    </target>

    <!-- jca jar -->
    <target name="jcajar" depends="compile-jca">
        <jar jarfile="${libdir}/jejca.jar">
	<fileset dir="${destdir}"
	         includes="com/sleepycat/je/jca/ra/**"/>
       </jar>
    </target>

    <target name="clean-jca" depends="init">
         <delete>
              <fileset dir="${destdir}"
               includes="**/jca/**/*.class,package"/>
         </delete>
         <delete dir="${dist.destdir}/**/jca"/>
    </target>

    <target name="jca" depends="jcajar,jar">
       <jar destfile="${jcararfile}">
	  <metainf dir="${srcdir}/com/sleepycat/je/jca/ra" includes="ra.xml"/>
	  <fileset dir="${libdir}" includes="jejca.jar"/>
	  <fileset dir="${libdir}" includes="je.jar"/>
       </jar>
    </target>

    <!-- JCA examples jar -->
    <target name="jca-examples" depends="compile-jcaexamples,jca">

	<jar jarfile="${libdir}/jejca-example.jar">
	   <metainf dir="${example.srcdir}/jca/simple"
	            includes="ejb-jar.xml"/>
	   <metainf dir="${example.jca.srcdir}"
	             includes="${example.jca.descriptorname}"/>
	   <fileset dir="${destdir}"
	      includes="jca/simple/*"
	      excludes="jca/simple/ExClient.class"
	   />
	</jar>
    </target>

    <!-- jmx jar -->
    <target name="jmx" depends="compile-jmx,jar">
        <jar jarfile="${libdir}/jejmx.jar">
	<fileset dir="${destdir}"
	         includes="com/sleepycat/je/jmx/**"/>
        </jar>
    </target>

    <!-- jmx examples jar -->
    <target name="jmx-examples" depends="compile-jmxexamples,jmx">
        <jar jarfile="${libdir}/jejmx-example.jar">
	<fileset dir="${destdir}" includes="jmx/**"/>
        </jar>
    </target>

    <!-- ============================================================ -->
    <!-- Package .jar and other files into a .zip                     -->
    <!-- ============================================================ -->
    <target name="clean-package">
        <delete file="${zipfile}"/>
        <delete file="${buildzipfile}"/>
        <delete file="${srczipfile}"/>
        <mkdir dir="${libdir}"/>
    </target>

    <target name="package" depends="jar,javadoc">
        <description>
            The package target builds the distribution package.
        </description>

	<!-- Make an example je.properties file -->
        <java fork="yes" dir="${builddir}"
            classname="com.sleepycat.je.config.EnvironmentParams">
          <arg line="${basedir}/example.properties"/>
          <classpath refid="class.path"/>
        </java>

	<!-- copy the README in, adding the current release number and date-->
        <copy overwrite="true" file="${dist.srcdir}/README" todir="${basedir}">
	   <filterset>
	       <filter token="RELEASE_VERSION" value="${release.version}"/>
	       <filter token="DATE" value="${release.date}"/>
	   </filterset>	
        </copy>	   

        <zip basedir="${builddir}"
             destfile="build.zip"
             includes="bin/**,lib/**,dist/build.properties"/>
        <zip basedir="${basedir}"
             destfile="src.zip"
	     excludes="test/rpcserver/**,test/experiments/**,test/regress/*/**,test/**/MiniStress.java,test/**/AbortStress.java,dist/,**/jca/README.txt,examples/com/**"
             includes="src/**,examples/**,test/**,docs/**,ant/**,regress/,build.xml,build.properties,example.properties,README,LICENSE,FindBugsExclude.xml"/>
        <zip basedir="${basedir}"
             destfile="${zipfile}"
             excludes="**/">
             <zipfileset src="build.zip"
                         prefix="je/"/>
             <zipfileset src="src.zip"
                         prefix="je/"/>
        </zip>
    </target>


    <!-- ============================================================ -->
    <!-- Testing                                                      -->
    <!-- ============================================================ -->

    <!-- ============================================================ -->
    <!-- JUnit unit tests                                             -->
    <!-- ============================================================ -->

    <target name="init-unittest" depends="init">
        <delete dir="${unittest.datadir}"/>
        <delete dir="${unittest.reportsdir}"/>
        <mkdir dir="${unittest.datadir}"/>
        <mkdir dir="${unittest.reportsdir}"/>
    </target>

    <target name="clean-unittest" depends="init-unittest">
        <delete dir="${unittest.destdir}"/>
        <mkdir dir="${unittest.destdir}"/>
        <delete dir="${unittest.testserialdir}"/>
        <mkdir dir="${unittest.testserialdir}"/>
    </target>

    <target name="compile-unittest" depends="compile-src">
        <ant antfile="ant/compile.xml" dir="." inheritall="false">
            <property name="srcdir" value="${unittest.srcdir}"/>
            <property name="destdir" value="${unittest.destdir}"/>
            <reference refid="unittest.classpath" torefid="compile.classpath"/>
        </ant>

      <copy todir="${unittest.destdir}">
        <fileset dir="${unittest.srcdir}" excludes="**/*.java,experiments/**"/>
      </copy>

      <!-- for testing je.properties -->
      <copy file="${unittest.destdir}/com/sleepycat/je/je.properties"
            todir="${unittest.extraenvdir}"/>

      <!-- Compile original version of TestSerial class separately. -->
      <property name="testserialpath"
                value="com/sleepycat/collections/test/serial/TestSerial"/>
      <copy file="${unittest.srcdir}/${testserialpath}.java.original"
            tofile="${unittest.testserialdir}/${testserialpath}.java"/>
      <ant antfile="ant/compile.xml" dir="." inheritall="false">
          <property name="srcdir" value="${unittest.testserialdir}"/>
          <property name="destdir" value="${unittest.testserialdir}"/>
          <reference refid="class.path" torefid="compile.classpath"/>
      </ant>
    </target>

    <target name="compile-unittest-j2ee"
            depends="compile, compile-j2ee, compile-jmxexamples">
        <ant antfile="ant/compile.xml" dir="." inheritall="false">
            <property name="srcdir" value="${unittest.srcdir}"/>
            <property name="destdir" value="${unittest.destdir}"/>
            <property name="include" value="com/sleepycat/je/jmx/**/*.java"/>
            <property name="exclude2" value=""/>
            <reference refid="unittest-j2ee.classpath"
	               torefid="compile.classpath"/>
        </ant>
    </target>


    <!-- Do one of the following:

         ant test -Dtestcase=com.sleepycat.je.db.DbTest   (run one test)
         ant unittest -Dsuite=db       (run one package - give unittest target)
         ant test                      (run all tests)
     -->

    <target name="test-j2ee"
            depends="compile-unittest-j2ee,alltests,unittest"/>

    <target name="test"
            depends="compile,alltests,unittest"/>

    <target name="alltests">
      <property name="alltests" value="true"/>
    </target>

    <target name="unittest" depends="compile-unittest, init-unittest">
      <!-- Performs initialization needed before StoredClassCatalogTest is run
           in the <batchtest> below. -->
      <junit printsummary="false"
             errorProperty="unittest.failed"
             failureProperty="unittest.failed"
	     haltOnFailure="false"
             fork="yes">
        <jvmarg value="-ea"/>
	<!--
        <jvmarg value="-d64"/>
        <jvmarg value="-Xmx256M"/>
	-->
        <classpath path="${unittest.testserialdir}"/> <!-- Must be first -->
        <classpath refid="unittest-j2ee.classpath"/>
        <classpath refid="clover.classpath"/>
        <sysproperty key="testdestdir" value="${unittest.destdir}"/>
        <formatter type="plain" usefile="false"/>
        <formatter type="xml"/>
        <test
        name="com.sleepycat.collections.test.serial.StoredClassCatalogTestInit"
              todir="${unittest.datadir}" if="alltests" unless="testcase"/>
      </junit>

      <junit printsummary="false"
             errorProperty="unittest.failed"
             failureProperty="unittest.failed"
	     haltOnFailure="false"
             fork="yes">
        <jvmarg value="-ea"/>
	<!--
        <jvmarg value="-d64"/>
	-->
        <jvmarg value="-Xmx256M"/>
        <classpath refid="unittest-j2ee.classpath"/>
        <classpath refid="clover.classpath"/>
        <sysproperty key="testdestdir" value="${unittest.destdir}"/>
        <sysproperty key="txnnosync" value="true"/>
        <sysproperty key="isolationLevel" value="${isolationLevel}"/>
        <sysproperty key="longtest" value="${longtest}"/>
        <formatter type="plain" usefile="false"/>
        <formatter type="xml"/>
        <test name="${testcase}" todir="${unittest.datadir}" if="testcase"/>
        <batchtest todir="${unittest.datadir}"
                   if="alltests" unless="testcase">
          <fileset dir="${unittest.destdir}" includes="**/*Test.class"/>
        </batchtest>
        <batchtest todir="${unittest.datadir}" if="suite">
          <fileset dir="${unittest.destdir}"
                   includes="**/${suite}/*Test.class"/>
        </batchtest>
      </junit>

      <junitreport todir="${unittest.datadir}">
        <fileset dir="${unittest.datadir}">
          <include name="TEST-*.xml"/>
        </fileset>
        <report format="frames"
          todir="${unittest.reportsdir}"/>
      </junitreport>

      <fail message="UnitTests failed. Check log and/or reports."
            if="unittest.failed"/>
    </target>

    <!-- Runs XxxTestMain test programs and other misc non-JUnit test. -->
    <target name="misctest" depends="compile-unittest, init-unittest">

      <antcall target="do-testmain">
        <param name="cls" value="je.test.SecondarySplitTestMain"/>
      </antcall>

      <!-- Special case JUnit test that only failed when run separately. -->
      <junit printsummary="false"
             showoutput="on"
	     haltOnFailure="true"
             fork="yes">
        <jvmarg value="-ea"/>
        <jvmarg value="-Xmx256M"/>
        <classpath refid="unittest-j2ee.classpath"/>
        <classpath refid="clover.classpath"/>
        <sysproperty key="testdestdir" value="${unittest.destdir}"/>
        <test name="com.sleepycat.je.dbi.SR12641"/>
      </junit>

    </target>

    <target name="do-testmain">
      <echo message="Running: ${cls}"/>
      <java fork="yes" classname="com.sleepycat.${cls}" failonerror="true">
        <jvmarg value="-Xmx256M"/>
        <sysproperty key="testdestdir" value="${unittest.destdir}"/>
        <classpath refid="unittest-j2ee.classpath"/>
        <classpath refid="clover.classpath"/>
      </java>
    </target>

    <!-- logversiondata is run at the end of each major release.  After running
         add the je-x.y.z.* files that were generated to CVS.  Be sure to use
         -kb to add the .jdb file.  Then add a test_x_y_z() method to
         com/sleepycat/je/logversion/LogEntryVersionTest.java.
    -->
    <target name="logversiondata" depends="compile-unittest">
      <java fork="no"
           classname="com.sleepycat.je.logversion.MakeLogEntryVersionData">
        <arg line="${unittest.destdir}"/>
        <classpath refid="unittest.classpath"/>
      </java>
      <copy todir="test/com/sleepycat/je/logversion">
        <fileset dir="${unittest.destdir}">
          <include name="je-*.jdb"/>
          <include name="je-*.txt"/>
        </fileset>
      </copy>
    </target>

    <!-- ============================================================ -->
    <!-- Test CLI utils -->
    <!-- ============================================================ -->

    <target name="testcli"
        depends="testcli-dbdump"/>

    <target name="testcli-dbdump" depends="compile-src,compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}" classname="je.SimpleExample">
        <arg line="tmp insert 5"/>
        <classpath refid="class.path"/>
      </java>
      <java fork="yes" dir="${builddir}"
            classname="com.sleepycat.je.util.DbDump">
        <arg line="-f ./dump.out -h tmp -s simpleDb"/>
        <classpath refid="class.path"/>
      </java>
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}"
            classname="com.sleepycat.je.util.DbLoad">
        <arg line="-f ./dump.out -h tmp -s simpleDb"/>
        <classpath refid="class.path"/>
      </java>
      <java fork="yes" dir="${builddir}"
            classname="com.sleepycat.je.util.DbDump">
        <arg line="-h tmp -r"/>
        <classpath refid="class.path"/>
      </java>
    </target>

    <!-- ============================================================ -->
    <!-- Internal Use Only: Test examples -->
    <!-- ============================================================ -->

    <!-- testex runs all examples, but does not include testex-access because
         it is interactive.  Does not test JCA examples.
    -->
    <target name="testex"
        depends="testex-simple, testex-binding, testex-secondary,
        testex-sequence, testex-tomany, testex-hello,
        testex-ship-basic, testex-ship-index, testex-ship-entity,
        testex-ship-tuple, testex-ship-sentity, testex-ship-marshal,
        testex-ship-factory"/>

    <target name="testex-simple" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}" classname="je.SimpleExample">
        <arg line="tmp insert 5"/>
        <classpath refid="class.path"/>
      </java>
      <java fork="yes" dir="${builddir}" classname="je.SimpleExample">
        <arg line="tmp retrieve 5"/>
        <classpath refid="class.path"/>
      </java>
    </target>

    <target name="testex-binding" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}" classname="je.BindingExample">
        <arg line="tmp insert 5"/>
        <classpath refid="class.path"/>
      </java>
      <java fork="yes" dir="${builddir}" classname="je.BindingExample">
        <arg line="tmp retrieve 5"/>
        <classpath refid="class.path"/>
      </java>
    </target>

    <target name="testex-secondary" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}" classname="je.SecondaryExample">
        <arg line="tmp insert 5"/>
        <classpath refid="class.path"/>
      </java>
      <java fork="yes" dir="${builddir}" classname="je.SecondaryExample">
        <arg line="tmp retrieve 5"/>
        <classpath refid="class.path"/>
      </java>
    </target>

    <target name="testex-sequence" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}" classname="je.SequenceExample">
        <arg line="tmp"/>
        <classpath refid="class.path"/>
      </java>
      <java fork="yes" dir="${builddir}" classname="je.SequenceExample">
        <arg line="tmp"/>
        <classpath refid="class.path"/>
      </java>
    </target>

    <target name="testex-tomany" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}"
       classname="je.ToManyExample">
        <arg line="-h tmp"/>
        <classpath refid="class.path"/>
      </java>
    </target>

    <!-- Using fork="yes" does not work for AccessExample, apparently because
         it is interactive and the input stream of the forked process isn't
         functional; therefore this sample writes to the base directory.
    -->
    <target name="testex-access" depends="compile-examples">
      <java classname="collections.access.AccessExample">
        <classpath refid="class.path"/>
      </java>
    </target>

    <target name="testex-hello" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}"
       classname="collections.hello.HelloDatabaseWorld">
        <classpath refid="class.path"/>
      </java>
    </target>

    <target name="testex-ship-basic" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}"
       classname="collections.ship.basic.Sample">
        <classpath refid="class.path"/>
      </java>
    </target>

    <target name="testex-ship-index" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}"
       classname="collections.ship.index.Sample">
        <classpath refid="class.path"/>
      </java>
    </target>

    <target name="testex-ship-entity" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}"
       classname="collections.ship.entity.Sample">
        <classpath refid="class.path"/>
      </java>
    </target>

    <target name="testex-ship-tuple" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}"
       classname="collections.ship.tuple.Sample">
        <classpath refid="class.path"/>
      </java>
    </target>

    <target name="testex-ship-sentity" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}"
       classname="collections.ship.sentity.Sample">
        <classpath refid="class.path"/>
      </java>
    </target>

    <target name="testex-ship-marshal" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}"
       classname="collections.ship.marshal.Sample">
        <classpath refid="class.path"/>
      </java>
    </target>

    <target name="testex-ship-factory" depends="compile-examples">
      <delete dir="${builddir}/tmp"/>
      <mkdir dir="${builddir}/tmp"/>
      <java fork="yes" dir="${builddir}"
       classname="collections.ship.factory.Sample">
        <classpath refid="class.path"/>
      </java>
    </target>
        
    <!-- testex-jejca runs all JCA examples.
    -->
    <target name="testex-jejca"
        depends="testex-jejcasimple"/>

    <target name="testex-jejcasimple" depends="compile-jcaexamples">
      <java fork="yes" dir="${builddir}"
            classname="jca.simple.SimpleClient">
        <classpath refid="jca.classpath"/>
	<arg value="${key}"/>
	<arg value="${data}"/>
      </java>
    </target>

    <!-- ============================================================ -->
    <!-- Internal Use Only: Javadocs for Entire Source Tree           -->
    <!-- ============================================================ -->
    <target name="javadoc-all" depends="init">
        <mkdir dir="${doc.dir}"/>
        <javadoc packagenames="${packages}"
                maxmemory="128M"
                sourcepath="${srcdir}"
                destdir="${doc.dir}"
                classpathref="class.path"
                version="true"
                nodeprecated="false"
		windowtitle="${name} Classes"
                doctitle="${name}"
                package="true"
                source="1.4"
                bottom="Copyright 2004-2006 Sleepycat, Inc.  All Rights Reserved.">

          <link href="http://java.sun.com/j2se/1.4.2/docs/api"/>
        </javadoc>
    </target>

    <!-- ============================================================ -->
    <!-- Javadocs for the public api for distribution                 -->
    <!-- This is a complex process that incorporates M4 processing of -->
    <!-- documentation template files.                                -->
    <!-- ============================================================ -->

    <!-- Make sure we update the version in the build properties file -->
    <path id="dist.classpath">
        <path refid="class.path"/>
	<pathelement location="${dist.destdir}"/>
    </path>

    <target name="update-version" depends="compile-src, compile-dist">
       <!-- Create an up to date property file for the build -->
       <java classname="CreateRELEASEFile"
	     classpathref="dist.classpath">
	     <arg value="${build.propertyfile}"/>
       </java>

       <!-- read it in -->
       <property file="${build.propertyfile}"/>
    </target>

    <!-- Now run javadoc -->
    <target name="javadoc" depends="init, update-version, clean-javadoc">

        <!-- create fresh directories --> 
        <mkdir dir="${doc.dir}"/>
        <mkdir dir="${doc.javadir}"/>

        <!-- set the time -->
        <tstamp>
	   <format property="release.date" pattern="MMMMMMMM dd, yyyy"/>
	</tstamp>

	<!-- Run m4. -->
	<!-- Warning: This must be run in cygwin (sh) so that find works. -->
	<echo>Run M4 script</echo>
        <mkdir dir="${docsrc.postm4dir}"/>
	<exec executable="sh" failonerror="true">
	    <arg line="${docsrc.dir}/build je"/>
	</exec>

        <!-- Copy the non-je package sources in. -->
        <copy todir="${docsrc.postm4dir}">
	    <fileset dir="${srcdir}">
                <exclude name="com/sleepycat/je/**"/>
                <exclude name="com/sleepycat/bind/RecordNumberBinding.java"/>
                <exclude name="com/sleepycat/collections/StoredList.java"/>
            </fileset>
	</copy>
        <!-- Copy the jmx package sources in. -->
        <copy todir="${docsrc.postm4dir}">
	    <fileset dir="${srcdir}">
	        <include name="com/sleepycat/je/jmx/**"/>
            </fileset>
	</copy>

	<!-- Copy the main page, images and release notes, to the
             docs directory, putting in the release version where
	     appropriate -->
        <copy overwrite="true" todir="${doc.dir}">
	   <filterset>
	       <filter token="RELEASE_VERSION" value="${release.version}"/>
	       <filter token="RELEASE_NUMERIC_VERSION"
	               value="${release.numeric.version}"/>
	       <filter token="DATE" value="${release.date}"/>
	   </filterset>
	   <fileset dir="${docsrc.dir}">
               <include name="*.html"/>
               <include name="*.css"/>
           </fileset>
        </copy>
        <copy todir="${doc.dir}/images">
	    <fileset dir="${docsrc.dir}/images"/>
	</copy>
        <copy todir="${doc.dir}/sleepycat">
	    <fileset dir="${docsrc.dir}/sleepycat"/>
	</copy>

	<!-- Copy everything for the Getting Started Guide and the
             Writing Transactional Applications Guide to the docs 
             directory -->
        <copy todir="${doc.dir}/GettingStartedGuide">
	    <fileset dir="${docsrc.dir}/GettingStartedGuide">
	    </fileset>
	</copy>

        <copy todir="${doc.dir}/TransactionGettingStarted">
	    <fileset dir="${docsrc.dir}/TransactionGettingStarted">
	    </fileset>
	</copy>

	<!-- Copy everything for the collections tutorial to the docs 
             directory -->
        <copy todir="${doc.dir}/collections">
	    <fileset dir="${docsrc.dir}/collections">
	    </fileset>
	</copy>

        <!-- Run javadoc on the m4'ed source -->
	<echo>Javadoc M4'ed sources</echo>
	<copy file="${srcdir}/com/sleepycat/je/package.html"
	      todir="${docsrc.postm4dir}/com/sleepycat/je"/>
	<copy file="${srcdir}/com/sleepycat/je/util/package.html"
	      todir="${docsrc.postm4dir}/com/sleepycat/je/util/"/>
        <javadoc maxmemory="128M"
                sourcepath="${docsrc.postm4dir}"
                destdir="${docsrc.javadir}"
                version="true"
                nodeprecated="false"
		protected="true"
                source="1.4"
		use="true"
		stylesheetfile="${docsrc.dir}/style.css"
		windowtitle="Sleepycat Software, Inc. - Berkeley DB Java Edition API">
	  <classpath refid="j2ee.classpath"/>
          <group title="BerkeleyDB Java Edition Packages">
              <package name="com.sleepycat.je*"/>
              <package name="com.sleepycat.je.util"/>
              <package name="com.sleepycat.je.jmx"/>
	  </group>
          <group title="BerkeleyDB Bind and Collections Packages">
              <package name="com.sleepycat.bind*"/>
              <package name="com.sleepycat.collections*"/>
              <package name="com.sleepycat.util*"/>
	  </group>
	  <header><![CDATA[<b>Berkeley DB Java Edition</b><br><font size=\"-1\"> version ${release.version}</font>]]>
	  </header>
	  <bottom><![CDATA[<font size=1><a href="{@docRoot}../sleepycat/legal.html">Copyright (c) 1996-2006</a> <a href="http://www.sleepycat.com">Sleepycat Software, Inc.</a> - All rights reserved.</font>]]> </bottom> 
          <package name="com.sleepycat.je"/>
          <package name="com.sleepycat.je.jmx"/>
          <package name="com.sleepycat.je.util"/>
          <package name="com.sleepycat.collections"/>
          <package name="com.sleepycat.bind.*"/>
          <package name="com.sleepycat.util"/>
          <link href="http://java.sun.com/j2se/1.4.2/docs/api"/>
          <link href="http://java.sun.com/j2ee/1.4/docs/api"/>
        </javadoc>

        <copy todir="${doc.javadir}">
	    <fileset dir="${docsrc.javadir}"/>
	</copy>
    </target>

    <target name="clean-javadoc" depends="init">
        <delete dir="${doc.dir}"/>
        <delete dir="${docsrc.postm4dir}"/>
    </target>

    <target name="install">
    <description>Install JE into destdir</description>
      <condition property="isWindows">
         <os family="windows"/>
      </condition>
      <property file="dist/build.properties"/>
      <echo message="Installing JE into ${installdestdir}"/>
      <fail message="Install manually on Windows" if="isWindows"/>
      <property name="installdir"
             value="${installdestdir}/JE.${release.major}.${release.minor}"/>
      <mkdir dir="${installdir}"/>
      <mkdir dir="${installdir}/docs"/>
      <mkdir dir="${installdir}/bin"/>
      <mkdir dir="${installdir}/lib"/>
      <copy todir="${installdir}/docs">
         <fileset dir="docs">
	   <include name="**/*"/>
	 </fileset>
      </copy>
      <copy todir="${installdir}/lib">
	 <fileset dir="lib"/>
      </copy>
      <copy todir="${installdir}/bin">
	 <fileset dir="bin"/>
      </copy>
    </target>

    <!-- ============================================================ -->
    <!-- Clover, code coverage. To run with clover                    -->
    <!--        set the clover.libdir property above.                 -->
    <!--        change inheritall=true above for ant/compile.xml and  -->
    <!--           and inheritall=false in ant/internal.xml to        -->
    <!--               inheritall=true                                -->
    <!--        ant clean compile                                     -->
    <!--        ant clean-src                                         -->
    <!--        ant with.clover compile-src                           -->
    <!--        ant with.clover test                                  -->
    <!--        ant clover.html            (generates reports)        -->
    <!-- ============================================================ -->
    <target name="init-clover">
       <delete dir="${clover.tmpdir}"/>
       <mkdir dir="${clover.tmpdir}"/>
    </target>

    <target name="clean-clover" depends="init-clover">
        <delete dir="${clover.tmpdir}"/>
        <mkdir dir="${clover.tmpdir}"/>
    </target>

    <target name="with.clover">
        <taskdef resource="clovertasks"/>

        <clover-setup initString="${clover.tmpdir}/jecoverage.db"/>
    </target>

    <target name="clover.swing" depends="with.clover">
       <taskdef resource="clovertasks"/>

       <clover-view/>
    </target>

    <target name="clover.log" depends="with.clover">
       <taskdef resource="clovertasks"/>

       <clover-log/>
    </target>

    <target name="clover.pdf" depends="with.clover">
      <taskdef resource="clovertasks"/>

      <clover-report>
         <current outfile="jecoverage.pdf">
             <format type="pdf"/>
         </current>
      </clover-report>
    </target>

    <target name="clover.html" depends="with.clover">
      <taskdef resource="clovertasks"/>

      <clover-report>
         <current outfile="clover_html">
             <format type="html"/>
         </current>
      </clover-report>
    </target>

</project>
