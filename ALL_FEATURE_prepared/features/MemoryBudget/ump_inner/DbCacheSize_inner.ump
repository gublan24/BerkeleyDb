// Original file:/home/abdulaziz/Desktop/BerkeleyDb/ALL_FEATURE/features/MemoryBudget/com/sleepycat/je/util/DbCacheSize.java
namespace com.sleepycat.je.util;
class DbCacheSize {
  @MethodObject static class DbCacheSize_insertRecords {
      DbCacheSize_insertRecords(    PrintStream out,    Environment env,    Database db,    long records,    int keySize,    int dataSize,    boolean randomKeys){
        this.out=out;
        this.env=env;
        this.db=db;
        this.records=records;
        this.keySize=keySize;
        this.dataSize=dataSize;
        this.randomKeys=randomKeys;
      }
      void execute() throws DatabaseException {
        try {
          key=new DatabaseEntry();
          data=new DatabaseEntry(new byte[dataSize]);
          bigInt=BigInteger.ZERO;
          rnd=new Random(123);
          for (int i=0; i < records; i+=1) {
            if (randomKeys) {
              a=new byte[keySize];
              rnd.nextBytes(a);
              key.setData(a);
            }
   else {
              bigInt=bigInt.add(BigInteger.ONE);
              a2=bigInt.toByteArray();
              if (a2.length < keySize) {
                a3=new byte[keySize];
                System.arraycopy(a2,0,a3,a3.length - a2.length,a2.length);
                a2=a3;
              }
   else             if (a2.length > keySize) {
                out.println("*** Key doesn't fit value=" + bigInt + " byte length="+ a2.length);
                return;
              }
              key.setData(a2);
            }
            status=db.putNoOverwrite(null,key,data);
            if (status == OperationStatus.KEYEXIST && randomKeys) {
              i-=1;
              out.println("Random key already exists -- retrying");
              continue;
            }
            if (status != OperationStatus.SUCCESS) {
              out.println("*** " + status);
              return;
            }
            if (i % 10000 == 0) {
              this.hook833();
              out.print(".");
              out.flush();
            }
          }
        }
   catch (      ReturnVoid r) {
          return;
        }
      }
      protected PrintStream out;
      protected Environment env;
      protected Database db;
      protected long records;
      protected int keySize;
      protected int dataSize;
      protected boolean randomKeys;
      protected DatabaseEntry key;
      protected DatabaseEntry data;
      protected BigInteger bigInt;
      protected Random rnd;
      protected byte[] a;
      protected byte[] a2;
      protected byte[] a3;
      protected OperationStatus status;
      protected EnvironmentStats stats;
      protected void hook833() throws DatabaseException {
      }
    }
}
