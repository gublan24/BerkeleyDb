/* Generated By:JavaCC: Do not edit this line. EcmaScriptParser.java */
package tmp.generated_ecmascript;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

public class EcmaScriptParser implements EcmaScriptParserConstants {

  final public Program Program() throws ParseException {
        SourceElements sourceElements = null;
        Token t;
        ASTStringNode eof;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
    case CONTINUE:
    case DELETE:
    case FOR:
    case FUNCTION:
    case IF:
    case NEW:
    case RETURN:
    case THIS:
    case TYPEOF:
    case VAR:
    case VOID:
    case WHILE:
    case WITH:
    case DO:
    case IMPORT:
    case SWITCH:
    case THROW:
    case TRY:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case SEMICOLON:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      sourceElements = SourceElements();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    t = jj_consume_token(0);
                                                  eof=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Program(sourceElements, eof, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
        ObjectLiteral objectLiteral;
        Expression expression;
        Identifier identifier;
        ArrayLiteral arrayLiteral;
        Literal literal;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
         {if (true) return new PrimaryExpression1(firstToken.next,token);}
      break;
    case LBRACE:
      objectLiteral = ObjectLiteral();
         {if (true) return new PrimaryExpression2(objectLiteral, firstToken.next,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      expression = Expression();
      jj_consume_token(RPAREN);
         {if (true) return new PrimaryExpression3(expression, firstToken.next,token);}
      break;
    case IDENTIFIER_NAME:
      identifier = Identifier();
         {if (true) return new PrimaryExpression4(identifier, firstToken.next,token);}
      break;
    case LBRACKET:
      arrayLiteral = ArrayLiteral();
         {if (true) return new PrimaryExpression5(arrayLiteral, firstToken.next,token);}
      break;
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case REGULAR_EXPRESSION_LITERAL:
      literal = Literal();
         {if (true) return new PrimaryExpression6(literal, firstToken.next,token);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
        Token t;
        ASTStringNode decimal_literal;
        ASTStringNode hex_integer_literal;
        ASTStringNode string_literal;
        ASTStringNode boolean_literal;
        ASTStringNode null_literal;
        ASTStringNode regular_expression_literal;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
      t = jj_consume_token(DECIMAL_LITERAL);
                            decimal_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Literal1(decimal_literal, firstToken.next,token);}
      break;
    case HEX_INTEGER_LITERAL:
      t = jj_consume_token(HEX_INTEGER_LITERAL);
                                hex_integer_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Literal2(hex_integer_literal, firstToken.next,token);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Literal3(string_literal, firstToken.next,token);}
      break;
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
                            boolean_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Literal4(boolean_literal, firstToken.next,token);}
      break;
    case NULL_LITERAL:
      t = jj_consume_token(NULL_LITERAL);
                         null_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Literal5(null_literal, firstToken.next,token);}
      break;
    case REGULAR_EXPRESSION_LITERAL:
      t = jj_consume_token(REGULAR_EXPRESSION_LITERAL);
                                       regular_expression_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Literal6(regular_expression_literal, firstToken.next,token);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Identifier Identifier() throws ParseException {
        Token t;
        ASTStringNode identifier_name;
        Token firstToken=token;
    t = jj_consume_token(IDENTIFIER_NAME);
                            identifier_name=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Identifier(identifier_name, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayLiteral ArrayLiteral() throws ParseException {
        Elision elision = null;
        ElementList elementList;
        Elision elision1;
        ElementList elementList1 = null;
        Token firstToken=token;
    if (jj_2_1(2)) {
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        elision = Elision();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
         {if (true) return new ArrayLiteral1(elision, firstToken.next,token);}
    } else if (jj_2_2(2147483647)) {
      jj_consume_token(LBRACKET);
      elementList = ElementList();
      elision1 = Elision();
      jj_consume_token(RBRACKET);
         {if (true) return new ArrayLiteral2(elementList, elision1, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case FUNCTION:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case COMMA:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          elementList1 = ElementList();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
         {if (true) return new ArrayLiteral3(elementList1, firstToken.next,token);}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ElementList ElementList() throws ParseException {
        Elision elision = null;
        AssignmentExpression assignmentExpression;
        ElementListEnd elementListEnd;
        ArrayList<ElementListEnd> elementListEndList = new ArrayList<ElementListEnd>();
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      elision = Elision();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    assignmentExpression = AssignmentExpression();
    label_1:
    while (true) {
      if (jj_2_3(2147483647)) {
        ;
      } else {
        break label_1;
      }
      elementListEnd = ElementListEnd();
                                                                                                                                                        elementListEndList.add(elementListEnd);
    }
         {if (true) return new ElementList(elision, assignmentExpression, elementListEndList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ElementListEnd ElementListEnd() throws ParseException {
        Elision elision;
        AssignmentExpression assignmentExpression;
        Token firstToken=token;
    elision = Elision();
    assignmentExpression = AssignmentExpression();
         {if (true) return new ElementListEnd(elision, assignmentExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Elision Elision() throws ParseException {
        ASTTextNode text283;
        ArrayList<ASTTextNode> text283List = new ArrayList<ASTTextNode>();
        Token firstToken=token;
    label_2:
    while (true) {
      jj_consume_token(COMMA);
              text283=new ASTTextNode(",",new WToken(token));
                                                               text283List.add(text283);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
    }
         {if (true) return new Elision(text283List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ObjectLiteral ObjectLiteral() throws ParseException {
        PropertyNameAndValueList propertyNameAndValueList = null;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
      propertyNameAndValueList = PropertyNameAndValueList();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
         {if (true) return new ObjectLiteral(propertyNameAndValueList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PropertyNameAndValueList PropertyNameAndValueList() throws ParseException {
        PropertyNameAndValue propertyNameAndValue;
        PropertyNameAndValueListEnd propertyNameAndValueListEnd;
        ArrayList<PropertyNameAndValueListEnd> propertyNameAndValueListEndList = new ArrayList<PropertyNameAndValueListEnd>();
        Token firstToken=token;
    propertyNameAndValue = PropertyNameAndValue();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      propertyNameAndValueListEnd = PropertyNameAndValueListEnd();
                                                                                                               propertyNameAndValueListEndList.add(propertyNameAndValueListEnd);
    }
         {if (true) return new PropertyNameAndValueList(propertyNameAndValue, propertyNameAndValueListEndList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PropertyNameAndValueListEnd PropertyNameAndValueListEnd() throws ParseException {
        PropertyNameAndValue propertyNameAndValue;
        Token firstToken=token;
    if (jj_2_4(2)) {
      jj_consume_token(COMMA);
      propertyNameAndValue = PropertyNameAndValue();
         {if (true) return new PropertyNameAndValueListEnd1(propertyNameAndValue, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
         {if (true) return new PropertyNameAndValueListEnd2(firstToken.next,token);}
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public PropertyNameAndValue PropertyNameAndValue() throws ParseException {
        PropertyName propertyName;
        AssignmentExpression assignmentExpression;
        Token firstToken=token;
    propertyName = PropertyName();
    jj_consume_token(COLON);
    assignmentExpression = AssignmentExpression();
         {if (true) return new PropertyNameAndValue(propertyName, assignmentExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PropertyName PropertyName() throws ParseException {
        Identifier identifier;
        Token t;
        ASTStringNode string_literal;
        ASTStringNode decimal_literal;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER_NAME:
      identifier = Identifier();
         {if (true) return new PropertyName1(identifier, firstToken.next,token);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new PropertyName2(string_literal, firstToken.next,token);}
      break;
    case DECIMAL_LITERAL:
      t = jj_consume_token(DECIMAL_LITERAL);
                            decimal_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new PropertyName3(decimal_literal, firstToken.next,token);}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MemberExpression MemberExpression() throws ParseException {
        MemberExpressionPre memberExpressionPre;
        MemberExpressionPart memberExpressionPart;
        ArrayList<MemberExpressionPart> memberExpressionPartList = new ArrayList<MemberExpressionPart>();
        AllocationExpression allocationExpression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
    case THIS:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      memberExpressionPre = MemberExpressionPre();
      label_4:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_4;
        }
        memberExpressionPart = MemberExpressionPart();
                                                                                                            memberExpressionPartList.add(memberExpressionPart);
      }
         {if (true) return new MemberExpression1(memberExpressionPre, memberExpressionPartList, firstToken.next,token);}
      break;
    case NEW:
      allocationExpression = AllocationExpression();
         {if (true) return new MemberExpression2(allocationExpression, firstToken.next,token);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MemberExpressionPre MemberExpressionPre() throws ParseException {
        FunctionExpression functionExpression;
        PrimaryExpression primaryExpression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      functionExpression = FunctionExpression();
         {if (true) return new MemberExpressionPre1(functionExpression, firstToken.next,token);}
      break;
    case THIS:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      primaryExpression = PrimaryExpression();
         {if (true) return new MemberExpressionPre2(primaryExpression, firstToken.next,token);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MemberExpressionForIn MemberExpressionForIn() throws ParseException {
        MemberExpressionPre memberExpressionPre;
        MemberExpressionPart memberExpressionPart;
        ArrayList<MemberExpressionPart> memberExpressionPartList = new ArrayList<MemberExpressionPart>();
        Token firstToken=token;
    memberExpressionPre = MemberExpressionPre();
    label_5:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_5;
      }
      memberExpressionPart = MemberExpressionPart();
                                                                                                            memberExpressionPartList.add(memberExpressionPart);
    }
         {if (true) return new MemberExpressionForIn(memberExpressionPre, memberExpressionPartList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AllocationExpression AllocationExpression() throws ParseException {
        MemberExpression memberExpression;
        AllocationExpressionEnd allocationExpressionEnd;
        ArrayList<AllocationExpressionEnd> allocationExpressionEndList = new ArrayList<AllocationExpressionEnd>();
        Token firstToken=token;
    jj_consume_token(NEW);
    memberExpression = MemberExpression();
    label_6:
    while (true) {
      if (jj_2_7(2147483647)) {
        ;
      } else {
        break label_6;
      }
      allocationExpressionEnd = AllocationExpressionEnd();
                                                                                                                            allocationExpressionEndList.add(allocationExpressionEnd);
    }
         {if (true) return new AllocationExpression(memberExpression, allocationExpressionEndList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AllocationExpressionEnd AllocationExpressionEnd() throws ParseException {
        Arguments arguments;
        MemberExpressionPart memberExpressionPart;
        ArrayList<MemberExpressionPart> memberExpressionPartList = new ArrayList<MemberExpressionPart>();
        Token firstToken=token;
    arguments = Arguments();
    label_7:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_7;
      }
      memberExpressionPart = MemberExpressionPart();
                                                                                        memberExpressionPartList.add(memberExpressionPart);
    }
         {if (true) return new AllocationExpressionEnd(arguments, memberExpressionPartList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MemberExpressionPart MemberExpressionPart() throws ParseException {
        Expression expression;
        Identifier identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      expression = Expression();
      jj_consume_token(RBRACKET);
         {if (true) return new MemberExpressionPart1(expression, firstToken.next,token);}
      break;
    case DOT:
      jj_consume_token(DOT);
      identifier = Identifier();
         {if (true) return new MemberExpressionPart2(identifier, firstToken.next,token);}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CallExpression CallExpression() throws ParseException {
        MemberExpression memberExpression;
        Arguments arguments;
        CallExpressionPart callExpressionPart;
        ArrayList<CallExpressionPart> callExpressionPartList = new ArrayList<CallExpressionPart>();
        Token firstToken=token;
    memberExpression = MemberExpression();
    arguments = Arguments();
    label_8:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_8;
      }
      callExpressionPart = CallExpressionPart();
                                                                                                                        callExpressionPartList.add(callExpressionPart);
    }
         {if (true) return new CallExpression(memberExpression, arguments, callExpressionPartList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CallExpressionForIn CallExpressionForIn() throws ParseException {
        MemberExpressionForIn memberExpressionForIn;
        Arguments arguments;
        CallExpressionPart callExpressionPart;
        ArrayList<CallExpressionPart> callExpressionPartList = new ArrayList<CallExpressionPart>();
        Token firstToken=token;
    memberExpressionForIn = MemberExpressionForIn();
    arguments = Arguments();
    label_9:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_9;
      }
      callExpressionPart = CallExpressionPart();
                                                                                                                                  callExpressionPartList.add(callExpressionPart);
    }
         {if (true) return new CallExpressionForIn(memberExpressionForIn, arguments, callExpressionPartList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CallExpressionPart CallExpressionPart() throws ParseException {
        Arguments arguments;
        Expression expression;
        Identifier identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      arguments = Arguments();
         {if (true) return new CallExpressionPart1(arguments, firstToken.next,token);}
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      expression = Expression();
      jj_consume_token(RBRACKET);
         {if (true) return new CallExpressionPart2(expression, firstToken.next,token);}
      break;
    case DOT:
      jj_consume_token(DOT);
      identifier = Identifier();
         {if (true) return new CallExpressionPart3(identifier, firstToken.next,token);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Arguments Arguments() throws ParseException {
        ArgumentList argumentList = null;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
    case FUNCTION:
    case NEW:
    case THIS:
    case TYPEOF:
    case VOID:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      argumentList = ArgumentList();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
         {if (true) return new Arguments(argumentList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ArgumentList ArgumentList() throws ParseException {
        AssignmentExpression assignmentExpression;
        AssignmentExpression assignmentExpression1;
        ArrayList<AssignmentExpression> assignmentExpression1List = new ArrayList<AssignmentExpression>();
        Token firstToken=token;
    assignmentExpression = AssignmentExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      assignmentExpression1 = AssignmentExpression();
                                                                                                      assignmentExpression1List.add(assignmentExpression1);
    }
         {if (true) return new ArgumentList(assignmentExpression, assignmentExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public LeftHandSideExpression LeftHandSideExpression() throws ParseException {
        CallExpression callExpression;
        MemberExpression memberExpression;
        Token firstToken=token;
    if (jj_2_11(2147483647)) {
      callExpression = CallExpression();
         {if (true) return new LeftHandSideExpression1(callExpression, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case NEW:
      case THIS:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        memberExpression = MemberExpression();
         {if (true) return new LeftHandSideExpression2(memberExpression, firstToken.next,token);}
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public LeftHandSideExpressionForIn LeftHandSideExpressionForIn() throws ParseException {
        CallExpressionForIn callExpressionForIn;
        MemberExpressionForIn memberExpressionForIn;
        Token firstToken=token;
    if (jj_2_12(2147483647)) {
      callExpressionForIn = CallExpressionForIn();
         {if (true) return new LeftHandSideExpressionForIn1(callExpressionForIn, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case THIS:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        memberExpressionForIn = MemberExpressionForIn();
         {if (true) return new LeftHandSideExpressionForIn2(memberExpressionForIn, firstToken.next,token);}
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public PostfixExpression PostfixExpression() throws ParseException {
        LeftHandSideExpression leftHandSideExpression;
        PostfixOperator postfixOperator = null;
        Token firstToken=token;
    leftHandSideExpression = LeftHandSideExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      postfixOperator = PostfixOperator();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
         {if (true) return new PostfixExpression(leftHandSideExpression, postfixOperator, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PostfixOperator PostfixOperator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      jj_consume_token(INCR);
         {if (true) return new PostfixOperator1(firstToken.next,token);}
      break;
    case DECR:
      jj_consume_token(DECR);
         {if (true) return new PostfixOperator2(firstToken.next,token);}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpression UnaryExpression() throws ParseException {
        PostfixExpression postfixExpression;
        UnaryExpressionOp unaryExpressionOp;
        ArrayList<UnaryExpressionOp> unaryExpressionOpList = new ArrayList<UnaryExpressionOp>();
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
    case NEW:
    case THIS:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      postfixExpression = PostfixExpression();
         {if (true) return new UnaryExpression1(postfixExpression, firstToken.next,token);}
      break;
    case DELETE:
    case TYPEOF:
    case VOID:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
      label_11:
      while (true) {
        unaryExpressionOp = UnaryExpressionOp();
                                                            unaryExpressionOpList.add(unaryExpressionOp);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case TYPEOF:
        case VOID:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_11;
        }
      }
         {if (true) return new UnaryExpression2(unaryExpressionOpList, firstToken.next,token);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpressionOp UnaryExpressionOp() throws ParseException {
        UnaryOperator unaryOperator;
        UnaryExpression unaryExpression;
        Token firstToken=token;
    unaryOperator = UnaryOperator();
    unaryExpression = UnaryExpression();
         {if (true) return new UnaryExpressionOp(unaryOperator, unaryExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryOperator UnaryOperator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
      jj_consume_token(DELETE);
         {if (true) return new UnaryOperator1(firstToken.next,token);}
      break;
    case VOID:
      jj_consume_token(VOID);
         {if (true) return new UnaryOperator2(firstToken.next,token);}
      break;
    case TYPEOF:
      jj_consume_token(TYPEOF);
         {if (true) return new UnaryOperator3(firstToken.next,token);}
      break;
    case INCR:
      jj_consume_token(INCR);
         {if (true) return new UnaryOperator4(firstToken.next,token);}
      break;
    case DECR:
      jj_consume_token(DECR);
         {if (true) return new UnaryOperator5(firstToken.next,token);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
         {if (true) return new UnaryOperator6(firstToken.next,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
         {if (true) return new UnaryOperator7(firstToken.next,token);}
      break;
    case TILDE:
      jj_consume_token(TILDE);
         {if (true) return new UnaryOperator8(firstToken.next,token);}
      break;
    case BANG:
      jj_consume_token(BANG);
         {if (true) return new UnaryOperator9(firstToken.next,token);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
        UnaryExpression unaryExpression;
        MultiplicativeExpressionEnd multiplicativeExpressionEnd;
        ArrayList<MultiplicativeExpressionEnd> multiplicativeExpressionEndList = new ArrayList<MultiplicativeExpressionEnd>();
        Token firstToken=token;
    unaryExpression = UnaryExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case REM:
      case SLASH:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_12;
      }
      multiplicativeExpressionEnd = MultiplicativeExpressionEnd();
                                                                                                     multiplicativeExpressionEndList.add(multiplicativeExpressionEnd);
    }
         {if (true) return new MultiplicativeExpression(unaryExpression, multiplicativeExpressionEndList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpressionEnd MultiplicativeExpressionEnd() throws ParseException {
        MultiplicativeOperator multiplicativeOperator;
        UnaryExpression unaryExpression;
        Token firstToken=token;
    multiplicativeOperator = MultiplicativeOperator();
    unaryExpression = UnaryExpression();
         {if (true) return new MultiplicativeExpressionEnd(multiplicativeOperator, unaryExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeOperator MultiplicativeOperator() throws ParseException {
        Token t;
        ASTStringNode slash;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new MultiplicativeOperator1(firstToken.next,token);}
      break;
    case SLASH:
      t = jj_consume_token(SLASH);
                  slash=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new MultiplicativeOperator2(slash, firstToken.next,token);}
      break;
    case REM:
      jj_consume_token(REM);
         {if (true) return new MultiplicativeOperator3(firstToken.next,token);}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpression AdditiveExpression() throws ParseException {
        MultiplicativeExpression multiplicativeExpression;
        AdditiveExpressionEnd additiveExpressionEnd;
        ArrayList<AdditiveExpressionEnd> additiveExpressionEndList = new ArrayList<AdditiveExpressionEnd>();
        Token firstToken=token;
    multiplicativeExpression = MultiplicativeExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_13;
      }
      additiveExpressionEnd = AdditiveExpressionEnd();
                                                                                                                        additiveExpressionEndList.add(additiveExpressionEnd);
    }
         {if (true) return new AdditiveExpression(multiplicativeExpression, additiveExpressionEndList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpressionEnd AdditiveExpressionEnd() throws ParseException {
        AdditiveOperator additiveOperator;
        MultiplicativeExpression multiplicativeExpression;
        Token firstToken=token;
    additiveOperator = AdditiveOperator();
    multiplicativeExpression = MultiplicativeExpression();
         {if (true) return new AdditiveExpressionEnd(additiveOperator, multiplicativeExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AdditiveOperator AdditiveOperator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
         {if (true) return new AdditiveOperator1(firstToken.next,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
         {if (true) return new AdditiveOperator2(firstToken.next,token);}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ShiftExpression ShiftExpression() throws ParseException {
        AdditiveExpression additiveExpression;
        ShiftExpressionEnd shiftExpressionEnd;
        ArrayList<ShiftExpressionEnd> shiftExpressionEndList = new ArrayList<ShiftExpressionEnd>();
        Token firstToken=token;
    additiveExpression = AdditiveExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSHIFT:
      case RUNSHIFT:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_14;
      }
      shiftExpressionEnd = ShiftExpressionEnd();
                                                                                         shiftExpressionEndList.add(shiftExpressionEnd);
    }
         {if (true) return new ShiftExpression(additiveExpression, shiftExpressionEndList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ShiftExpressionEnd ShiftExpressionEnd() throws ParseException {
        ShiftOperator shiftOperator;
        AdditiveExpression additiveExpression;
        Token firstToken=token;
    shiftOperator = ShiftOperator();
    additiveExpression = AdditiveExpression();
         {if (true) return new ShiftExpressionEnd(shiftOperator, additiveExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ShiftOperator ShiftOperator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSHIFT:
      jj_consume_token(LSHIFT);
         {if (true) return new ShiftOperator1(firstToken.next,token);}
      break;
    case RSHIFT:
      jj_consume_token(RSHIFT);
         {if (true) return new ShiftOperator2(firstToken.next,token);}
      break;
    case RUNSHIFT:
      jj_consume_token(RUNSHIFT);
         {if (true) return new ShiftOperator3(firstToken.next,token);}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpression RelationalExpression() throws ParseException {
        ShiftExpression shiftExpression;
        RelationalExpressionEnd relationalExpressionEnd;
        ArrayList<RelationalExpressionEnd> relationalExpressionEndList = new ArrayList<RelationalExpressionEnd>();
        Token firstToken=token;
    shiftExpression = ShiftExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case LT:
      case GT:
      case LE:
      case GE:
      case INTANCE_OF:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_15;
      }
      relationalExpressionEnd = RelationalExpressionEnd();
                                                                                             relationalExpressionEndList.add(relationalExpressionEnd);
    }
         {if (true) return new RelationalExpression(shiftExpression, relationalExpressionEndList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpressionEnd RelationalExpressionEnd() throws ParseException {
        RelationalOperator relationalOperator;
        ShiftExpression shiftExpression;
        Token firstToken=token;
    relationalOperator = RelationalOperator();
    shiftExpression = ShiftExpression();
         {if (true) return new RelationalExpressionEnd(relationalOperator, shiftExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalOperator RelationalOperator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
         {if (true) return new RelationalOperator1(firstToken.next,token);}
      break;
    case GT:
      jj_consume_token(GT);
         {if (true) return new RelationalOperator2(firstToken.next,token);}
      break;
    case LE:
      jj_consume_token(LE);
         {if (true) return new RelationalOperator3(firstToken.next,token);}
      break;
    case GE:
      jj_consume_token(GE);
         {if (true) return new RelationalOperator4(firstToken.next,token);}
      break;
    case INTANCE_OF:
      jj_consume_token(INTANCE_OF);
         {if (true) return new RelationalOperator5(firstToken.next,token);}
      break;
    case IN:
      jj_consume_token(IN);
         {if (true) return new RelationalOperator6(firstToken.next,token);}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpressionNoIn RelationalExpressionNoIn() throws ParseException {
        ShiftExpression shiftExpression;
        RelationalExpressionNoInEnd relationalExpressionNoInEnd;
        ArrayList<RelationalExpressionNoInEnd> relationalExpressionNoInEndList = new ArrayList<RelationalExpressionNoInEnd>();
        Token firstToken=token;
    shiftExpression = ShiftExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:
      case INTANCE_OF:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_16;
      }
      relationalExpressionNoInEnd = RelationalExpressionNoInEnd();
                                                                                                     relationalExpressionNoInEndList.add(relationalExpressionNoInEnd);
    }
         {if (true) return new RelationalExpressionNoIn(shiftExpression, relationalExpressionNoInEndList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpressionNoInEnd RelationalExpressionNoInEnd() throws ParseException {
        RelationalNoInOperator relationalNoInOperator;
        ShiftExpression shiftExpression;
        Token firstToken=token;
    relationalNoInOperator = RelationalNoInOperator();
    shiftExpression = ShiftExpression();
         {if (true) return new RelationalExpressionNoInEnd(relationalNoInOperator, shiftExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalNoInOperator RelationalNoInOperator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
         {if (true) return new RelationalNoInOperator1(firstToken.next,token);}
      break;
    case GT:
      jj_consume_token(GT);
         {if (true) return new RelationalNoInOperator2(firstToken.next,token);}
      break;
    case LE:
      jj_consume_token(LE);
         {if (true) return new RelationalNoInOperator3(firstToken.next,token);}
      break;
    case GE:
      jj_consume_token(GE);
         {if (true) return new RelationalNoInOperator4(firstToken.next,token);}
      break;
    case INTANCE_OF:
      jj_consume_token(INTANCE_OF);
         {if (true) return new RelationalNoInOperator5(firstToken.next,token);}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpression EqualityExpression() throws ParseException {
        RelationalExpression relationalExpression;
        EqualityExpressionEnd equalityExpressionEnd;
        ArrayList<EqualityExpressionEnd> equalityExpressionEndList = new ArrayList<EqualityExpressionEnd>();
        Token firstToken=token;
    relationalExpression = RelationalExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
      case SEQ:
      case SNEQ:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_17;
      }
      equalityExpressionEnd = EqualityExpressionEnd();
                                                                                                   equalityExpressionEndList.add(equalityExpressionEnd);
    }
         {if (true) return new EqualityExpression(relationalExpression, equalityExpressionEndList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpressionEnd EqualityExpressionEnd() throws ParseException {
        EqualityOperator equalityOperator;
        RelationalExpression relationalExpression;
        Token firstToken=token;
    equalityOperator = EqualityOperator();
    relationalExpression = RelationalExpression();
         {if (true) return new EqualityExpressionEnd(equalityOperator, relationalExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpressionNoIn EqualityExpressionNoIn() throws ParseException {
        RelationalExpressionNoIn relationalExpressionNoIn;
        EqualityExpressionNoInEnd equalityExpressionNoInEnd;
        ArrayList<EqualityExpressionNoInEnd> equalityExpressionNoInEndList = new ArrayList<EqualityExpressionNoInEnd>();
        Token firstToken=token;
    relationalExpressionNoIn = RelationalExpressionNoIn();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
      case SEQ:
      case SNEQ:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_18;
      }
      equalityExpressionNoInEnd = EqualityExpressionNoInEnd();
                                                                                                                   equalityExpressionNoInEndList.add(equalityExpressionNoInEnd);
    }
         {if (true) return new EqualityExpressionNoIn(relationalExpressionNoIn, equalityExpressionNoInEndList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpressionNoInEnd EqualityExpressionNoInEnd() throws ParseException {
        EqualityOperator equalityOperator;
        RelationalExpressionNoIn relationalExpressionNoIn;
        Token firstToken=token;
    equalityOperator = EqualityOperator();
    relationalExpressionNoIn = RelationalExpressionNoIn();
         {if (true) return new EqualityExpressionNoInEnd(equalityOperator, relationalExpressionNoIn, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityOperator EqualityOperator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
         {if (true) return new EqualityOperator1(firstToken.next,token);}
      break;
    case NE:
      jj_consume_token(NE);
         {if (true) return new EqualityOperator2(firstToken.next,token);}
      break;
    case SEQ:
      jj_consume_token(SEQ);
         {if (true) return new EqualityOperator3(firstToken.next,token);}
      break;
    case SNEQ:
      jj_consume_token(SNEQ);
         {if (true) return new EqualityOperator4(firstToken.next,token);}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BitwiseANDExpression BitwiseANDExpression() throws ParseException {
        EqualityExpression equalityExpression;
        EqualityExpression equalityExpression1;
        ArrayList<EqualityExpression> equalityExpression1List = new ArrayList<EqualityExpression>();
        Token firstToken=token;
    equalityExpression = EqualityExpression();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_19;
      }
      jj_consume_token(BIT_AND);
      equalityExpression1 = EqualityExpression();
                                                                                              equalityExpression1List.add(equalityExpression1);
    }
         {if (true) return new BitwiseANDExpression(equalityExpression, equalityExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public BitwiseANDExpressionNoIn BitwiseANDExpressionNoIn() throws ParseException {
        EqualityExpressionNoIn equalityExpressionNoIn;
        EqualityExpressionNoIn equalityExpressionNoIn1;
        ArrayList<EqualityExpressionNoIn> equalityExpressionNoIn1List = new ArrayList<EqualityExpressionNoIn>();
        Token firstToken=token;
    equalityExpressionNoIn = EqualityExpressionNoIn();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_20;
      }
      jj_consume_token(BIT_AND);
      equalityExpressionNoIn1 = EqualityExpressionNoIn();
                                                                                                              equalityExpressionNoIn1List.add(equalityExpressionNoIn1);
    }
         {if (true) return new BitwiseANDExpressionNoIn(equalityExpressionNoIn, equalityExpressionNoIn1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public BitwiseXORExpression BitwiseXORExpression() throws ParseException {
        BitwiseANDExpression bitwiseANDExpression;
        BitwiseANDExpression bitwiseANDExpression1;
        ArrayList<BitwiseANDExpression> bitwiseANDExpression1List = new ArrayList<BitwiseANDExpression>();
        Token firstToken=token;
    bitwiseANDExpression = BitwiseANDExpression();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_21;
      }
      jj_consume_token(XOR);
      bitwiseANDExpression1 = BitwiseANDExpression();
                                                                                                      bitwiseANDExpression1List.add(bitwiseANDExpression1);
    }
         {if (true) return new BitwiseXORExpression(bitwiseANDExpression, bitwiseANDExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public BitwiseXORExpressionNoIn BitwiseXORExpressionNoIn() throws ParseException {
        BitwiseANDExpressionNoIn bitwiseANDExpressionNoIn;
        BitwiseANDExpressionNoIn bitwiseANDExpressionNoIn1;
        ArrayList<BitwiseANDExpressionNoIn> bitwiseANDExpressionNoIn1List = new ArrayList<BitwiseANDExpressionNoIn>();
        Token firstToken=token;
    bitwiseANDExpressionNoIn = BitwiseANDExpressionNoIn();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_22;
      }
      jj_consume_token(XOR);
      bitwiseANDExpressionNoIn1 = BitwiseANDExpressionNoIn();
                                                                                                                      bitwiseANDExpressionNoIn1List.add(bitwiseANDExpressionNoIn1);
    }
         {if (true) return new BitwiseXORExpressionNoIn(bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public BitwiseORExpression BitwiseORExpression() throws ParseException {
        BitwiseXORExpression bitwiseXORExpression;
        BitwiseXORExpression bitwiseXORExpression1;
        ArrayList<BitwiseXORExpression> bitwiseXORExpression1List = new ArrayList<BitwiseXORExpression>();
        Token firstToken=token;
    bitwiseXORExpression = BitwiseXORExpression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_23;
      }
      jj_consume_token(BIT_OR);
      bitwiseXORExpression1 = BitwiseXORExpression();
                                                                                                      bitwiseXORExpression1List.add(bitwiseXORExpression1);
    }
         {if (true) return new BitwiseORExpression(bitwiseXORExpression, bitwiseXORExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public BitwiseORExpressionNoIn BitwiseORExpressionNoIn() throws ParseException {
        BitwiseXORExpressionNoIn bitwiseXORExpressionNoIn;
        BitwiseXORExpressionNoIn bitwiseXORExpressionNoIn1;
        ArrayList<BitwiseXORExpressionNoIn> bitwiseXORExpressionNoIn1List = new ArrayList<BitwiseXORExpressionNoIn>();
        Token firstToken=token;
    bitwiseXORExpressionNoIn = BitwiseXORExpressionNoIn();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_24;
      }
      jj_consume_token(BIT_OR);
      bitwiseXORExpressionNoIn1 = BitwiseXORExpressionNoIn();
                                                                                                                      bitwiseXORExpressionNoIn1List.add(bitwiseXORExpressionNoIn1);
    }
         {if (true) return new BitwiseORExpressionNoIn(bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalANDExpression LogicalANDExpression() throws ParseException {
        BitwiseORExpression bitwiseORExpression;
        BitwiseORExpression bitwiseORExpression1;
        ArrayList<BitwiseORExpression> bitwiseORExpression1List = new ArrayList<BitwiseORExpression>();
        Token firstToken=token;
    bitwiseORExpression = BitwiseORExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_25;
      }
      jj_consume_token(SC_AND);
      bitwiseORExpression1 = BitwiseORExpression();
                                                                                                   bitwiseORExpression1List.add(bitwiseORExpression1);
    }
         {if (true) return new LogicalANDExpression(bitwiseORExpression, bitwiseORExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalANDExpressionNoIn LogicalANDExpressionNoIn() throws ParseException {
        BitwiseORExpressionNoIn bitwiseORExpressionNoIn;
        BitwiseORExpressionNoIn bitwiseORExpressionNoIn1;
        ArrayList<BitwiseORExpressionNoIn> bitwiseORExpressionNoIn1List = new ArrayList<BitwiseORExpressionNoIn>();
        Token firstToken=token;
    bitwiseORExpressionNoIn = BitwiseORExpressionNoIn();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_26;
      }
      jj_consume_token(SC_AND);
      bitwiseORExpressionNoIn1 = BitwiseORExpressionNoIn();
                                                                                                                   bitwiseORExpressionNoIn1List.add(bitwiseORExpressionNoIn1);
    }
         {if (true) return new LogicalANDExpressionNoIn(bitwiseORExpressionNoIn, bitwiseORExpressionNoIn1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalORExpression LogicalORExpression() throws ParseException {
        LogicalANDExpression logicalANDExpression;
        LogicalANDExpression logicalANDExpression1;
        ArrayList<LogicalANDExpression> logicalANDExpression1List = new ArrayList<LogicalANDExpression>();
        Token firstToken=token;
    logicalANDExpression = LogicalANDExpression();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_27;
      }
      jj_consume_token(SC_OR);
      logicalANDExpression1 = LogicalANDExpression();
                                                                                                       logicalANDExpression1List.add(logicalANDExpression1);
    }
         {if (true) return new LogicalORExpression(logicalANDExpression, logicalANDExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalORExpressionNoIn LogicalORExpressionNoIn() throws ParseException {
        LogicalANDExpressionNoIn logicalANDExpressionNoIn;
        LogicalANDExpressionNoIn logicalANDExpressionNoIn1;
        ArrayList<LogicalANDExpressionNoIn> logicalANDExpressionNoIn1List = new ArrayList<LogicalANDExpressionNoIn>();
        Token firstToken=token;
    logicalANDExpressionNoIn = LogicalANDExpressionNoIn();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_28;
      }
      jj_consume_token(SC_OR);
      logicalANDExpressionNoIn1 = LogicalANDExpressionNoIn();
                                                                                                                       logicalANDExpressionNoIn1List.add(logicalANDExpressionNoIn1);
    }
         {if (true) return new LogicalORExpressionNoIn(logicalANDExpressionNoIn, logicalANDExpressionNoIn1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpression ConditionalExpression() throws ParseException {
        LogicalORExpression logicalORExpression;
        ConditionalExpressionEnd conditionalExpressionEnd = null;
        Token firstToken=token;
    logicalORExpression = LogicalORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      conditionalExpressionEnd = ConditionalExpressionEnd();
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
         {if (true) return new ConditionalExpression(logicalORExpression, conditionalExpressionEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpressionEnd ConditionalExpressionEnd() throws ParseException {
        AssignmentExpression assignmentExpression;
        AssignmentExpression assignmentExpression1;
        Token firstToken=token;
    jj_consume_token(HOOK);
    assignmentExpression = AssignmentExpression();
    jj_consume_token(COLON);
    assignmentExpression1 = AssignmentExpression();
         {if (true) return new ConditionalExpressionEnd(assignmentExpression, assignmentExpression1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpressionNoIn ConditionalExpressionNoIn() throws ParseException {
        LogicalORExpressionNoIn logicalORExpressionNoIn;
        ConditionalExpressionNoInEnd conditionalExpressionNoInEnd = null;
        Token firstToken=token;
    logicalORExpressionNoIn = LogicalORExpressionNoIn();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      conditionalExpressionNoInEnd = ConditionalExpressionNoInEnd();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
         {if (true) return new ConditionalExpressionNoIn(logicalORExpressionNoIn, conditionalExpressionNoInEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpressionNoInEnd ConditionalExpressionNoInEnd() throws ParseException {
        AssignmentExpression assignmentExpression;
        AssignmentExpressionNoIn assignmentExpressionNoIn;
        Token firstToken=token;
    jj_consume_token(HOOK);
    assignmentExpression = AssignmentExpression();
    jj_consume_token(COLON);
    assignmentExpressionNoIn = AssignmentExpressionNoIn();
         {if (true) return new ConditionalExpressionNoInEnd(assignmentExpression, assignmentExpressionNoIn, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentExpression AssignmentExpression() throws ParseException {
        LeftHandSideExpression leftHandSideExpression;
        AssignmentOperator assignmentOperator;
        AssignmentExpression assignmentExpression;
        ConditionalExpression conditionalExpression;
        Token firstToken=token;
    if (jj_2_13(2147483647)) {
      leftHandSideExpression = LeftHandSideExpression();
      assignmentOperator = AssignmentOperator();
      assignmentExpression = AssignmentExpression();
         {if (true) return new AssignmentExpression1(leftHandSideExpression, assignmentOperator, assignmentExpression, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case NEW:
      case THIS:
      case TYPEOF:
      case VOID:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        conditionalExpression = ConditionalExpression();
         {if (true) return new AssignmentExpression2(conditionalExpression, firstToken.next,token);}
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public AssignmentExpressionNoIn AssignmentExpressionNoIn() throws ParseException {
        LeftHandSideExpression leftHandSideExpression;
        AssignmentOperator assignmentOperator;
        AssignmentExpressionNoIn assignmentExpressionNoIn;
        ConditionalExpressionNoIn conditionalExpressionNoIn;
        Token firstToken=token;
    if (jj_2_14(2147483647)) {
      leftHandSideExpression = LeftHandSideExpression();
      assignmentOperator = AssignmentOperator();
      assignmentExpressionNoIn = AssignmentExpressionNoIn();
         {if (true) return new AssignmentExpressionNoIn1(leftHandSideExpression, assignmentOperator, assignmentExpressionNoIn, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case NEW:
      case THIS:
      case TYPEOF:
      case VOID:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        conditionalExpressionNoIn = ConditionalExpressionNoIn();
         {if (true) return new AssignmentExpressionNoIn2(conditionalExpressionNoIn, firstToken.next,token);}
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public AssignmentOperator AssignmentOperator() throws ParseException {
        Token t;
        ASTStringNode slashassign;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
         {if (true) return new AssignmentOperator1(firstToken.next,token);}
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
         {if (true) return new AssignmentOperator2(firstToken.next,token);}
      break;
    case SLASHASSIGN:
      t = jj_consume_token(SLASHASSIGN);
                        slashassign=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AssignmentOperator3(slashassign, firstToken.next,token);}
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
         {if (true) return new AssignmentOperator4(firstToken.next,token);}
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
         {if (true) return new AssignmentOperator5(firstToken.next,token);}
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
         {if (true) return new AssignmentOperator6(firstToken.next,token);}
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
         {if (true) return new AssignmentOperator7(firstToken.next,token);}
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
         {if (true) return new AssignmentOperator8(firstToken.next,token);}
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
         {if (true) return new AssignmentOperator9(firstToken.next,token);}
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
         {if (true) return new AssignmentOperator10(firstToken.next,token);}
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
         {if (true) return new AssignmentOperator11(firstToken.next,token);}
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
         {if (true) return new AssignmentOperator12(firstToken.next,token);}
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
        AssignmentExpression assignmentExpression;
        AssignmentExpression assignmentExpression1;
        ArrayList<AssignmentExpression> assignmentExpression1List = new ArrayList<AssignmentExpression>();
        Token firstToken=token;
    assignmentExpression = AssignmentExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_29;
      }
      jj_consume_token(COMMA);
      assignmentExpression1 = AssignmentExpression();
                                                                                                      assignmentExpression1List.add(assignmentExpression1);
    }
         {if (true) return new Expression(assignmentExpression, assignmentExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionNoIn ExpressionNoIn() throws ParseException {
        AssignmentExpressionNoIn assignmentExpressionNoIn;
        AssignmentExpressionNoIn assignmentExpressionNoIn1;
        ArrayList<AssignmentExpressionNoIn> assignmentExpressionNoIn1List = new ArrayList<AssignmentExpressionNoIn>();
        Token firstToken=token;
    assignmentExpressionNoIn = AssignmentExpressionNoIn();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_30;
      }
      jj_consume_token(COMMA);
      assignmentExpressionNoIn1 = AssignmentExpressionNoIn();
                                                                                                                      assignmentExpressionNoIn1List.add(assignmentExpressionNoIn1);
    }
         {if (true) return new ExpressionNoIn(assignmentExpressionNoIn, assignmentExpressionNoIn1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
        Block block;
        JScriptVarStatement jScriptVarStatement;
        VariableStatement variableStatement;
        EmptyStatement emptyStatement;
        LabelledStatement labelledStatement;
        ExpressionStatement expressionStatement;
        IfStatement ifStatement;
        IterationStatement iterationStatement;
        ContinueStatement continueStatement;
        BreakStatement breakStatement;
        ImportStatement importStatement;
        ReturnStatement returnStatement;
        WithStatement withStatement;
        SwitchStatement switchStatement;
        ThrowStatement throwStatement;
        TryStatement tryStatement;
        Token firstToken=token;
    if (jj_2_15(2147483647)) {
      block = Block();
         {if (true) return new Statement1(block, firstToken.next,token);}
    } else if (jj_2_16(2147483647)) {
      jScriptVarStatement = JScriptVarStatement();
         {if (true) return new Statement2(jScriptVarStatement, firstToken.next,token);}
    } else if (jj_2_17(2147483647)) {
      variableStatement = VariableStatement();
         {if (true) return new Statement3(variableStatement, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        emptyStatement = EmptyStatement();
         {if (true) return new Statement4(emptyStatement, firstToken.next,token);}
        break;
      default:
        jj_la1[55] = jj_gen;
        if (jj_2_18(2147483647)) {
          labelledStatement = LabelledStatement();
         {if (true) return new Statement5(labelledStatement, firstToken.next,token);}
        } else if (jj_2_19(2147483647)) {
          expressionStatement = ExpressionStatement();
         {if (true) return new Statement6(expressionStatement, firstToken.next,token);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
            ifStatement = IfStatement();
         {if (true) return new Statement7(ifStatement, firstToken.next,token);}
            break;
          case FOR:
          case WHILE:
          case DO:
            iterationStatement = IterationStatement();
         {if (true) return new Statement8(iterationStatement, firstToken.next,token);}
            break;
          case CONTINUE:
            continueStatement = ContinueStatement();
         {if (true) return new Statement9(continueStatement, firstToken.next,token);}
            break;
          case BREAK:
            breakStatement = BreakStatement();
         {if (true) return new Statement10(breakStatement, firstToken.next,token);}
            break;
          case IMPORT:
            importStatement = ImportStatement();
         {if (true) return new Statement11(importStatement, firstToken.next,token);}
            break;
          case RETURN:
            returnStatement = ReturnStatement();
         {if (true) return new Statement12(returnStatement, firstToken.next,token);}
            break;
          case WITH:
            withStatement = WithStatement();
         {if (true) return new Statement13(withStatement, firstToken.next,token);}
            break;
          case SWITCH:
            switchStatement = SwitchStatement();
         {if (true) return new Statement14(switchStatement, firstToken.next,token);}
            break;
          case THROW:
            throwStatement = ThrowStatement();
         {if (true) return new Statement15(throwStatement, firstToken.next,token);}
            break;
          case TRY:
            tryStatement = TryStatement();
         {if (true) return new Statement16(tryStatement, firstToken.next,token);}
            break;
          default:
            jj_la1[56] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
        StatementList statementList = null;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
    case CONTINUE:
    case DELETE:
    case FOR:
    case FUNCTION:
    case IF:
    case NEW:
    case RETURN:
    case THIS:
    case TYPEOF:
    case VAR:
    case VOID:
    case WHILE:
    case WITH:
    case DO:
    case IMPORT:
    case SWITCH:
    case THROW:
    case TRY:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case SEMICOLON:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      statementList = StatementList();
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
         {if (true) return new Block(statementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public StatementList StatementList() throws ParseException {
        Statement statement;
        ArrayList<Statement> statementList = new ArrayList<Statement>();
        Token firstToken=token;
    label_31:
    while (true) {
      statement = Statement();
                               statementList.add(statement);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case IF:
      case NEW:
      case RETURN:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case IMPORT:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_31;
      }
    }
         {if (true) return new StatementList(statementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public VariableStatement VariableStatement() throws ParseException {
        VariableDeclarationList variableDeclarationList;
        ASTTextNode text329 = null;
        Token firstToken=token;
    jj_consume_token(VAR);
    variableDeclarationList = VariableDeclarationList();
    if (jj_2_20(2)) {
      jj_consume_token(SEMICOLON);
                                                                                   text329=new ASTTextNode(";",new WToken(token));
    } else {
      ;
    }
         {if (true) return new VariableStatement(variableDeclarationList, text329, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarationList VariableDeclarationList() throws ParseException {
        VariableDeclaration variableDeclaration;
        VariableDeclaration variableDeclaration1;
        ArrayList<VariableDeclaration> variableDeclaration1List = new ArrayList<VariableDeclaration>();
        Token firstToken=token;
    variableDeclaration = VariableDeclaration();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_32;
      }
      jj_consume_token(COMMA);
      variableDeclaration1 = VariableDeclaration();
                                                                                                  variableDeclaration1List.add(variableDeclaration1);
    }
         {if (true) return new VariableDeclarationList(variableDeclaration, variableDeclaration1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarationListNoIn VariableDeclarationListNoIn() throws ParseException {
        VariableDeclarationNoIn variableDeclarationNoIn;
        VariableDeclarationNoIn variableDeclarationNoIn1;
        ArrayList<VariableDeclarationNoIn> variableDeclarationNoIn1List = new ArrayList<VariableDeclarationNoIn>();
        Token firstToken=token;
    variableDeclarationNoIn = VariableDeclarationNoIn();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_33;
      }
      jj_consume_token(COMMA);
      variableDeclarationNoIn1 = VariableDeclarationNoIn();
                                                                                                                  variableDeclarationNoIn1List.add(variableDeclarationNoIn1);
    }
         {if (true) return new VariableDeclarationListNoIn(variableDeclarationNoIn, variableDeclarationNoIn1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclaration VariableDeclaration() throws ParseException {
        Identifier identifier;
        Initialiser initialiser = null;
        Token firstToken=token;
    identifier = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      initialiser = Initialiser();
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
         {if (true) return new VariableDeclaration(identifier, initialiser, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarationNoIn VariableDeclarationNoIn() throws ParseException {
        Identifier identifier;
        InitialiserNoIn initialiserNoIn = null;
        Token firstToken=token;
    identifier = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      initialiserNoIn = InitialiserNoIn();
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
         {if (true) return new VariableDeclarationNoIn(identifier, initialiserNoIn, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Initialiser Initialiser() throws ParseException {
        AssignmentExpression assignmentExpression;
        Token firstToken=token;
    jj_consume_token(ASSIGN);
    assignmentExpression = AssignmentExpression();
         {if (true) return new Initialiser(assignmentExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public InitialiserNoIn InitialiserNoIn() throws ParseException {
        AssignmentExpressionNoIn assignmentExpressionNoIn;
        Token firstToken=token;
    jj_consume_token(ASSIGN);
    assignmentExpressionNoIn = AssignmentExpressionNoIn();
         {if (true) return new InitialiserNoIn(assignmentExpressionNoIn, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EmptyStatement EmptyStatement() throws ParseException {
        Token firstToken=token;
    jj_consume_token(SEMICOLON);
         {if (true) return new EmptyStatement(firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionStatement ExpressionStatement() throws ParseException {
        Expression expression;
        ASTTextNode text331 = null;
        Token firstToken=token;
    expression = Expression();
    if (jj_2_21(2)) {
      jj_consume_token(SEMICOLON);
                                                   text331=new ASTTextNode(";",new WToken(token));
    } else {
      ;
    }
         {if (true) return new ExpressionStatement(expression, text331, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public IfStatement IfStatement() throws ParseException {
        Expression expression;
        Statement statement;
        Statement statement1 = null;
        Token firstToken=token;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    statement = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      statement1 = Statement();
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
         {if (true) return new IfStatement(expression, statement, statement1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public IterationStatement IterationStatement() throws ParseException {
        Statement statement;
        Expression expression;
        ASTTextNode text332 = null;
        Expression expression1;
        Statement statement1;
        ExpressionNoIn expressionNoIn = null;
        Expression expression2 = null;
        Expression expression3 = null;
        Statement statement2;
        VariableDeclarationList variableDeclarationList;
        Expression expression4 = null;
        Expression expression5 = null;
        Statement statement3;
        VariableDeclarationNoIn variableDeclarationNoIn;
        Expression expression6;
        Statement statement4;
        LeftHandSideExpressionForIn leftHandSideExpressionForIn;
        Expression expression7;
        Statement statement5;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      jj_consume_token(DO);
      statement = Statement();
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      expression = Expression();
      jj_consume_token(RPAREN);
      if (jj_2_22(2)) {
        jj_consume_token(SEMICOLON);
                                                                                              text332=new ASTTextNode(";",new WToken(token));
      } else {
        ;
      }
         {if (true) return new IterationStatement1(statement, expression, text332, firstToken.next,token);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      expression1 = Expression();
      jj_consume_token(RPAREN);
      statement1 = Statement();
         {if (true) return new IterationStatement2(expression1, statement1, firstToken.next,token);}
      break;
    default:
      jj_la1[69] = jj_gen;
      if (jj_2_23(2147483647)) {
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case FUNCTION:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          expressionNoIn = ExpressionNoIn();
          break;
        default:
          jj_la1[64] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case FUNCTION:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          expression2 = Expression();
          break;
        default:
          jj_la1[65] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case FUNCTION:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          expression3 = Expression();
          break;
        default:
          jj_la1[66] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        statement2 = Statement();
         {if (true) return new IterationStatement3(expressionNoIn, expression2, expression3, statement2, firstToken.next,token);}
      } else if (jj_2_24(2147483647)) {
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        jj_consume_token(VAR);
        variableDeclarationList = VariableDeclarationList();
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case FUNCTION:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          expression4 = Expression();
          break;
        default:
          jj_la1[67] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case FUNCTION:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          expression5 = Expression();
          break;
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        statement3 = Statement();
         {if (true) return new IterationStatement4(variableDeclarationList, expression4, expression5, statement3, firstToken.next,token);}
      } else if (jj_2_25(2147483647)) {
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        jj_consume_token(VAR);
        variableDeclarationNoIn = VariableDeclarationNoIn();
        jj_consume_token(IN);
        expression6 = Expression();
        jj_consume_token(RPAREN);
        statement4 = Statement();
         {if (true) return new IterationStatement5(variableDeclarationNoIn, expression6, statement4, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
          jj_consume_token(FOR);
          jj_consume_token(LPAREN);
          leftHandSideExpressionForIn = LeftHandSideExpressionForIn();
          jj_consume_token(IN);
          expression7 = Expression();
          jj_consume_token(RPAREN);
          statement5 = Statement();
         {if (true) return new IterationStatement6(leftHandSideExpressionForIn, expression7, statement5, firstToken.next,token);}
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ContinueStatement ContinueStatement() throws ParseException {
        Identifier identifier = null;
        ASTTextNode text333 = null;
        Token firstToken=token;
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER_NAME:
      identifier = Identifier();
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                                                                             text333=new ASTTextNode(";",new WToken(token));
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
         {if (true) return new ContinueStatement(identifier, text333, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public BreakStatement BreakStatement() throws ParseException {
        Identifier identifier = null;
        ASTTextNode text334 = null;
        Token firstToken=token;
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER_NAME:
      identifier = Identifier();
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                                                                          text334=new ASTTextNode(";",new WToken(token));
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
         {if (true) return new BreakStatement(identifier, text334, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStatement ReturnStatement() throws ParseException {
        Expression expression = null;
        ASTTextNode text335 = null;
        Token firstToken=token;
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
    case FUNCTION:
    case NEW:
    case THIS:
    case TYPEOF:
    case VOID:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      expression = Expression();
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                                                                           text335=new ASTTextNode(";",new WToken(token));
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
         {if (true) return new ReturnStatement(expression, text335, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public WithStatement WithStatement() throws ParseException {
        Expression expression;
        Statement statement;
        Token firstToken=token;
    jj_consume_token(WITH);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    statement = Statement();
         {if (true) return new WithStatement(expression, statement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchStatement SwitchStatement() throws ParseException {
        Expression expression;
        CaseBlock caseBlock;
        Token firstToken=token;
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    caseBlock = CaseBlock();
         {if (true) return new SwitchStatement(expression, caseBlock, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CaseBlock CaseBlock() throws ParseException {
        CaseClauses caseClauses = null;
        CaseBlockEnd caseBlockEnd;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      caseClauses = CaseClauses();
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    caseBlockEnd = CaseBlockEnd();
         {if (true) return new CaseBlock(caseClauses, caseBlockEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CaseBlockEnd CaseBlockEnd() throws ParseException {
        DefaultClause defaultClause;
        CaseClauses caseClauses = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
         {if (true) return new CaseBlockEnd1(firstToken.next,token);}
      break;
    case _DEFAULT:
      defaultClause = DefaultClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        caseClauses = CaseClauses();
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
         {if (true) return new CaseBlockEnd2(defaultClause, caseClauses, firstToken.next,token);}
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CaseClauses CaseClauses() throws ParseException {
        CaseClause caseClause;
        ArrayList<CaseClause> caseClauseList = new ArrayList<CaseClause>();
        Token firstToken=token;
    label_34:
    while (true) {
      caseClause = CaseClause();
                                 caseClauseList.add(caseClause);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[80] = jj_gen;
        break label_34;
      }
    }
         {if (true) return new CaseClauses(caseClauseList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CaseClause CaseClause() throws ParseException {
        Expression expression;
        StatementList statementList = null;
        Token firstToken=token;
    jj_consume_token(CASE);
    expression = Expression();
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
    case CONTINUE:
    case DELETE:
    case FOR:
    case FUNCTION:
    case IF:
    case NEW:
    case RETURN:
    case THIS:
    case TYPEOF:
    case VAR:
    case VOID:
    case WHILE:
    case WITH:
    case DO:
    case IMPORT:
    case SWITCH:
    case THROW:
    case TRY:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case SEMICOLON:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      statementList = StatementList();
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
         {if (true) return new CaseClause(expression, statementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public DefaultClause DefaultClause() throws ParseException {
        StatementList statementList = null;
        Token firstToken=token;
    jj_consume_token(_DEFAULT);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
    case CONTINUE:
    case DELETE:
    case FOR:
    case FUNCTION:
    case IF:
    case NEW:
    case RETURN:
    case THIS:
    case TYPEOF:
    case VAR:
    case VOID:
    case WHILE:
    case WITH:
    case DO:
    case IMPORT:
    case SWITCH:
    case THROW:
    case TRY:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case SEMICOLON:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      statementList = StatementList();
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
         {if (true) return new DefaultClause(statementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public LabelledStatement LabelledStatement() throws ParseException {
        Identifier identifier;
        Statement statement;
        Token firstToken=token;
    identifier = Identifier();
    jj_consume_token(COLON);
    statement = Statement();
         {if (true) return new LabelledStatement(identifier, statement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ThrowStatement ThrowStatement() throws ParseException {
        Expression expression;
        ASTTextNode text337 = null;
        Token firstToken=token;
    jj_consume_token(THROW);
    expression = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                                                           text337=new ASTTextNode(";",new WToken(token));
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
         {if (true) return new ThrowStatement(expression, text337, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TryStatement TryStatement() throws ParseException {
        Block block;
        TryStatementEnd tryStatementEnd;
        Token firstToken=token;
    jj_consume_token(TRY);
    block = Block();
    tryStatementEnd = TryStatementEnd();
         {if (true) return new TryStatement(block, tryStatementEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TryStatementEnd TryStatementEnd() throws ParseException {
        Finally finally_KW;
        Catch catch_KW;
        Finally finally_KW1 = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      finally_KW = Finally();
         {if (true) return new TryStatementEnd1(finally_KW, firstToken.next,token);}
      break;
    case CATCH:
      catch_KW = Catch();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        finally_KW1 = Finally();
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
         {if (true) return new TryStatementEnd2(catch_KW, finally_KW1, firstToken.next,token);}
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Catch Catch() throws ParseException {
        Identifier identifier;
        Block block;
        Token firstToken=token;
    jj_consume_token(CATCH);
    jj_consume_token(LPAREN);
    identifier = Identifier();
    jj_consume_token(RPAREN);
    block = Block();
         {if (true) return new Catch(identifier, block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Finally Finally() throws ParseException {
        Block block;
        Token firstToken=token;
    jj_consume_token(FINALLY);
    block = Block();
         {if (true) return new Finally(block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionDeclaration FunctionDeclaration() throws ParseException {
        Identifier identifier;
        FormalParameterList formalParameterList = null;
        FunctionBody functionBody;
        Token firstToken=token;
    jj_consume_token(FUNCTION);
    identifier = Identifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER_NAME:
      formalParameterList = FormalParameterList();
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    functionBody = FunctionBody();
         {if (true) return new FunctionDeclaration(identifier, formalParameterList, functionBody, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionExpression FunctionExpression() throws ParseException {
        Identifier identifier = null;
        FormalParameterList formalParameterList = null;
        FunctionBody functionBody;
        Token firstToken=token;
    jj_consume_token(FUNCTION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER_NAME:
      identifier = Identifier();
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER_NAME:
      formalParameterList = FormalParameterList();
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    functionBody = FunctionBody();
         {if (true) return new FunctionExpression(identifier, formalParameterList, functionBody, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameterList FormalParameterList() throws ParseException {
        Identifier identifier;
        Identifier identifier1;
        ArrayList<Identifier> identifier1List = new ArrayList<Identifier>();
        Token firstToken=token;
    identifier = Identifier();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[89] = jj_gen;
        break label_35;
      }
      jj_consume_token(COMMA);
      identifier1 = Identifier();
                                                              identifier1List.add(identifier1);
    }
         {if (true) return new FormalParameterList(identifier, identifier1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionBody FunctionBody() throws ParseException {
        SourceElements sourceElements = null;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
    case CONTINUE:
    case DELETE:
    case FOR:
    case FUNCTION:
    case IF:
    case NEW:
    case RETURN:
    case THIS:
    case TYPEOF:
    case VAR:
    case VOID:
    case WHILE:
    case WITH:
    case DO:
    case IMPORT:
    case SWITCH:
    case THROW:
    case TRY:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case SEMICOLON:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      sourceElements = SourceElements();
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
         {if (true) return new FunctionBody(sourceElements, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public SourceElements SourceElements() throws ParseException {
        SourceElement sourceElement;
        ArrayList<SourceElement> sourceElementList = new ArrayList<SourceElement>();
        Token firstToken=token;
    label_36:
    while (true) {
      sourceElement = SourceElement();
                                       sourceElementList.add(sourceElement);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case IF:
      case NEW:
      case RETURN:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case IMPORT:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_36;
      }
    }
         {if (true) return new SourceElements(sourceElementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public SourceElement SourceElement() throws ParseException {
        FunctionDeclaration functionDeclaration;
        Statement statement;
        Token firstToken=token;
    if (jj_2_26(2147483647)) {
      functionDeclaration = FunctionDeclaration();
         {if (true) return new SourceElement1(functionDeclaration, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case IF:
      case NEW:
      case RETURN:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case IMPORT:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        statement = Statement();
         {if (true) return new SourceElement2(statement, firstToken.next,token);}
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ImportStatement ImportStatement() throws ParseException {
        Name name;
        ASTTextNode text338 = null;
        Token firstToken=token;
    jj_consume_token(IMPORT);
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(STAR);
                                       text338=new ASTTextNode(new String[]{".","*"},new WToken(token));
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
         {if (true) return new ImportStatement(name, text338, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Name Name() throws ParseException {
        Token t;
        ASTStringNode identifier_name;
        ASTStringNode identifier_name1;
        ArrayList<ASTStringNode> identifier_name1List = new ArrayList<ASTStringNode>();
        Token firstToken=token;
    t = jj_consume_token(IDENTIFIER_NAME);
                            identifier_name=new ASTStringNode(t.image,new WToken(t));
    label_37:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_37;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER_NAME);
                                                                                                                             identifier_name1=new ASTStringNode(t.image,new WToken(t));
                                                                                                                                                                                         identifier_name1List.add(identifier_name1);
    }
         {if (true) return new Name(identifier_name, identifier_name1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public JScriptVarStatement JScriptVarStatement() throws ParseException {
        JScriptVarDeclarationList jScriptVarDeclarationList;
        ASTTextNode text339 = null;
        Token firstToken=token;
    jj_consume_token(VAR);
    jScriptVarDeclarationList = JScriptVarDeclarationList();
    if (jj_2_28(2)) {
      jj_consume_token(SEMICOLON);
                                                                                       text339=new ASTTextNode(";",new WToken(token));
    } else {
      ;
    }
         {if (true) return new JScriptVarStatement(jScriptVarDeclarationList, text339, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public JScriptVarDeclarationList JScriptVarDeclarationList() throws ParseException {
        JScriptVarDeclaration jScriptVarDeclaration;
        JScriptVarDeclaration jScriptVarDeclaration1;
        ArrayList<JScriptVarDeclaration> jScriptVarDeclaration1List = new ArrayList<JScriptVarDeclaration>();
        Token firstToken=token;
    jScriptVarDeclaration = JScriptVarDeclaration();
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_38;
      }
      jj_consume_token(COMMA);
      jScriptVarDeclaration1 = JScriptVarDeclaration();
                                                                                                          jScriptVarDeclaration1List.add(jScriptVarDeclaration1);
    }
         {if (true) return new JScriptVarDeclarationList(jScriptVarDeclaration, jScriptVarDeclaration1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public JScriptVarDeclaration JScriptVarDeclaration() throws ParseException {
        Identifier identifier;
        Token t;
        ASTStringNode identifier_name;
        Initialiser initialiser = null;
        Token firstToken=token;
    identifier = Identifier();
    jj_consume_token(COLON);
    t = jj_consume_token(IDENTIFIER_NAME);
                                                        identifier_name=new ASTStringNode(t.image,new WToken(t));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      initialiser = Initialiser();
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
         {if (true) return new JScriptVarDeclaration(identifier, identifier_name, initialiser, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_3R_299() {
    if (jj_3R_309()) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    Token xsp;
    if (jj_3R_299()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_299()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_3R_298()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_51()) return true;
    if (jj_3R_213()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_279() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) return true;
    }
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_313() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) return true;
    }
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_3R_240()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_265()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_3R_252()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_47()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) return true;
    }
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_3R_264()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    Token xsp;
    if (jj_3R_254()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_254()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_3R_255()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_112()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_3R_240()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) return true;
    }
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_3R_253()) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_47()) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_56()) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_227()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_56()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_226()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_224()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_128()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_170() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_3R_100()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_128()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_100()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_3R_251()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_63()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_251() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_218()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_236()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    if (jj_3R_60()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_40()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    if (jj_3R_116()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_40()) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_178()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_3R_177()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_173()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_172()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_171()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(REGULAR_EXPRESSION_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_169()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(NULL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(HEX_INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_49()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_49()) return true;
    if (jj_3R_50()) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_49()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_179()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_49()) return true;
    if (jj_3R_50()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_214()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_157()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_232()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_110()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_3R_179()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_246()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_123()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_214()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_215()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_257()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_131()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_132()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_232()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_233()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_216()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_246()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_247()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_3R_278()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_184()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_3R_257()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_258()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_216()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_217()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_250()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_scan_token(SNEQ)) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_scan_token(SEQ)) return true;
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_262() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_3R_262()) return true;
    if (jj_3R_266()) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_3R_266()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_3R_262()) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_3R_289()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_234()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_235()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_scan_token(INTANCE_OF)) return true;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_297() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_303()) {
    jj_scanpos = xsp;
    if (jj_3R_304()) {
    jj_scanpos = xsp;
    if (jj_3R_305()) {
    jj_scanpos = xsp;
    if (jj_3R_306()) {
    jj_scanpos = xsp;
    if (jj_3R_307()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_220()) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_3R_297()) return true;
    if (jj_3R_248()) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_3R_248()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_277()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_scan_token(INTANCE_OF)) return true;
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_3R_270()) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_3R_271()) return true;
    if (jj_3R_248()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_248()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_249()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_3R_281()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_220()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_221()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_scan_token(RUNSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_scan_token(RSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_195()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_3R_282()) return true;
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_3R_259()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_260()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_207()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) return true;
    }
    return false;
  }

  final private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) return true;
    }
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_3R_293()) return true;
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_3R_292()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    Token xsp;
    if (jj_3R_130()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_3R_268()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_300() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_3R_300()) return true;
    if (jj_3R_279()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_3R_279()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_280()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_325() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3R_324() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_3R_313()) return true;
    return false;
  }

  final private boolean jj_3R_322() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_321() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_320() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_scan_token(TYPEOF)) return true;
    return false;
  }

  final private boolean jj_3R_318() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_317() {
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_244()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3R_314() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_317()) {
    jj_scanpos = xsp;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) {
    jj_scanpos = xsp;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) {
    jj_scanpos = xsp;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) {
    jj_scanpos = xsp;
    if (jj_3R_325()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_3R_314()) return true;
    if (jj_3R_279()) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_3R_102()) return true;
    return false;
  }

  public EcmaScriptParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[96];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xfddc0000,0x10000000,0x0,0x0,0xb4900000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14800000,0x10800000,0x0,0x0,0xb4900000,0x0,0x14800000,0x10800000,0x0,0x0,0xa0100000,0xb4900000,0xa0100000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb4900000,0xb4900000,0x0,0x0,0x0,0x0,0x94c0000,0xfddc0000,0xfddc0000,0x0,0x0,0x0,0x0,0x200000,0xb4900000,0xb4900000,0xb4900000,0xb4900000,0xb4900000,0x0,0x400000,0x0,0x0,0x0,0x0,0xb4900000,0x0,0x0,0x0,0x0,0x0,0xfddc0000,0xfddc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfddc0000,0xfddc0000,0xfddc0000,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x257a103,0x540000,0x0,0x4000000,0x4540000,0x400000,0x4000000,0x4000000,0x0,0x4000000,0x4000000,0x0,0x540000,0x540000,0x1400000,0x1500000,0x540000,0x4000000,0x540000,0x540000,0x0,0x0,0x0,0x540000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78000000,0x78000000,0x78000000,0x78000000,0x80000000,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x540000,0x540000,0x0,0x4000000,0x4000000,0x2000000,0x3a103,0x257a103,0x257a103,0x4000000,0x4000000,0x0,0x0,0x0,0x540000,0x540000,0x540000,0x540000,0x540000,0x101,0x0,0x0,0x2000000,0x0,0x2000000,0x540000,0x2000000,0x4,0x4,0x80080,0x4,0x257a103,0x257a103,0x2000000,0x1000,0x1008,0x0,0x0,0x0,0x4000000,0x257a103,0x257a103,0x257a103,0x1000000,0x4000000,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x18198,0x0,0x0,0x0,0x18198,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18198,0x0,0x0,0x0,0x180,0x180,0x18198,0x18198,0x18198,0x60,0x60,0x18,0x18,0xe00,0xe00,0x0,0x0,0x0,0x0,0x7,0x7,0x7,0x1000,0x1000,0x4000,0x4000,0x2000,0x2000,0x20000,0x20000,0x40000,0x40000,0x80000,0x80000,0x18198,0x18198,0xffe00000,0x0,0x0,0x0,0x0,0x18198,0x18198,0x0,0x0,0x200000,0x200000,0x0,0x18198,0x18198,0x18198,0x18198,0x18198,0x0,0x0,0x0,0x0,0x0,0x0,0x18198,0x0,0x0,0x0,0x0,0x0,0x18198,0x18198,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18198,0x18198,0x18198,0x0,0x0,0x200000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x100722,0x100722,0x722,0x0,0x100722,0x0,0x0,0x0,0x100402,0x0,0x0,0x100402,0x100722,0x100722,0x0,0x0,0x100722,0x0,0x100722,0x100722,0x0,0x0,0x0,0x100722,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100722,0x100722,0x0,0x0,0x0,0x0,0x0,0x100722,0x100722,0x0,0x0,0x0,0x0,0x0,0x100722,0x100722,0x100722,0x100722,0x100722,0x0,0x0,0x100000,0x0,0x100000,0x0,0x100722,0x0,0x0,0x0,0x0,0x0,0x100722,0x100722,0x0,0x0,0x0,0x100000,0x100000,0x100000,0x0,0x100722,0x100722,0x100722,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x8,0x8,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x8,0x0,0x8,0x8,0x0,0x0,0x0,0x8,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x2,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[28];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public EcmaScriptParser(CharStream stream) {
    token_source = new EcmaScriptParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public EcmaScriptParser(EcmaScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(EcmaScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[133];
    for (int i = 0; i < 133; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 96; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 133; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 28; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

//	void jjtreeOpenNodeScope(Node n){//		Token t = getToken(1);//		if(t != null){//			((SimpleNode) n).setBeginToken(t);//		}//	}////	void jjtreeCloseNodeScope(Node n){//		Token t = getToken(0);//		if(t != null){//			((SimpleNode) n).setEndToken(t);//		}//	}
}
