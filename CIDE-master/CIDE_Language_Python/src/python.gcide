// -*- java -*-
// Copyright  Corporation for National Research Initiatives

options
{
    // only non-defaults are given here.
    STATIC = false;                          // multiple parsers
    COMMON_TOKEN_ACTION = true;              // CommonTokenAction(Token)
//    DEBUG_PARSER = true;
//    DEBUG_TOKEN_MANAGER = true;
    USER_CHAR_STREAM = true;
    UNICODE_INPUT = true;
}


PARSER_BEGIN(PythonParser)
package tmp.generated_python;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

public class PythonParser
{
  
}


PARSER_END(PythonParser)

TOKEN_MGR_DECLS:
{
    int indentation[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int level = 0;
    int dedents = 0;
    int parens = 0;
    int indent;

    boolean expect_indent = false;

    boolean compound = false;

    public boolean single_input = false;

    // parsing of partial sentence (interactive) mode
    public boolean partial = false;
    // control whether empty new lines on EOF force sentence closing NEWLINE even if indent
    // is expected,i.e. classic behavior at jython prompt (different from codeop behavior)
    public boolean stdprompt = false;

    public boolean generator_allowed = true;

    static Token addDedent(Token previous) {
        Token t = new Token();
        t.kind = DEDENT;
        t.beginLine = previous.beginLine;
        t.endLine = previous.endLine;
        t.beginColumn = previous.beginColumn;
        t.endColumn = previous.endColumn;
        t.offset=previous.offset;
        t.length=0;
        t.image = "";
        t.specialToken = null;
        t.next = null;
        previous.next = t;
        return t;
    }

    void CommonTokenAction(Token t) {
        /*
           if not partial: EOF is expanded to token sequences comprising
               if single_input: [NEWLINE] necessary DEDENT NEWLINE (afterward EOF)
               otherwise      : [NEWLINE] necessary DEDENT EOF
           if partial: EOF expansion happens only if EOF preceded by empty line (etc),
           i.e. lexer is in MAYBE_FORCE_NEWLINE_IF_EOF state
        */
        if (t.kind == EOF) {
            // System.out.println("EOF: "+single_input+", "+curLexState+", "+level);
            if (!partial || curLexState == MAYBE_FORCE_NEWLINE_IF_EOF) {
                if (curLexState == DEFAULT) {
                    t.kind = NEWLINE;
                }
                else {
                    t.kind = DEDENT;
                    t.length=0;
                    if (level >= 0) level -= 1;
                }
                while (level >= 0) {
                    level--;
                    t = addDedent(t);
                }
                if (!single_input) {
                    t.kind = EOF;
                    t.image = "<EOF>";
                } else {
                    t.kind = NEWLINE;
                    t.image = "<FORCENL>";
                    single_input = false;
                }
            }
        } else if (t.kind == YIELD) {
            if (!generator_allowed) {
                t.kind = NAME;
            }
        }
    }

    void indenting(int ind) {
        indent = ind;
        if (indent == indentation[level])
            SwitchTo(INDENTATION_UNCHANGED);
        else
            SwitchTo(INDENTING);
    }
}


SKIP :
{
    <SPACE: " ">
|   "\t"
|   "\014"
|   <CONTINUATION: ("\\") ("\r\n"|"\n"|"\r")>
|   <NEWLINE1: ("\r\n"|"\n"|"\r")>
        {
            if (parens == 0) {
                indent = 0;
                input_stream.backup(1);
                if (level == 0)
                    SwitchTo(FORCE_NEWLINE1);
                else
                    SwitchTo(FORCE_NEWLINE2);
            }
        }
}


<FORCE_NEWLINE1> TOKEN :
{ <NEWLINE: ("\n" | "\r")> : INDENTATION_UNCHANGED }


<FORCE_NEWLINE2> TOKEN :
{ <NEWLINE2: ("\n" | "\r")> { matchedToken.kind = NEWLINE; }: INDENTING }


// causes expected warning
<MAYBE_FORCE_NEWLINE_IF_EOF> SKIP :
{
    <""> { indenting(0); }
}

<INDENTING, INDENTATION_UNCHANGED> SKIP :
{
    "\t"
        { indenting((indent/8+1)*8); }
|   " "
        { indenting(indent+1); }
|   "\014"
        { indenting(0); }
|   <CRLF1: ("\r\n" | "\n" | "\r")>
        {
            //System.out.println("empty line");
            // if partial single_input (interactive) mode,
            // empty line (indent==0), and no parens open
            // or indentetion expected (if stdprompt == true, ovveride last cond)
            // consider forcing sentence closing NEWLINE if EOF
            if (partial && single_input && indent == 0 &&
                           parens == 0  && (stdprompt || !expect_indent)) {
                //System.out.println("force newline");
                //backup a character!
                // - input_stream.backup(1); -
                SwitchTo(MAYBE_FORCE_NEWLINE_IF_EOF);
            }
            else
                indenting(0);
        }
}


<INDENTATION_UNCHANGED> SKIP :
{
    <""> : DEFAULT
}


<INDENTING> TOKEN :
{
    <DEDENT: "">
        {
            if (indent > indentation[level]) {
                level++;
                indentation[level] = indent;
                matchedToken.kind=INDENT;
                matchedToken.image = "";
                //for (int i=0;i<indent;i++) matchedToken.image+=" ";
                matchedToken.length=0;
            }
            else if (level > 0) {
                Token t = matchedToken;
                level -= 1;
                while (level > 0 && indent < indentation[level]) {
                    level--;
                    t = addDedent(t);
                }
                if (indent != indentation[level]) {
                    throw new TokenMgrError("inconsistent dedent",0);//TODO
                }
                t.next = null;
            }
        } : DEFAULT
}


<UNREACHABLE> TOKEN :
{
    < INDENT:"<INDENT>">
//|     < DEDENT:"<DEDENT>">
}


<DEFAULT> SPECIAL_TOKEN: /* COMMENTS */
{
    <TRAILING_COMMENT: "#" (~["\n","\r"])* >
}

<INDENTING, INDENTATION_UNCHANGED> SPECIAL_TOKEN: /* COMMENTS */
{
    <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\r\n" | "\n" | "\r")> {
        indenting(0);
    }
}


TOKEN : /* SEPARATORS */
{
    < LPAREN: "(" > {parens++;}
|   < RPAREN: ")" > {parens--;}
|   < LBRACE: "{" > {parens++;}
|   < RBRACE: "}" > {parens--;}
|   < LBRACKET: "[" > {parens++;}
|   < RBRACKET: "]" > {parens--;}
|   < SEMICOLON: ";" >
|   < COMMA: "," >
|   < DOT: "." >
|   < COLON: ":" >
}


TOKEN : /* OPERATORS */
{
    < PLUS: "+" >
|   < MINUS: "-" >
|   < MULTIPLY: "*" >
|   < DIVIDE: "/" >
|   < FLOORDIVIDE: "//" >
|   < POWER: "**" >
|   < LSHIFT: "<<" >
|   < RSHIFT: ">>" >
|   < MODULO: "%" >
|   < NOT: "~" >
|   < XOR: "^" >
|   < OR: "|" >
|   < AND: "&" >
|   < EQUAL: "=" >
|   < GREATER: ">" >
|   < LESS: "<" >
|   < EQEQUAL: "==" >
|   < EQLESS: "<=" >
|   < EQGREATER: ">=" >
|   < LESSGREATER: "<>" >
|   < NOTEQUAL: "!=" >
|   < PLUSEQ: "+=" >
|   < MINUSEQ: "-=" >
|   < MULTIPLYEQ: "*=" >
|   < DIVIDEEQ: "/=" >
|   < FLOORDIVIDEEQ: "//=" >
|   < MODULOEQ: "%=" >
|   < ANDEQ: "&=" >
|   < OREQ: "|=" >
|   < XOREQ: "^=" >
|   < LSHIFTEQ: "<<=" >
|   < RSHIFTEQ: ">>=" >
|   < POWEREQ: "**=" >
}

TOKEN : /* KEYWORDS */
{
    < OR_BOOL: "or" >
|   < AND_BOOL: "and" >
|   < NOT_BOOL: "not" >
|   < IS: "is" >
|   < IN: "in" >
|   < LAMBDA: "lambda" >
|   < IF: "if" >
|   < ELSE: "else" >
|   < ELIF: "elif" >
|   < WHILE: "while" >
|   < FOR: "for" >
|   < TRY: "try" >
|   < EXCEPT: "except" >
|   < DEF: "def" >
|   < CLASS: "class" >
|   < FINALLY: "finally" >
|   < PRINT: "print" >
|   < PASS: "pass" >
|   < BREAK: "break" >
|   < CONTINUE: "continue" >
|   < RETURN: "return" >
|   < YIELD: "yield" >
|   < IMPORT: "import" >
|   < FROM: "from" >
|   < DEL: "del" >
|   < RAISE: "raise" >
|   < GLOBAL: "global" >
|   < EXEC: "exec" >
|   < ASSERT: "assert" >
|   < AS: "as" >
}


TOKEN : /* Python identifiers */
{
    < NAME: <LETTER> ( <LETTER> | <DIGIT>)* >
|   < #LETTER: ["_","a"-"z","A"-"Z"] >
}


TOKEN : /* Numeric literals */
{
    < DECNUMBER:
        ["1"-"9"] (["0"-"9"])* (["l", "L"])?
      | "0"
      >
|   < HEXNUMBER: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ (["l","L"])? >
|   < OCTNUMBER: "0" (["0"-"7"])* (["l","L"])? >
|
    < FLOAT:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      >
|   < COMPLEX: (<DECNUMBER> | <FLOAT> | "0" <DECNUMBER> ) ["j", "J"]>
|   < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|   < #DIGIT: ["0" - "9"] >
}

/*TOKEN : { <STRING: (["r", "R"])? ["'", "\"", "'''", "\"\"\""] >
    {
        int nquotes = matchedToken.image.length() > 2 ? 3 : 1;
        char quote = matchedToken.image.charAt(matchedToken.image.length()-1);

    }
}*/


MORE : /* Strings */
{
    < (["u", "U"]) (["r", "R"])? "'" > :  IN_USTRING11
|   < (["u", "U"]) (["r", "R"])? "\"" > :  IN_USTRING21
|   < (["u", "U"]) (["r", "R"])? "'''" > :  IN_USTRING13
|   < (["u", "U"]) (["r", "R"])? "\"\"\"" > :  IN_USTRING23
|   < (["r", "R"])? "'" > :  IN_STRING11
|   < (["r", "R"])? "\"" > :  IN_STRING21
|   < (["r", "R"])? "'''" > :  IN_STRING13
|   < (["r", "R"])? "\"\"\"" > :  IN_STRING23
}

<IN_STRING11> TOKEN : { <SINGLE_STRING: "'"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING21> TOKEN : { <SINGLE_STRING2: "\""> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING13> TOKEN : { <TRIPLE_STRING: "'''"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING23> TOKEN : { <TRIPLE_STRING2: "\"\"\""> {
    matchedToken.image = image.toString(); } : DEFAULT}

<IN_USTRING11> TOKEN : { <SINGLE_USTRING: "'"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_USTRING21> TOKEN : { <SINGLE_USTRING2: "\""> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_USTRING13> TOKEN : { <TRIPLE_USTRING: "'''"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_USTRING23> TOKEN : { <TRIPLE_USTRING2: "\"\"\""> {
    matchedToken.image = image.toString(); } : DEFAULT}

<IN_STRING11> MORE:
{
    <"\\\r\n">           { image.setLength(image.length()-3); } : IN_STRING1NLC
|   <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_STRING1NLC
}

<IN_STRING21> MORE:
{
    <"\\\r\n">           { image.setLength(image.length()-3); } : IN_STRING2NLC
|   <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_STRING2NLC
}

<IN_USTRING11> MORE:
{
    <"\\\r\n">           { image.setLength(image.length()-3); } : IN_USTRING1NLC
|   <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_USTRING1NLC
}

<IN_USTRING21> MORE:
{
    <"\\\r\n">           { image.setLength(image.length()-3); } : IN_USTRING2NLC
|   <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_USTRING2NLC
}

<IN_STRING1NLC> MORE:
{
 <""> : IN_STRING11
}

<IN_STRING2NLC> MORE:
{
 <""> : IN_STRING21
}

<IN_USTRING1NLC> MORE:
{
 <""> : IN_USTRING11
}

<IN_USTRING2NLC> MORE:
{
 <""> : IN_USTRING21
}

<IN_STRING11, IN_USTRING11> MORE: { <("\\" ("\\"|"'")) | ~["\n","\r"]> }
<IN_STRING21, IN_USTRING21> MORE: { <("\\" ("\\"|"\"")) | ~["\n","\r"]> }

<IN_STRING13, IN_STRING23, IN_USTRING13, IN_USTRING23> MORE:
{
    <"\r\n"> {
        int l = image.length();
        image.setLength(l-1);
        image.setCharAt(l-2, '\n');
    }
|   <"\n">
|   <"\r"> { image.setCharAt(image.length()-1, '\n'); }
|   <~["\n","\r"]>
|   <"\\" ~["\n","\r"]>
}



















GRAMMARSTART

printer "PythonPrinter" "de.ovgu.cide.language.python.PythonPrinter";

////single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
//// apparently CPython coalesces newlines, we don't
//modType single_input(): {
//    token_source.single_input=true;
//}
//{
//    (LOOKAHEAD(2) <NEWLINE>)* [(simple_stmt() | compound_stmt() <NEWLINE>)] (<NEWLINE>)* <EOF>
//    { return (modType) jjtree.popNode(); }
//}
//
////file_input: (NEWLINE | stmt)* ENDMARKER
file_input:
 (newlineOrStmt)* <EOF>;

newlineOrStmt: <NEWLINE> | stmt;

//
////eval_input: NEWLINE* testlist NEWLINE* ENDMARKER
//modType eval_input(): {token_source.single_input=false;}
//{
//    (<NEWLINE>)* SmartTestList() (<NEWLINE>)* <EOF>
//    { return (modType) jjtree.popNode(); }
//}

funcdef: "def" AnyName parameters ":" suite;
parameters: "(" [varargslist] ")";

//varargslist: (fpdef ["=" test] ",")* ("*" NAME ["," ("**"|"*" "*") NAME] | ("**"|"*" "*") NAME) | fpdef ["=" test] ("," fpdef ["=" test])* [","]
varargslist:
    defaultarg (LL(2) "," defaultarg)*
        [LL(3) "," ExtraArgList]
        [LL(2) "," ExtraKeywordList]
        [","<NONE>]
|    LL(2) ExtraArgList ["," ExtraKeywordList]
|    ExtraKeywordList
;

ExtraArgList: "*" Name;

ExtraKeywordList: power Name;

defaultarg: fpdef ["=" test];

//fpdef: NAME | "(" fplist ")"
fpdef: Name | "(" fplist ")";

//fplist: fpdef ("," fpdef)* [","]
fplist: fpdef (LL(2) "," fpdef)* [","<NONE>] ;


//stmt: simple_stmt | compound_stmt
stmt: simple_stmt | compound_stmt ;

simple_stmt: small_stmt (LL(2) ";" small_stmt)* [";"<NONE>] <NEWLINE>;

//small_stmt: expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt
small_stmt:
    expr_stmt
|   print_stmt
|   del_stmt
|   pass_stmt
|   flow_stmt
|   import_stmt
|   global_stmt
|   exec_stmt
|   assert_stmt;

//expr_stmt: testlist (augassign testlist | ("=" testlist)*)
expr_stmt :
    SmartTestList expr_stmtEnd;
 
expr_stmtEnd:
    <PLUSEQ> SmartTestList 
|   <MINUSEQ> SmartTestList 
|   <MULTIPLYEQ> SmartTestList 
|   <DIVIDEEQ> SmartTestList 
|   <FLOORDIVIDEEQ> SmartTestList 
|   <MODULOEQ> SmartTestList
|   <ANDEQ> SmartTestList
|   <OREQ> SmartTestList 
|   <XOREQ> SmartTestList 
|   <LSHIFTEQ> SmartTestList 
|   <RSHIFTEQ> SmartTestList 
|   <POWEREQ> SmartTestList 
|   ("=" SmartTestList)*;

//print_stmt: "print" (test ",")* [test] | "print" ">>" test (, test)+ [,]
print_stmt: 
    LL(2) <PRINT> <RSHIFT> test  [ print_stmtEndP  ]        
|   LL(2) <PRINT> print_stmtEndA
|   <PRINT>;

print_stmtEndP: (LL(2) "," test)+ [","<NONE>];
print_stmtEndA: test (LL(2) "," test)* [","<NONE>];

//del_stmt: "del" exprlist
del_stmt: 
 <DEL> exprlist;

//pass_stmt: "pass"
pass_stmt: 
 <PASS> ;

//flow_stmt: break_stmt | continue_stmt | return_stmt | yield_stmt | raise_stmt
flow_stmt : 

    <BREAK> 
|   <CONTINUE>
|   return_stmt
|   yield_stmt
|   raise_stmt;

//return_stmt: "return" [testlist]
return_stmt: 
 <RETURN> [SmartTestList];

//yield_stmt: "yield" [testlist]
yield_stmt: 
 <YIELD> SmartTestList ;

//raise_stmt: "raise" [test ["," test ["," test]]]
raise_stmt: 
 <RAISE> [ raise_stmt_end] ;
 
raise_stmt_end : test [","  testcommatest];
testcommatest: test ["," test];

//import_stmt: "import" dotted_name ("," dotted_name)* | "from" dotted_name "import" ("*" | NAME ("," NAME)*)
import_stmt : 
 <IMPORT> Import | <FROM> ImportFrom ;

Import: 
 dotted_as_name ("," dotted_as_name)* ;

ImportFrom:
    dotted_name <IMPORT> ImportFromEnd;

ImportFromEnd: "*" | import_as_name ("," import_as_name)*;

//dotted_as_name: dotted_name [NAME NAME]
dotted_as_name: 
 dotted_name ["as" Name] ;

//dotted_name: NAME ("." NAME)*
dotted_name:  AnyName   ("." AnyName)*;

//import_as_name: NAME [NAME NAME]
import_as_name:  AnyName ["as" Name];

//global_stmt: "global" NAME ("," NAME)*
global_stmt: 
 <GLOBAL> Name ("," Name)*;

//exec_stmt: "exec" expr ["in" test ["," test]]
exec_stmt: "exec" expr ["in" exec_stmt_end];
exec_stmt_end: test ["," test];

//assert_stmt: "assert" test ["," test]
assert_stmt:  "assert" test ["," test] ;

//compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | funcdef | classdef
compound_stmt :
	if_stmt | while_stmt | for_stmt | try_stmt  | funcdef | classdef;

//if_stmt: "if" test ":" suite ("elif" test ":" suite)* ["else" ":" suite]
if_stmt: 
    "if" test ":" suite
         (elif_stmt)* [ "else" ":" suite];
         
elif_stmt: "elif" test ":" suite;       
         
//while_stmt: "while" test ":" suite ["else" ":" suite]
while_stmt: "while" test ":" suite ["else" ":" suite];

//for_stmt: "for" exprlist "in" testlist ":" suite ["else" ":" suite]
for_stmt: 
 "for" exprlist "in" SmartTestList ":" suite
       ["else" ":" suite];


//try_stmt: ("try" ":" suite (except_clause ":" suite)+ #diagram:break
//           ["else" ":" suite] | "try" ":" suite "finally" ":" suite)
try_stmt: 
 "try" ":" suite tryEnd;
 
tryEnd:
    (except_clause)+ ["else" ":" suite]       
    | "finally" ":" suite;

//except_clause: "except" [test ["," test]]
except_clause: 
 "except" [testcommatest] ":" suite ;

//suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT
suite: 
	simple_stmt 
|  @+ <NEWLINE>
   JAVA("token_source.expect_indent = true;") <INDENT> JAVA("token_source.expect_indent = false;")  
   (stmt)+
  <DEDENT> @-;


//test: and_test ("or" and_test)* | lambdef
test : 
 lambdef | and_test ("or" and_test)*;

//and_test: not_test ("and" not_test)*
and_test: 
 not_test ("and" not_test)*;

//not_test: "not" not_test | comparison
not_test: 
 "not" not_test  | comparison ;

//comparison: expr (comp_op expr)*
comparison: expr (compEnd)*;
compEnd:comp_op expr;

//comp_op: "<"|">"|"=="|">="|"<="|"<>"|"!="|"in"|"not" "in"|"is"|"is" "not"
comp_op : 
    <LESS> 
|   <GREATER> 
|   <EQEQUAL> 
|   <EQGREATER> 
|   <EQLESS> 
|   <LESSGREATER> 
|   <NOTEQUAL>
|   <IN> 
|   "not" <IN>
|   LL(2) <IS> "not" 
|   <IS> ;

//expr: xor_expr ("|" xor_expr)*
expr : 
 xor_expr ("|" xor_expr)*; 

//xor_expr: and_expr ("^" and_expr)*
xor_expr :  and_expr ("^" and_expr )*;

//and_expr: shift_expr ("&" shift_expr)*
and_expr :  shift_expr ("&" shift_expr)* ;

//shift_expr: arith_expr (("<<"|">>") arith_expr)*
shift_expr :
    arith_expr (shift_exprEnd )*;
shift_exprEnd:    "<<" arith_expr |   ">>" arith_expr;

//arith_expr: term (("+"|"-") term)*
arith_expr :
    term (arith_exprEnd)*;
arith_exprEnd:<PLUS> term |   <MINUS> term; 

//term: factor (("*"|"/"|"%") factor)*
term : 
    factor  ( termEnd )*;

termEnd: "*" factor 
|   <DIVIDE> factor 
|   <FLOORDIVIDE> factor 
|   <MODULO> factor;

//factor: ("+"|"-"|"~") factor | power
factor : 
    <PLUS> factor
|   <MINUS> factor 
|   <NOT> factor 
|   powerfactor;

//power: atom trailer* ("**" factor)*
powerfactor :  atomtrailer (LL(2) "**" factor)* ;

//trailer: "(" [arglist] ")" | "[" subscriptlist "]" | "." NAME
atomtrailer: 
    atom ( atomtrailerEnd)*;
    
atomtrailerEnd:    LL(2) "(" ")" <NONE>
|   "(" arglist ")" 
|   "[" subscriptlist "]" 
|   <DOT> AnyName ;


//atom: "(" [testlist] ")" | "[" [testlist] "]" | "{" [dictmaker] "}" | "`" testlist "`" | NAME | NUMBER | STRING+
atom : 
    LL(2)   "(" ")" <NONE>
|   "(" [SmartTestList] ")" 
|    <LBRACKET> [listmaker] "]" 
|    "{" [dictmaker] "}"
|   "`" SmartTestList "`" 
|   Name
|   Number
|   StringNode (StringNode)*;


//lambdef: "lambda" [varargslist] ":" test
lambdef:
 <LAMBDA> [varargslist] ":" test ;

//subscriptlist: subscript ("," subscript)* [","]
subscriptlist : 
 subscript (LL(2) "," subscript)* [","<NONE>] ;

//subscript: "." "." "." | test | [test] ":" [test] [sliceop]
subscript : 
    <DOT> <DOT> <DOT> 
|   test (slice)?
|   slice ;

//sliceop: ":" [test]
slice : 
 ct [ct];

ct: ":" [test];
//Colon:  {":"}
//",":  {","}

//exprlist: expr ("," expr)* [","]
exprlist: 
 expr (LL(2) "," expr)* [","<NONE>];

//testlist: test ("," test)* [","]
SmartTestList: 
 test (LL(2) "," test)* [","<NONE>];

//testlist: test ("," test)* [","]
testlist : 
 test (LL(2) "," test)* [","<NONE>];

//dictmaker: test ":" test ("," test ":" test)* [","]
dictmaker: 
 test ":" test (LL(2) dictInt)* [","<NONE>];

dictInt: "," test ":" test;

//listmaker: test ( list_for | ("," test)* [","<NONE>] )
listmaker : 
  test  listmakerEnd;
 
listmakerEnd: (list_for)+ | (LL(2) "," test)* [","<NONE>]; 

//list_iter: [list_for | list_if]
//list_iter #void: 
//{ [ (list_for | list_if) ] }

//list_for: "for" exprlist "in" testlist list_iter
list_for: 
  "for" exprlist "in" SmartTestList (list_if)*;

//list_if: "if" test list_iter
list_if : 
 "if" test ;


//classdef: "class" NAME ["(" testlist ")"] ":" suite
classdef: 
 "class" Name ["(" testlist ")"] ":" suite;

//arglist: (argument ",")*
//              (argument [","]| "*" test ["," "**" test] | "**" test)
arglist : 
    normalargs [arglist1End]
|   [LL(2) arglist1EndEnd];


arglist1End:
  ","  [LL(2) arglist1EndEnd];
  
arglist1EndEnd: LL(2) ExtraArgValueList [ "," ExtraKeywordValueList ] | ExtraKeywordValueList;

normalargs : 
 argument (LL(2) "," argument)* ;

ExtraArgValueList: 
 "*" test ;

ExtraKeywordValueList: 
 power test ;
 
 power: "**"<NONE>|"*" "*" <NONE>;


//argument: [test "="] test     # Really [keyword "="] test
argument : 
 [LL(2) AnyName "="] test;


Number :
        <HEXNUMBER> | <OCTNUMBER> | <DECNUMBER> | <FLOAT> | <COMPLEX> ;
        
Complex: 
 <FLOAT> ;

Name:
   <NAME> | <AS>;

StringNode :<SINGLE_STRING> |
		<SINGLE_STRING2> |
		<TRIPLE_STRING> |
		<TRIPLE_STRING2> |
		<SINGLE_USTRING> |
		<SINGLE_USTRING2>|
		<TRIPLE_USTRING>|
		<TRIPLE_USTRING2>;

AnyName:<NAME> |"or" 
|    "and" 
|    "not" 
|    <IS> 
|    <IN> 
|    <LAMBDA> 
|    <IF> 
|    <ELSE> 
|    <ELIF> 
|    <WHILE> 
|    <FOR> 
|    <TRY> 
|    <EXCEPT> 
|    <DEF> 
|    <CLASS> 
|    <FINALLY> 
|    <PRINT> 
|    <PASS> 
|    <BREAK> 
|    <CONTINUE> 
|    <RETURN> 
|    <YIELD> 
|    <IMPORT> 
|    <FROM> 
|    <DEL> 
|    <RAISE> 
|    <GLOBAL> 
|    <EXEC> 
|    <ASSERT> 
|    <AS> ;












