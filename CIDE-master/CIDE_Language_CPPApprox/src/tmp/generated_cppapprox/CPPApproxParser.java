/* Generated By:JavaCC: Do not edit this line. CPPApproxParser.java */
package tmp.generated_cppapprox;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

  public class CPPApproxParser implements CPPApproxParserConstants {

    // Run the parser
    public static void main ( String args [ ] ) {
      CPPApproxParser parser ;


      if(args.length == 0){
        System.out.println("C (approx) Parser Version 0.1Alpha:  Reading from standard input . . .");
        parser = new CPPApproxParser(new OffsetCharStream(System.in));
      }
      else if(args.length == 1){
        System.out.println("C (approx) Parser Version 0.1Alpha:  Reading from file " + args[0] + " . . ." );
      try {
        parser = new CPPApproxParser(new OffsetCharStream(new java.io.FileInputStream(args[0])));
      }
      catch(java.io.FileNotFoundException e){
        System.out.println("C (approx) Parser Version 0.1:  File " + args[0] + " not found.");
        return ;
        }
      }
      else {
        System.out.println("C (approx) Parser Version 0.1Alpha:  Usage is one of:");
        System.out.println("         java CParser < inputfile");
        System.out.println("OR");
        System.out.println("         java CParser inputfile");
        return ;
      }
      try {
        parser.TranslationUnit();
        System.out.println("C (approx) Parser Version 0.1Alpha:  Java program parsed successfully.");
      }
      catch(ParseException e){
        System.out.println("C (approx) Parser Version 0.1Alpha:  Encountered errors during parse.");
        e.printStackTrace();
      }
    }

       public ISourceFile getRoot() throws ParseException {
                return TranslationUnit();
        }


         /**
     * Append the given {@link Token} and any preceding special tokens to a
     * given {@link StringBuffer}.
     *
     * @param token the given JavaCC {@link Token} object
     * @param buffer the buffer to which to append <code>token</code>
     **/
    final private static void accumulate (Token token, StringBuffer buffer) {

        // Append preceding special tokens to <code>buffer</code>:
        //
        Token special = firstSpecial (token) ;
        if (special != token)
            while (special != null) {
                buffer.append (special.toString ()) ;
                special = special.next ;
            }

        // Finally, append the token itself:
        //
        buffer.append (token.toString ()) ;
    }

    /**
     * Accumulate {@list Token} objects from the token stream, respecting
     * nested code inside <code>open</code> and <code>close</code> pairs,
     * until an unmatched <code>close</code> is the next token in the stream.
     * This method assumes that an <code>open</code> token has just been read
     * from the stream so the initial nesting level is 1.  The method returns
     * when a matching <code>close</code> token is the next token in the token
     * stream.  <em>The <code>close</code> token is left in the stream!</em>
     *
     * @return the accumulated tokens as a {@link String}.
     *
     * @throws ParseException
     * if an end-of-file is found before an unmatched <code>close</code> token.
     **/
    final private Token accumulateNestedRegion (int open, int close)
    throws ParseException {

        StringBuffer buffer = new StringBuffer () ;

        // Initialize result with known information (starting position, etc.):
        //
        Token result = Token.newToken (OTHER) ;
        result.specialToken = null ;

        Token startToken = firstSpecial (getToken (1)) ;
        result.beginColumn = startToken.beginColumn ;
        result.beginLine = startToken.beginLine ;

        // Accumulate tokens until a <code>close</code> token is found:
        //
        for (int nesting = 1 ; nesting > 0 ; ) {

            getNextToken () ;

            // Update information in result:
            //
            result.endColumn = token.endColumn ;
            result.endLine = token.endLine ;
            result.next = token.next ;

            if (token.kind == EOF)
                throw new ParseException (
                    "accumulating from line "
                    + result.beginLine
                    + " at column "
                    + result.beginColumn
                    + ": EOF reached before ending "
                    + tokenImage [close]
                    + " found"
                ) ;

                accumulate (token, buffer) ;
            if (token.kind == open)
                        ++ nesting ;
            else if (token.kind == close) {
                        if (nesting == 1)
                        break ;
                        -- nesting ;
            }



        }

        result.image = buffer.toString () ;
        return result ;
    }

    /**
     * Accumulate {@link Token} objects from the token stream until a token
     * matching <code>tokenKind</code> is consumed from the stream.  The
     * tokens are accumulated in <code>buffer</code>, including the terminating
     * token.
     *
     * @return a {@link Token}
     * formed by concatenating all intervening tokens and special tokens.
     **/
    final private Token accumulateUntilToken (int tokenKind)
    throws ParseException {

        StringBuffer buffer = new StringBuffer () ;
        Token token = getNextToken () ;

        // Initialize result with known information (starting position, etc.):
        //
        Token result = Token.newToken (OTHER) ;
        result.specialToken = null ;

        Token startToken = firstSpecial (token) ;
        result.beginColumn = startToken.beginColumn ;
        result.beginLine = startToken.beginLine ;

        // Accumulate tokens until a <code>tokenKind</code> token is found:
        //
        while (token.kind != tokenKind) {

            // Update information in result:
            //
            result.endColumn = token.endColumn ;
            result.endLine = token.endLine ;
            result.next = token.next ;

            if (token.kind == EOF)
                throw new ParseException (
                    "from line "
                    + result.beginLine
                    + " at column "
                    + result.beginColumn
                    + ": EOF reached before "
                    + tokenImage [tokenKind]
                    + " found"
                ) ;

            accumulate (token, buffer) ;
            token = getNextToken () ;
        }

        accumulate (token, buffer) ;

        result.image = buffer.toString () ;
        return result ;
    }
        /**
	 * finds the end of the current line for preprocessor instructions. handles
	 * also multiline makros ending with \
	 * 
	 * @return
	 * @throws ParseException
	 */
        final private Token accumulateUntilLineEnd() throws ParseException {
                StringBuffer buffer = new StringBuffer();
                Token nextToken = peekNext();

                // Initialize result with known information (starting position, etc.):
                //
                Token result = Token.newToken(OTHER);
                result.specialToken = null;

                Token startToken = firstSpecial(nextToken);
                result.beginColumn = startToken.beginColumn;
                result.beginLine = startToken.beginLine;

                // Accumulate tokens until a <code>tokenKind</code> token is found:
                //
                while (!preceededByLinebreak(nextToken) || token.image.equals("\\")) {
                        getNextToken();

                        // Update information in result:
                        //
                        result.endColumn = token.endColumn;
                        result.endLine = token.endLine;
                        result.next = token.next;

                        if (token.kind == EOF)
                                throw new ParseException("from line " + result.beginLine
                                                + " at column " + result.beginColumn
                                                + ": EOF reached before special token" + " found");

                        accumulate(token, buffer);
                        nextToken = peekNext();
                }

                result.image = buffer.toString();
                return result;
        }

        private boolean preceededByLinebreak(Token t) {
                assert t != null;
                Token specialToken = t.specialToken;
                while (specialToken != null) {
                        if (specialToken.image.indexOf('\n')>=0)
                                return true;
                        specialToken = specialToken.specialToken;
                }
                return false;
        }
        private Token peekNext() {
                if (token.next == null)
                        token.next = token_source.getNextToken();
                return token.next;
        }
    /**
     * Finds the first token, special or otherwise, in the list of special
     * tokens preceding this {@link Token}.  If this list is non-empty, the
     * result will be a special token.  Otherwise, it will be the starting
     * token.
     *
     * @param token the given {@link Token}.
     * @return the first special token preceding <code>token</code>.
     **/
    final private static Token firstSpecial (Token token) {

        while (token.specialToken != null)
            token = token.specialToken ;

        return token ;
    }

  Token findEndGT() throws ParseException {
    return accumulateNestedRegion (LT, GT) ;
  }

  Token findLineEnd() throws ParseException {
    return accumulateUntilLineEnd() ;
  }

  Token findEndCB() throws ParseException {
    return accumulateNestedRegion(OB, CB) ;
  }

  Token findEndCCB() throws ParseException {
    return accumulateNestedRegion(OCB, CCB) ;
  }

  final public TranslationUnit TranslationUnit() throws ParseException {
        Sequence_CodeUnit_TopLevel sequence_CodeUnit_TopLevel;
        Token t;
        ASTStringNode eof;
        Token firstToken=token;
    sequence_CodeUnit_TopLevel = Sequence_CodeUnit_TopLevel();
    t = jj_consume_token(0);
                                                                        eof=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TranslationUnit(sequence_CodeUnit_TopLevel, eof, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Sequence_CodeUnit_TopLevel Sequence_CodeUnit_TopLevel() throws ParseException {
        CodeUnit_TopLevel codeUnit_TopLevel;
        ArrayList<CodeUnit_TopLevel> codeUnit_TopLevelList = new ArrayList<CodeUnit_TopLevel>();
        Token firstToken=token;
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      codeUnit_TopLevel = CodeUnit_TopLevel();
                                                            codeUnit_TopLevelList.add(codeUnit_TopLevel);
    }
         {if (true) return new Sequence_CodeUnit_TopLevel(codeUnit_TopLevelList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CodeUnit_TopLevel CodeUnit_TopLevel() throws ParseException {
        PPIncludeStatement pPIncludeStatement;
        PPDefineStatement pPDefineStatement;
        PPIfDef_TopLevel pPIfDef_TopLevel;
        PPOtherIgnore pPOtherIgnore;
        Token t;
        ASTStringNode findlineend;
        TemplateDecl templateDecl;
        Function function;
        OperatorOverloading operatorOverloading;
        TypeDef typeDef;
        CPPClassForwardDecl cPPClassForwardDecl;
        CPPClass cPPClass;
        ExternDecl externDecl;
        Statement statement;
        Token firstToken=token;
    if (jj_2_2(2)) {
      pPIncludeStatement = PPIncludeStatement();
         {if (true) return new Include(pPIncludeStatement, firstToken.next,token);}
    } else if (jj_2_3(2)) {
      pPDefineStatement = PPDefineStatement();
         {if (true) return new Define(pPDefineStatement, firstToken.next,token);}
    } else if (jj_2_4(2)) {
      pPIfDef_TopLevel = PPIfDef_TopLevel();
         {if (true) return new IfDefTL(pPIfDef_TopLevel, firstToken.next,token);}
    } else if (jj_2_5(2)) {
      jj_consume_token(HASH);
      pPOtherIgnore = PPOtherIgnore();
      t = findLineEnd();
                                                                       findlineend=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Preprocessor(pPOtherIgnore, findlineend, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEMPLATE:
        templateDecl = TemplateDecl();
         {if (true) return new CodeUnit_TopLevel5(templateDecl, firstToken.next,token);}
        break;
      default:
        jj_la1[0] = jj_gen;
        if (jj_2_6(2147483647)) {
          function = Function();
         {if (true) return new Func(function, firstToken.next,token);}
        } else if (jj_2_7(2147483647)) {
          operatorOverloading = OperatorOverloading();
         {if (true) return new OperatorDef(operatorOverloading, firstToken.next,token);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TYPEDEF:
            typeDef = TypeDef();
         {if (true) return new TypeDef_(typeDef, firstToken.next,token);}
            break;
          default:
            jj_la1[1] = jj_gen;
            if (jj_2_8(3)) {
              cPPClassForwardDecl = CPPClassForwardDecl();
         {if (true) return new CodeUnit_TopLevel9(cPPClassForwardDecl, firstToken.next,token);}
            } else if (jj_2_9(2147483647)) {
              cPPClass = CPPClass();
         {if (true) return new CodeUnit_TopLevel10(cPPClass, firstToken.next,token);}
            } else if (jj_2_10(3)) {
              externDecl = ExternDecl();
         {if (true) return new ExternDec(externDecl, firstToken.next,token);}
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LITERAL:
              case INCLUDE:
              case DEFINE:
              case IFDEF:
              case IFNDEF:
              case ELIF:
              case ELSIF:
              case PPLINE:
              case PPPRAGMA:
              case PPERROR:
              case ENUM:
              case EXTERN:
              case UNSIGNED:
              case CONST:
              case STATIC:
              case STRUCT:
              case INLINE:
              case INLINE2:
              case INLINE3:
              case WEIREDSTUFF2:
              case WEIREDSTUFF3:
              case IF:
              case ELSE:
              case FOR:
              case WHILE:
              case CLASS:
              case PRIVATE:
              case PROTECTED:
              case PUBLIC:
              case VIRTUAL:
              case OPERATOR:
              case SEMI:
              case COLON:
              case COMMA:
              case LT:
              case GT:
              case OB:
              case CB:
              case OCB:
              case STAR:
              case EQ:
              case PIPE:
              case AMP:
              case IDENTIFIER:
              case SYMBOLS:
              case OTHER:
                statement = Statement();
         {if (true) return new StmtTL(statement, firstToken.next,token);}
                break;
              default:
                jj_la1[2] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public CodeUnit_InBlock CodeUnit_InBlock() throws ParseException {
        PPIfDef_BlockLevel pPIfDef_BlockLevel;
        PPIncludeStatement pPIncludeStatement;
        PPDefineStatement pPDefineStatement;
        PPOtherIgnore pPOtherIgnore;
        Token t;
        ASTStringNode findlineend;
        TypeDef typeDef;
        IfStatement ifStatement;
        ForStatement forStatement;
        WhileStatement whileStatement;
        DoStatement doStatement;
        SwitchStatement switchStatement;
        GotoLabel gotoLabel;
        Block block;
        Statement statement;
        Token firstToken=token;
    if (jj_2_11(2)) {
      pPIfDef_BlockLevel = PPIfDef_BlockLevel();
         {if (true) return new IfDefBL(pPIfDef_BlockLevel, firstToken.next,token);}
    } else if (jj_2_12(2)) {
      pPIncludeStatement = PPIncludeStatement();
         {if (true) return new IncludeBL(pPIncludeStatement, firstToken.next,token);}
    } else if (jj_2_13(2)) {
      pPDefineStatement = PPDefineStatement();
         {if (true) return new DefineBL(pPDefineStatement, firstToken.next,token);}
    } else if (jj_2_14(2)) {
      jj_consume_token(HASH);
      pPOtherIgnore = PPOtherIgnore();
      t = findLineEnd();
                                                                       findlineend=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new PreprocessorBL(pPOtherIgnore, findlineend, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEDEF:
        typeDef = TypeDef();
         {if (true) return new TypeDefInBlock(typeDef, firstToken.next,token);}
        break;
      case IF:
        ifStatement = IfStatement();
         {if (true) return new If(ifStatement, firstToken.next,token);}
        break;
      case FOR:
        forStatement = ForStatement();
         {if (true) return new For(forStatement, firstToken.next,token);}
        break;
      case WHILE:
        whileStatement = WhileStatement();
         {if (true) return new While(whileStatement, firstToken.next,token);}
        break;
      case DO:
        doStatement = DoStatement();
         {if (true) return new Do(doStatement, firstToken.next,token);}
        break;
      case SWITCH:
        switchStatement = SwitchStatement();
         {if (true) return new Switch(switchStatement, firstToken.next,token);}
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_15(2)) {
          gotoLabel = GotoLabel();
         {if (true) return new CodeUnit_InBlock11(gotoLabel, firstToken.next,token);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OCB:
            block = Block();
         {if (true) return new Blck(block, firstToken.next,token);}
            break;
          case LITERAL:
          case INCLUDE:
          case DEFINE:
          case IFDEF:
          case IFNDEF:
          case ELIF:
          case ELSIF:
          case PPLINE:
          case PPPRAGMA:
          case PPERROR:
          case ENUM:
          case EXTERN:
          case UNSIGNED:
          case CONST:
          case STATIC:
          case STRUCT:
          case INLINE:
          case INLINE2:
          case INLINE3:
          case WEIREDSTUFF2:
          case WEIREDSTUFF3:
          case IF:
          case ELSE:
          case FOR:
          case WHILE:
          case CLASS:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case VIRTUAL:
          case OPERATOR:
          case SEMI:
          case COLON:
          case COMMA:
          case LT:
          case GT:
          case OB:
          case CB:
          case STAR:
          case EQ:
          case PIPE:
          case AMP:
          case IDENTIFIER:
          case SYMBOLS:
          case OTHER:
            statement = Statement();
         {if (true) return new Stmt(statement, firstToken.next,token);}
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
        AnyStmtToken anyStmtToken;
        ArrayList<AnyStmtToken> anyStmtTokenList = new ArrayList<AnyStmtToken>();
        Token firstToken=token;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
      case INCLUDE:
      case DEFINE:
      case IFDEF:
      case IFNDEF:
      case ELIF:
      case ELSIF:
      case PPLINE:
      case PPPRAGMA:
      case PPERROR:
      case ENUM:
      case EXTERN:
      case UNSIGNED:
      case CONST:
      case STATIC:
      case STRUCT:
      case INLINE:
      case INLINE2:
      case INLINE3:
      case WEIREDSTUFF2:
      case WEIREDSTUFF3:
      case IF:
      case ELSE:
      case FOR:
      case WHILE:
      case CLASS:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case VIRTUAL:
      case OPERATOR:
      case COLON:
      case COMMA:
      case LT:
      case GT:
      case OB:
      case CB:
      case OCB:
      case STAR:
      case EQ:
      case PIPE:
      case AMP:
      case IDENTIFIER:
      case SYMBOLS:
      case OTHER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      anyStmtToken = AnyStmtToken();
                                     anyStmtTokenList.add(anyStmtToken);
    }
    jj_consume_token(SEMI);
         {if (true) return new Statement(anyStmtTokenList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public IfStatement IfStatement() throws ParseException {
        Token t;
        ASTStringNode findendcb;
        BlockOrSingleStatement blockOrSingleStatement;
        ElseBlock elseBlock = null;
        Token firstToken=token;
    jj_consume_token(IF);
    jj_consume_token(OB);
    t = findEndCB();
                               findendcb=new ASTStringNode(t.image,new WToken(t));
    blockOrSingleStatement = BlockOrSingleStatement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      elseBlock = ElseBlock();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
         {if (true) return new IfStatement(findendcb, blockOrSingleStatement, elseBlock, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ElseBlock ElseBlock() throws ParseException {
        Token firstToken=token;
    jj_consume_token(ELSE);
         {if (true) return new ElseBlock(firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ForStatement ForStatement() throws ParseException {
        Token t;
        ASTStringNode findendcb;
        BlockOrSingleStatement blockOrSingleStatement;
        Token firstToken=token;
    jj_consume_token(FOR);
    jj_consume_token(OB);
    t = findEndCB();
                                findendcb=new ASTStringNode(t.image,new WToken(t));
    blockOrSingleStatement = BlockOrSingleStatement();
         {if (true) return new ForStatement(findendcb, blockOrSingleStatement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public WhileStatement WhileStatement() throws ParseException {
        Token t;
        ASTStringNode findendcb;
        BlockOrSingleStatement blockOrSingleStatement;
        Token firstToken=token;
    jj_consume_token(WHILE);
    jj_consume_token(OB);
    t = findEndCB();
                                  findendcb=new ASTStringNode(t.image,new WToken(t));
    blockOrSingleStatement = BlockOrSingleStatement();
         {if (true) return new WhileStatement(findendcb, blockOrSingleStatement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public DoStatement DoStatement() throws ParseException {
        BlockOrSingleStatement blockOrSingleStatement;
        Token t;
        ASTStringNode findendcb;
        Token firstToken=token;
    jj_consume_token(DO);
    blockOrSingleStatement = BlockOrSingleStatement();
    jj_consume_token(WHILE);
    jj_consume_token(OB);
    t = findEndCB();
                                                                                       findendcb=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(SEMI);
         {if (true) return new DoStatement(blockOrSingleStatement, findendcb, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchStatement SwitchStatement() throws ParseException {
        Token t;
        ASTStringNode findendcb;
        SwCase swCase;
        ArrayList<SwCase> swCaseList = new ArrayList<SwCase>();
        Token firstToken=token;
    jj_consume_token(SWITCH);
    jj_consume_token(OB);
    t = findEndCB();
                                   findendcb=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(OCB);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case SWDEFAULT:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      swCase = SwCase();
                                                                                                             swCaseList.add(swCase);
    }
    jj_consume_token(CCB);
         {if (true) return new SwitchStatement(findendcb, swCaseList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public SwCase SwCase() throws ParseException {
        Sequence_CodeUnit_InBlock sequence_CodeUnit_InBlock;
        Token t;
        ASTStringNode identifier = null;
        SwCaseLabel swCaseLabel;
        MoreSwCaseLabel moreSwCaseLabel;
        ArrayList<MoreSwCaseLabel> moreSwCaseLabelList = new ArrayList<MoreSwCaseLabel>();
        Sequence_CodeUnit_InBlock sequence_CodeUnit_InBlock1;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SWDEFAULT:
      jj_consume_token(SWDEFAULT);
      jj_consume_token(COLON);
      sequence_CodeUnit_InBlock = Sequence_CodeUnit_InBlock();
         {if (true) return new SwCase1(sequence_CodeUnit_InBlock, firstToken.next,token);}
      break;
    case CASE:
      jj_consume_token(CASE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OB:
        jj_consume_token(OB);
        t = jj_consume_token(IDENTIFIER);
                                                identifier=new ASTStringNode(t.image,new WToken(t));
        jj_consume_token(CB);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      swCaseLabel = SwCaseLabel();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PIPE:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        moreSwCaseLabel = MoreSwCaseLabel();
                                                                                                                                                                        moreSwCaseLabelList.add(moreSwCaseLabel);
      }
      jj_consume_token(COLON);
      sequence_CodeUnit_InBlock1 = Sequence_CodeUnit_InBlock();
         {if (true) return new SwCase2(identifier, swCaseLabel, moreSwCaseLabelList, sequence_CodeUnit_InBlock1, firstToken.next,token);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SwCaseLabel SwCaseLabel() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ASTStringNode other = null;
        ASTStringNode literal;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new SwCaseLabel1(identifier, firstToken.next,token);}
      break;
    case LITERAL:
    case OTHER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER:
        t = jj_consume_token(OTHER);
                   other=new ASTStringNode(t.image,new WToken(t));
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      t = jj_consume_token(LITERAL);
                                                                                 literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new SwCaseLabel2(other, literal, firstToken.next,token);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MoreSwCaseLabel MoreSwCaseLabel() throws ParseException {
        SwCaseLabel swCaseLabel;
        Token firstToken=token;
    jj_consume_token(PIPE);
    swCaseLabel = SwCaseLabel();
         {if (true) return new MoreSwCaseLabel(swCaseLabel, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TemplateDecl TemplateDecl() throws ParseException {
        TemplateArgs templateArgs = null;
        Token firstToken=token;
    jj_consume_token(TEMPLATE);
    jj_consume_token(LT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
    case IDENTIFIER:
      templateArgs = TemplateArgs();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(GT);
         {if (true) return new TemplateDecl(templateArgs, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TemplateArgs TemplateArgs() throws ParseException {
        TemplateArg templateArg;
        TemplateArg templateArg1;
        ArrayList<TemplateArg> templateArg1List = new ArrayList<TemplateArg>();
        Token firstToken=token;
    templateArg = TemplateArg();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      templateArg1 = TemplateArg();
                                                                  templateArg1List.add(templateArg1);
    }
         {if (true) return new TemplateArgs(templateArg, templateArg1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TemplateArg TemplateArg() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ASTStringNode identifier1;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      jj_consume_token(CLASS);
      t = jj_consume_token(IDENTIFIER);
                               identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TemplateArg1(identifier, firstToken.next,token);}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier1=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TemplateArg2(identifier1, firstToken.next,token);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExternDecl ExternDecl() throws ParseException {
        Token t;
        ASTStringNode literal;
        Block block;
        Token firstToken=token;
    jj_consume_token(EXTERN);
    t = jj_consume_token(LITERAL);
                             literal=new ASTStringNode(t.image,new WToken(t));
    block = Block();
         {if (true) return new ExternDecl(literal, block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PPIncludeStatement PPIncludeStatement() throws ParseException {
        Token t;
        ASTStringNode findlineend;
        Token firstToken=token;
    jj_consume_token(HASH);
    jj_consume_token(INCLUDE);
    t = findLineEnd();
                                      findlineend=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new PPIncludeStatement(findlineend, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PPDefineStatement PPDefineStatement() throws ParseException {
        Token t;
        ASTStringNode findlineend;
        ASTStringNode findlineend1;
        Token firstToken=token;
    if (jj_2_16(2)) {
      jj_consume_token(HASH);
      jj_consume_token(DEFINE);
      t = findLineEnd();
                                                  findlineend=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new PPDefineStatement1(findlineend, firstToken.next,token);}
    } else if (jj_2_17(2)) {
      jj_consume_token(HASH);
      jj_consume_token(PPUNDEF);
      t = findLineEnd();
                                                 findlineend1=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new PPDefineStatement2(findlineend1, firstToken.next,token);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PPIfDef_TopLevel PPIfDef_TopLevel() throws ParseException {
        IfDefLine ifDefLine;
        Sequence_CodeUnit_TopLevel sequence_CodeUnit_TopLevel;
        IfElseIf_TopLevel ifElseIf_TopLevel;
        ArrayList<IfElseIf_TopLevel> ifElseIf_TopLevelList = new ArrayList<IfElseIf_TopLevel>();
        Sequence_CodeUnit_TopLevel sequence_CodeUnit_TopLevel1 = null;
        Token firstToken=token;
    ifDefLine = IfDefLine();
    sequence_CodeUnit_TopLevel = Sequence_CodeUnit_TopLevel();
    label_6:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_6;
      }
      ifElseIf_TopLevel = IfElseIf_TopLevel();
                                                                                                                                          ifElseIf_TopLevelList.add(ifElseIf_TopLevel);
    }
    if (jj_2_19(2)) {
      jj_consume_token(HASH);
      jj_consume_token(ELSE);
      sequence_CodeUnit_TopLevel1 = Sequence_CodeUnit_TopLevel();
    } else {
      ;
    }
    jj_consume_token(HASH);
    jj_consume_token(ENDIF);
         {if (true) return new PPIfDef_TopLevel(ifDefLine, sequence_CodeUnit_TopLevel, ifElseIf_TopLevelList, sequence_CodeUnit_TopLevel1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PPIfDef_BlockLevel PPIfDef_BlockLevel() throws ParseException {
        IfDefLine ifDefLine;
        Sequence_CodeUnit_InBlock sequence_CodeUnit_InBlock;
        IfElseIf_BlockLevel ifElseIf_BlockLevel;
        ArrayList<IfElseIf_BlockLevel> ifElseIf_BlockLevelList = new ArrayList<IfElseIf_BlockLevel>();
        Sequence_CodeUnit_InBlock sequence_CodeUnit_InBlock1 = null;
        Token firstToken=token;
    ifDefLine = IfDefLine();
    sequence_CodeUnit_InBlock = Sequence_CodeUnit_InBlock();
    label_7:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_7;
      }
      ifElseIf_BlockLevel = IfElseIf_BlockLevel();
                                                                                                                                            ifElseIf_BlockLevelList.add(ifElseIf_BlockLevel);
    }
    if (jj_2_21(2)) {
      jj_consume_token(HASH);
      jj_consume_token(ELSE);
      sequence_CodeUnit_InBlock1 = Sequence_CodeUnit_InBlock();
    } else {
      ;
    }
    jj_consume_token(HASH);
    jj_consume_token(ENDIF);
         {if (true) return new PPIfDef_BlockLevel(ifDefLine, sequence_CodeUnit_InBlock, ifElseIf_BlockLevelList, sequence_CodeUnit_InBlock1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PPOtherIgnore PPOtherIgnore() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PPLINE:
      jj_consume_token(PPLINE);
         {if (true) return new PPOtherIgnore1(firstToken.next,token);}
      break;
    case PPPRAGMA:
      jj_consume_token(PPPRAGMA);
         {if (true) return new PPOtherIgnore2(firstToken.next,token);}
      break;
    case PPERROR:
      jj_consume_token(PPERROR);
         {if (true) return new PPOtherIgnore3(firstToken.next,token);}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IfDefLine IfDefLine() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ASTStringNode identifier1;
        ASTStringNode findlineend;
        Token firstToken=token;
    if (jj_2_22(2)) {
      jj_consume_token(HASH);
      jj_consume_token(IFDEF);
      t = jj_consume_token(IDENTIFIER);
                                                identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new IfDefLine1(identifier, firstToken.next,token);}
    } else if (jj_2_23(2)) {
      jj_consume_token(HASH);
      jj_consume_token(IFNDEF);
      t = jj_consume_token(IDENTIFIER);
                                                 identifier1=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new IfDefLine2(identifier1, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HASH:
        jj_consume_token(HASH);
        jj_consume_token(IF);
        t = findLineEnd();
                                 findlineend=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new IfDefLine3(findlineend, firstToken.next,token);}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public IfElseIf IfElseIf() throws ParseException {
        Token firstToken=token;
    if (jj_2_24(2)) {
      jj_consume_token(HASH);
      jj_consume_token(ELIF);
         {if (true) return new IfElseIf1(firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HASH:
        jj_consume_token(HASH);
        jj_consume_token(ELSIF);
         {if (true) return new IfElseIf2(firstToken.next,token);}
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public IfElseIf_BlockLevel IfElseIf_BlockLevel() throws ParseException {
        IfElseIf ifElseIf;
        Token t;
        ASTStringNode findlineend;
        Sequence_CodeUnit_InBlock sequence_CodeUnit_InBlock;
        Token firstToken=token;
    ifElseIf = IfElseIf();
    t = findLineEnd();
                                            findlineend=new ASTStringNode(t.image,new WToken(t));
    sequence_CodeUnit_InBlock = Sequence_CodeUnit_InBlock();
         {if (true) return new IfElseIf_BlockLevel(ifElseIf, findlineend, sequence_CodeUnit_InBlock, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public IfElseIf_TopLevel IfElseIf_TopLevel() throws ParseException {
        IfElseIf ifElseIf;
        Token t;
        ASTStringNode findlineend;
        Sequence_CodeUnit_TopLevel sequence_CodeUnit_TopLevel;
        Token firstToken=token;
    ifElseIf = IfElseIf();
    t = findLineEnd();
                                            findlineend=new ASTStringNode(t.image,new WToken(t));
    sequence_CodeUnit_TopLevel = Sequence_CodeUnit_TopLevel();
         {if (true) return new IfElseIf_TopLevel(ifElseIf, findlineend, sequence_CodeUnit_TopLevel, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Constructor Constructor() throws ParseException {
        ConstructorHeader constructorHeader;
        FunctionParameterList functionParameterList = null;
        ConstructorInitializer constructorInitializer = null;
        BlockOrSemi blockOrSemi;
        Token firstToken=token;
    constructorHeader = ConstructorHeader();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL:
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
    case ENUM:
    case EXTERN:
    case UNSIGNED:
    case CONST:
    case STATIC:
    case STRUCT:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case WEIREDSTUFF3:
    case VIRTUAL:
    case OB:
    case STAR:
    case EQ:
    case PIPE:
    case AMP:
    case IDENTIFIER:
    case SYMBOLS:
    case OTHER:
      functionParameterList = FunctionParameterList();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(CB);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      constructorInitializer = ConstructorInitializer();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    blockOrSemi = BlockOrSemi();
         {if (true) return new Constructor(constructorHeader, functionParameterList, constructorInitializer, blockOrSemi, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorHeader ConstructorHeader() throws ParseException {
        Modifier modifier;
        ArrayList<Modifier> modifierList = new ArrayList<Modifier>();
        FunctionExoticStuff functionExoticStuff = null;
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERN:
      case STATIC:
      case INLINE:
      case INLINE2:
      case INLINE3:
      case WEIREDSTUFF2:
      case WEIREDSTUFF3:
      case VIRTUAL:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      modifier = Modifier();
                             modifierList.add(modifier);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WEIREDSTUFF1:
      functionExoticStuff = FunctionExoticStuff();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                                                                                                                                    identifier=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(OB);
         {if (true) return new ConstructorHeader(modifierList, functionExoticStuff, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorInitializer ConstructorInitializer() throws ParseException {
        memoryInitializerList memoryInitializerList;
        Token firstToken=token;
    jj_consume_token(COLON);
    memoryInitializerList = memoryInitializerList();
         {if (true) return new ConstructorInitializer(memoryInitializerList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public memoryInitializerList memoryInitializerList() throws ParseException {
        memoryInitializer memoryInitializer;
        ArrayList<memoryInitializer> list0=new ArrayList<memoryInitializer>();
        memoryInitializer memoryInitializer1;
        ArrayList<memoryInitializer> memoryInitializer1List = new ArrayList<memoryInitializer>();
        Token firstToken=token;
    memoryInitializer = memoryInitializer();
                                              list0.add(memoryInitializer);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      memoryInitializer1 = memoryInitializer();
                                                                                                                                      list0.add(memoryInitializer1);
    }
         {if (true) return new memoryInitializerList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public memoryInitializer memoryInitializer() throws ParseException {
        Token t;
        ASTStringNode identifier;
        FunctionParameterList functionParameterList = null;
        Token firstToken=token;
    t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(OB);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL:
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
    case ENUM:
    case EXTERN:
    case UNSIGNED:
    case CONST:
    case STATIC:
    case STRUCT:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case WEIREDSTUFF3:
    case VIRTUAL:
    case OB:
    case STAR:
    case EQ:
    case PIPE:
    case AMP:
    case IDENTIFIER:
    case SYMBOLS:
    case OTHER:
      functionParameterList = FunctionParameterList();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(CB);
         {if (true) return new memoryInitializer(identifier, functionParameterList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Function Function() throws ParseException {
        FunctionHeader functionHeader;
        FunctionParameterList functionParameterList = null;
        BlockOrSemi blockOrSemi;
        Token firstToken=token;
    functionHeader = FunctionHeader();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL:
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
    case ENUM:
    case EXTERN:
    case UNSIGNED:
    case CONST:
    case STATIC:
    case STRUCT:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case WEIREDSTUFF3:
    case VIRTUAL:
    case OB:
    case STAR:
    case EQ:
    case PIPE:
    case AMP:
    case IDENTIFIER:
    case SYMBOLS:
    case OTHER:
      functionParameterList = FunctionParameterList();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(CB);
    blockOrSemi = BlockOrSemi();
         {if (true) return new Function(functionHeader, functionParameterList, blockOrSemi, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionHeader FunctionHeader() throws ParseException {
        Modifier modifier;
        ArrayList<Modifier> modifierList = new ArrayList<Modifier>();
        FunctionReturnType functionReturnType;
        FunctionExoticStuff functionExoticStuff = null;
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERN:
      case STATIC:
      case INLINE:
      case INLINE2:
      case INLINE3:
      case WEIREDSTUFF2:
      case WEIREDSTUFF3:
      case VIRTUAL:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      modifier = Modifier();
                             modifierList.add(modifier);
    }
    functionReturnType = FunctionReturnType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WEIREDSTUFF1:
      functionExoticStuff = FunctionExoticStuff();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                                                                                                                                                                            identifier=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(OB);
         {if (true) return new FunctionHeader(modifierList, functionReturnType, functionExoticStuff, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionReturnType FunctionReturnType() throws ParseException {
        ASTTextNode text74 = null;
        ASTTextNode text75 = null;
        ASTTextNode text76 = null;
        Token t;
        ASTStringNode identifier;
        ASTTextNode text77 = null;
        ASTTextNode text78 = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED:
    case CONST:
    case STRUCT:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        jj_consume_token(CONST);
                  text74=new ASTTextNode("const",new WToken(token));
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRUCT:
        jj_consume_token(STRUCT);
                                                                                  text75=new ASTTextNode("struct",new WToken(token));
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED:
        jj_consume_token(UNSIGNED);
                                                                                                                                                     text76=new ASTTextNode("unsigned",new WToken(token));
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
                                                                                                                                                                                                                            identifier=new ASTStringNode(t.image,new WToken(t));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                                                                                                                                                                                                                                                                                        text77=new ASTTextNode("*",new WToken(token));
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMP:
        jj_consume_token(AMP);
                                                                                                                                                                                                                                                                                                                                               text78=new ASTTextNode("&",new WToken(token));
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
         {if (true) return new FunctionReturnType1(text74, text75, text76, identifier, text77, text78, firstToken.next,token);}
      break;
    case OPERATOR:
      jj_consume_token(OPERATOR);
         {if (true) return new FunctionReturnType2(firstToken.next,token);}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Modifier Modifier() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
         {if (true) return new Modifier1(firstToken.next,token);}
      break;
    case INLINE:
      jj_consume_token(INLINE);
         {if (true) return new Modifier2(firstToken.next,token);}
      break;
    case INLINE2:
      jj_consume_token(INLINE2);
         {if (true) return new Modifier3(firstToken.next,token);}
      break;
    case INLINE3:
      jj_consume_token(INLINE3);
         {if (true) return new Modifier4(firstToken.next,token);}
      break;
    case EXTERN:
      jj_consume_token(EXTERN);
         {if (true) return new Modifier5(firstToken.next,token);}
      break;
    case WEIREDSTUFF2:
      jj_consume_token(WEIREDSTUFF2);
         {if (true) return new Modifier6(firstToken.next,token);}
      break;
    case VIRTUAL:
      jj_consume_token(VIRTUAL);
         {if (true) return new Modifier7(firstToken.next,token);}
      break;
    case WEIREDSTUFF3:
      jj_consume_token(WEIREDSTUFF3);
         {if (true) return new Modifier8(firstToken.next,token);}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FunctionExoticStuff FunctionExoticStuff() throws ParseException {
        Token t;
        ASTStringNode literal;
        Token firstToken=token;
    jj_consume_token(WEIREDSTUFF1);
    jj_consume_token(OB);
    t = jj_consume_token(LITERAL);
                                    literal=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(CB);
         {if (true) return new FunctionExoticStuff(literal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionParameterList FunctionParameterList() throws ParseException {
        FunctionParameter functionParameter;
        ArrayList<FunctionParameter> list0=new ArrayList<FunctionParameter>();
        FunctionParameter functionParameter1;
        ArrayList<FunctionParameter> functionParameter1List = new ArrayList<FunctionParameter>();
        Token firstToken=token;
    functionParameter = FunctionParameter();
                                              list0.add(functionParameter);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      functionParameter1 = FunctionParameter();
                                                                                                                         list0.add(functionParameter1);
    }
         {if (true) return new FunctionParameterList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionParameter FunctionParameter() throws ParseException {
        VarDeclToken varDeclToken;
        ArrayList<VarDeclToken> varDeclTokenList = new ArrayList<VarDeclToken>();
        Token firstToken=token;
    label_12:
    while (true) {
      varDeclToken = VarDeclToken();
                                     varDeclTokenList.add(varDeclToken);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
      case PPLINE:
      case PPPRAGMA:
      case PPERROR:
      case ENUM:
      case EXTERN:
      case UNSIGNED:
      case CONST:
      case STATIC:
      case STRUCT:
      case INLINE:
      case INLINE2:
      case INLINE3:
      case WEIREDSTUFF2:
      case WEIREDSTUFF3:
      case VIRTUAL:
      case OB:
      case STAR:
      case EQ:
      case PIPE:
      case AMP:
      case IDENTIFIER:
      case SYMBOLS:
      case OTHER:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_12;
      }
    }
         {if (true) return new FunctionParameter(varDeclTokenList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public OperatorOverloading OperatorOverloading() throws ParseException {
        OperatorHeader operatorHeader;
        AnyOpSymbol anyOpSymbol;
        FunctionParameterList functionParameterList = null;
        BlockOrSemi blockOrSemi;
        Token firstToken=token;
    operatorHeader = OperatorHeader();
    anyOpSymbol = AnyOpSymbol();
    jj_consume_token(OB);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL:
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
    case ENUM:
    case EXTERN:
    case UNSIGNED:
    case CONST:
    case STATIC:
    case STRUCT:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case WEIREDSTUFF3:
    case VIRTUAL:
    case OB:
    case STAR:
    case EQ:
    case PIPE:
    case AMP:
    case IDENTIFIER:
    case SYMBOLS:
    case OTHER:
      functionParameterList = FunctionParameterList();
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    jj_consume_token(CB);
    blockOrSemi = BlockOrSemi();
         {if (true) return new OperatorOverloading(operatorHeader, anyOpSymbol, functionParameterList, blockOrSemi, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public OperatorHeader OperatorHeader() throws ParseException {
        Modifier modifier;
        ArrayList<Modifier> modifierList = new ArrayList<Modifier>();
        FunctionReturnType functionReturnType;
        FunctionExoticStuff functionExoticStuff = null;
        Token firstToken=token;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERN:
      case STATIC:
      case INLINE:
      case INLINE2:
      case INLINE3:
      case WEIREDSTUFF2:
      case WEIREDSTUFF3:
      case VIRTUAL:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_13;
      }
      modifier = Modifier();
                             modifierList.add(modifier);
    }
    functionReturnType = FunctionReturnType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WEIREDSTUFF1:
      functionExoticStuff = FunctionExoticStuff();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(OPERATOR);
         {if (true) return new OperatorHeader(modifierList, functionReturnType, functionExoticStuff, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AnyOpSymbol AnyOpSymbol() throws ParseException {
        Token t;
        ASTStringNode symbols;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYMBOLS:
      t = jj_consume_token(SYMBOLS);
                    symbols=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AnyOpSymbol1(symbols, firstToken.next,token);}
      break;
    case EQ:
      jj_consume_token(EQ);
         {if (true) return new AnyOpSymbol2(firstToken.next,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new AnyOpSymbol3(firstToken.next,token);}
      break;
    case HASH:
      jj_consume_token(HASH);
         {if (true) return new AnyOpSymbol4(firstToken.next,token);}
      break;
    case PIPE:
      jj_consume_token(PIPE);
         {if (true) return new AnyOpSymbol5(firstToken.next,token);}
      break;
    case COLON:
      jj_consume_token(COLON);
         {if (true) return new AnyOpSymbol6(firstToken.next,token);}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
        Sequence_CodeUnit_InBlock sequence_CodeUnit_InBlock;
        Token firstToken=token;
    jj_consume_token(OCB);
    sequence_CodeUnit_InBlock = Sequence_CodeUnit_InBlock();
    jj_consume_token(CCB);
         {if (true) return new Block(sequence_CodeUnit_InBlock, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public GotoLabel GotoLabel() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(COLON);
         {if (true) return new GotoLabel(identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Sequence_CodeUnit_InBlock Sequence_CodeUnit_InBlock() throws ParseException {
        CodeUnit_InBlock codeUnit_InBlock;
        ArrayList<CodeUnit_InBlock> codeUnit_InBlockList = new ArrayList<CodeUnit_InBlock>();
        Token firstToken=token;
    label_14:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_14;
      }
      codeUnit_InBlock = CodeUnit_InBlock();
                                                          codeUnit_InBlockList.add(codeUnit_InBlock);
    }
         {if (true) return new Sequence_CodeUnit_InBlock(codeUnit_InBlockList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public BlockOrSemi BlockOrSemi() throws ParseException {
        Token t;
        ASTStringNode literal;
        ASTTextNode text95 = null;
        Block block;
        VarDecl varDecl;
        ArrayList<VarDecl> varDeclList = new ArrayList<VarDecl>();
        Block block1;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      t = jj_consume_token(LITERAL);
                                     literal=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(SEMI);
         {if (true) return new BlockOrSemi1(literal, firstToken.next,token);}
      break;
    case SEMI:
      jj_consume_token(SEMI);
         {if (true) return new BlockOrSemi2(firstToken.next,token);}
      break;
    default:
      jj_la1[43] = jj_gen;
      if (jj_2_26(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
          jj_consume_token(CONST);
                                           text95=new ASTTextNode("const",new WToken(token));
          break;
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        block = Block();
         {if (true) return new BlockOrSemi3(text95, block, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LITERAL:
        case PPLINE:
        case PPPRAGMA:
        case PPERROR:
        case ENUM:
        case EXTERN:
        case UNSIGNED:
        case CONST:
        case STATIC:
        case STRUCT:
        case INLINE:
        case INLINE2:
        case INLINE3:
        case WEIREDSTUFF2:
        case WEIREDSTUFF3:
        case VIRTUAL:
        case SEMI:
        case COMMA:
        case OB:
        case STAR:
        case EQ:
        case PIPE:
        case AMP:
        case IDENTIFIER:
        case SYMBOLS:
        case OTHER:
          label_15:
          while (true) {
            varDecl = VarDecl();
                           varDeclList.add(varDecl);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LITERAL:
            case PPLINE:
            case PPPRAGMA:
            case PPERROR:
            case ENUM:
            case EXTERN:
            case UNSIGNED:
            case CONST:
            case STATIC:
            case STRUCT:
            case INLINE:
            case INLINE2:
            case INLINE3:
            case WEIREDSTUFF2:
            case WEIREDSTUFF3:
            case VIRTUAL:
            case SEMI:
            case COMMA:
            case OB:
            case STAR:
            case EQ:
            case PIPE:
            case AMP:
            case IDENTIFIER:
            case SYMBOLS:
            case OTHER:
              ;
              break;
            default:
              jj_la1[42] = jj_gen;
              break label_15;
            }
          }
          block1 = Block();
         {if (true) return new BlockOrSemi4(varDeclList, block1, firstToken.next,token);}
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public BlockOrSingleStatement BlockOrSingleStatement() throws ParseException {
        Block block;
        CodeUnit_InBlock codeUnit_InBlock;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCB:
      block = Block();
         {if (true) return new BlockOrSingleStatement1(block, firstToken.next,token);}
      break;
    case LITERAL:
    case INCLUDE:
    case DEFINE:
    case IFDEF:
    case IFNDEF:
    case ELIF:
    case ELSIF:
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
    case TYPEDEF:
    case ENUM:
    case EXTERN:
    case UNSIGNED:
    case CONST:
    case STATIC:
    case STRUCT:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case WEIREDSTUFF3:
    case IF:
    case ELSE:
    case FOR:
    case WHILE:
    case DO:
    case SWITCH:
    case CLASS:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case VIRTUAL:
    case OPERATOR:
    case SEMI:
    case COLON:
    case COMMA:
    case LT:
    case GT:
    case OB:
    case CB:
    case STAR:
    case EQ:
    case HASH:
    case PIPE:
    case AMP:
    case IDENTIFIER:
    case SYMBOLS:
    case OTHER:
      codeUnit_InBlock = CodeUnit_InBlock();
         {if (true) return new BlockOrSingleStatement2(codeUnit_InBlock, firstToken.next,token);}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypeDef TypeDef() throws ParseException {
        AnyTypeDefToken anyTypeDefToken;
        ArrayList<AnyTypeDefToken> anyTypeDefTokenList = new ArrayList<AnyTypeDefToken>();
        AnyStmtToken anyStmtToken;
        ArrayList<AnyStmtToken> anyStmtTokenList = new ArrayList<AnyStmtToken>();
        Token firstToken=token;
    if (jj_2_27(2)) {
      jj_consume_token(TYPEDEF);
      jj_consume_token(ENUM);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LITERAL:
        case INCLUDE:
        case DEFINE:
        case IFDEF:
        case IFNDEF:
        case ELIF:
        case ELSIF:
        case PPLINE:
        case PPPRAGMA:
        case PPERROR:
        case ENUM:
        case EXTERN:
        case UNSIGNED:
        case CONST:
        case STATIC:
        case STRUCT:
        case INLINE:
        case INLINE2:
        case INLINE3:
        case WEIREDSTUFF2:
        case WEIREDSTUFF3:
        case IF:
        case ELSE:
        case FOR:
        case WHILE:
        case CLASS:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case VIRTUAL:
        case OPERATOR:
        case COLON:
        case COMMA:
        case LT:
        case GT:
        case OB:
        case CB:
        case OCB:
        case CCB:
        case STAR:
        case EQ:
        case PIPE:
        case AMP:
        case IDENTIFIER:
        case SYMBOLS:
        case OTHER:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_16;
        }
        anyTypeDefToken = AnyTypeDefToken();
                                                                         anyTypeDefTokenList.add(anyTypeDefToken);
      }
      jj_consume_token(SEMI);
         {if (true) return new TypeDef1(anyTypeDefTokenList, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEDEF:
        jj_consume_token(TYPEDEF);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LITERAL:
          case INCLUDE:
          case DEFINE:
          case IFDEF:
          case IFNDEF:
          case ELIF:
          case ELSIF:
          case PPLINE:
          case PPPRAGMA:
          case PPERROR:
          case ENUM:
          case EXTERN:
          case UNSIGNED:
          case CONST:
          case STATIC:
          case STRUCT:
          case INLINE:
          case INLINE2:
          case INLINE3:
          case WEIREDSTUFF2:
          case WEIREDSTUFF3:
          case IF:
          case ELSE:
          case FOR:
          case WHILE:
          case CLASS:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case VIRTUAL:
          case OPERATOR:
          case COLON:
          case COMMA:
          case LT:
          case GT:
          case OB:
          case CB:
          case OCB:
          case STAR:
          case EQ:
          case PIPE:
          case AMP:
          case IDENTIFIER:
          case SYMBOLS:
          case OTHER:
            ;
            break;
          default:
            jj_la1[47] = jj_gen;
            break label_17;
          }
          anyStmtToken = AnyStmtToken();
                                               anyStmtTokenList.add(anyStmtToken);
        }
        jj_consume_token(SEMI);
         {if (true) return new TypeDef2(anyStmtTokenList, firstToken.next,token);}
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public BlockAssignment BlockAssignment() throws ParseException {
        Cast cast = null;
        Token t;
        ASTStringNode findendccb;
        Token firstToken=token;
    jj_consume_token(EQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OB:
      cast = Cast();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(OCB);
    t = findEndCCB();
                                             findendccb=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new BlockAssignment(cast, findendccb, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EnumBlock EnumBlock() throws ParseException {
        Token t;
        ASTStringNode identifier = null;
        ASTStringNode findendccb;
        Token firstToken=token;
    jj_consume_token(ENUM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                               identifier=new ASTStringNode(t.image,new WToken(t));
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(OCB);
    t = findEndCCB();
                                                                                                         findendccb=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new EnumBlock(identifier, findendccb, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Cast Cast() throws ParseException {
        FunctionReturnType functionReturnType;
        Token firstToken=token;
    jj_consume_token(OB);
    functionReturnType = FunctionReturnType();
    jj_consume_token(CB);
         {if (true) return new Cast(functionReturnType, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CPPClassForwardDecl CPPClassForwardDecl() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    jj_consume_token(CLASS);
    t = jj_consume_token(IDENTIFIER);
                               identifier=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(SEMI);
         {if (true) return new CPPClassForwardDecl(identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CPPClass CPPClass() throws ParseException {
        class_head class_head;
        member member;
        ArrayList<member> memberList = new ArrayList<member>();
        Token firstToken=token;
    class_head = class_head();
    jj_consume_token(OCB);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
      case INCLUDE:
      case DEFINE:
      case IFDEF:
      case IFNDEF:
      case ELIF:
      case ELSIF:
      case PPLINE:
      case PPPRAGMA:
      case PPERROR:
      case TYPEDEF:
      case ENUM:
      case EXTERN:
      case UNSIGNED:
      case CONST:
      case STATIC:
      case STRUCT:
      case INLINE:
      case INLINE2:
      case INLINE3:
      case WEIREDSTUFF1:
      case WEIREDSTUFF2:
      case WEIREDSTUFF3:
      case IF:
      case ELSE:
      case FOR:
      case WHILE:
      case CLASS:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case VIRTUAL:
      case TEMPLATE:
      case OPERATOR:
      case SEMI:
      case COLON:
      case COMMA:
      case LT:
      case GT:
      case OB:
      case CB:
      case OCB:
      case STAR:
      case EQ:
      case HASH:
      case PIPE:
      case AMP:
      case IDENTIFIER:
      case SYMBOLS:
      case OTHER:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_18;
      }
      member = member();
                                                     memberList.add(member);
    }
    jj_consume_token(CCB);
    jj_consume_token(SEMI);
         {if (true) return new CPPClass(class_head, memberList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public class_head class_head() throws ParseException {
        class_key class_key;
        Token t;
        ASTStringNode identifier;
        base_specification base_specification = null;
        class_key class_key1;
        base_specifier base_specifier = null;
        Token firstToken=token;
    if (jj_2_28(2147483647)) {
      class_key = class_key();
      t = jj_consume_token(IDENTIFIER);
                                                                                                            identifier=new ASTStringNode(t.image,new WToken(t));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        base_specification = base_specification();
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
         {if (true) return new class_head1(class_key, identifier, base_specification, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        class_key1 = class_key();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case VIRTUAL:
        case IDENTIFIER:
          base_specifier = base_specifier();
          break;
        default:
          jj_la1[53] = jj_gen;
          ;
        }
         {if (true) return new class_head2(class_key1, base_specifier, firstToken.next,token);}
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public class_key class_key() throws ParseException {
        Token firstToken=token;
    jj_consume_token(CLASS);
         {if (true) return new class_key(firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public base_specifier base_specifier() throws ParseException {
        Token t;
        ASTStringNode identifier;
        access_specifier access_specifier = null;
        ASTStringNode identifier1;
        access_specifier access_specifier1;
        ASTTextNode text97 = null;
        ASTStringNode identifier2;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new base_specifier1(identifier, firstToken.next,token);}
      break;
    case VIRTUAL:
      jj_consume_token(VIRTUAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
        access_specifier = access_specifier();
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
                                                                       identifier1=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new base_specifier2(access_specifier, identifier1, firstToken.next,token);}
      break;
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      access_specifier1 = access_specifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRTUAL:
        jj_consume_token(VIRTUAL);
                                                         text97=new ASTTextNode("virtual",new WToken(token));
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
                                                                                                                               identifier2=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new base_specifier3(access_specifier1, text97, identifier2, firstToken.next,token);}
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public base_specification base_specification() throws ParseException {
        base_specifier base_specifier;
        ArrayList<base_specifier> list0=new ArrayList<base_specifier>();
        base_specifier base_specifier1;
        ArrayList<base_specifier> base_specifier1List = new ArrayList<base_specifier>();
        Token firstToken=token;
    jj_consume_token(COLON);
    base_specifier = base_specifier();
                                            list0.add(base_specifier);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      base_specifier1 = base_specifier();
                                                                                                              list0.add(base_specifier1);
    }
         {if (true) return new base_specification(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public access_specifier access_specifier() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
      jj_consume_token(PRIVATE);
         {if (true) return new access_specifier1(firstToken.next,token);}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
         {if (true) return new access_specifier2(firstToken.next,token);}
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
         {if (true) return new access_specifier3(firstToken.next,token);}
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public member member() throws ParseException {
        access_specifier access_specifier;
        Constructor constructor;
        CodeUnit_TopLevel codeUnit_TopLevel;
        Token firstToken=token;
    if (jj_2_29(2)) {
      access_specifier = access_specifier();
      jj_consume_token(COLON);
         {if (true) return new member1(access_specifier, firstToken.next,token);}
    } else if (jj_2_30(2147483647)) {
      constructor = Constructor();
         {if (true) return new member2(constructor, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
      case INCLUDE:
      case DEFINE:
      case IFDEF:
      case IFNDEF:
      case ELIF:
      case ELSIF:
      case PPLINE:
      case PPPRAGMA:
      case PPERROR:
      case TYPEDEF:
      case ENUM:
      case EXTERN:
      case UNSIGNED:
      case CONST:
      case STATIC:
      case STRUCT:
      case INLINE:
      case INLINE2:
      case INLINE3:
      case WEIREDSTUFF2:
      case WEIREDSTUFF3:
      case IF:
      case ELSE:
      case FOR:
      case WHILE:
      case CLASS:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case VIRTUAL:
      case TEMPLATE:
      case OPERATOR:
      case SEMI:
      case COLON:
      case COMMA:
      case LT:
      case GT:
      case OB:
      case CB:
      case OCB:
      case STAR:
      case EQ:
      case HASH:
      case PIPE:
      case AMP:
      case IDENTIFIER:
      case SYMBOLS:
      case OTHER:
        codeUnit_TopLevel = CodeUnit_TopLevel();
         {if (true) return new member3(codeUnit_TopLevel, firstToken.next,token);}
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public AnyTypeDefToken AnyTypeDefToken() throws ParseException {
        AnyStmtToken anyStmtToken;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCB:
      jj_consume_token(OCB);
         {if (true) return new AnyTypeDefToken1(firstToken.next,token);}
      break;
    case CCB:
      jj_consume_token(CCB);
         {if (true) return new AnyTypeDefToken2(firstToken.next,token);}
      break;
    case LITERAL:
    case INCLUDE:
    case DEFINE:
    case IFDEF:
    case IFNDEF:
    case ELIF:
    case ELSIF:
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
    case ENUM:
    case EXTERN:
    case UNSIGNED:
    case CONST:
    case STATIC:
    case STRUCT:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case WEIREDSTUFF3:
    case IF:
    case ELSE:
    case FOR:
    case WHILE:
    case CLASS:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case VIRTUAL:
    case OPERATOR:
    case COLON:
    case COMMA:
    case LT:
    case GT:
    case OB:
    case CB:
    case STAR:
    case EQ:
    case PIPE:
    case AMP:
    case IDENTIFIER:
    case SYMBOLS:
    case OTHER:
      anyStmtToken = AnyStmtToken();
         {if (true) return new AnyTypeDefToken3(anyStmtToken, firstToken.next,token);}
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AnyStmtToken AnyStmtToken() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ASTStringNode literal;
        ASTStringNode other;
        ASTStringNode symbols;
        Block block;
        EnumBlock enumBlock;
        BlockAssignment blockAssignment;
        Modifier modifier;
        PPOtherIgnore pPOtherIgnore;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AnyStmtToken1(identifier, firstToken.next,token);}
      break;
    case LITERAL:
      t = jj_consume_token(LITERAL);
                    literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AnyStmtToken2(literal, firstToken.next,token);}
      break;
    case OTHER:
      t = jj_consume_token(OTHER);
                  other=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AnyStmtToken3(other, firstToken.next,token);}
      break;
    case SYMBOLS:
      t = jj_consume_token(SYMBOLS);
                    symbols=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AnyStmtToken4(symbols, firstToken.next,token);}
      break;
    case COMMA:
      jj_consume_token(COMMA);
         {if (true) return new AnyStmtToken5(firstToken.next,token);}
      break;
    case PIPE:
      jj_consume_token(PIPE);
         {if (true) return new AnyStmtToken6(firstToken.next,token);}
      break;
    case LT:
      jj_consume_token(LT);
         {if (true) return new AnyStmtToken7(firstToken.next,token);}
      break;
    case GT:
      jj_consume_token(GT);
         {if (true) return new AnyStmtToken8(firstToken.next,token);}
      break;
    case OB:
      jj_consume_token(OB);
         {if (true) return new AnyStmtToken9(firstToken.next,token);}
      break;
    case CB:
      jj_consume_token(CB);
         {if (true) return new AnyStmtToken10(firstToken.next,token);}
      break;
    case OCB:
      block = Block();
         {if (true) return new AnyStmtToken11(block, firstToken.next,token);}
      break;
    case IF:
      jj_consume_token(IF);
         {if (true) return new AnyStmtToken12(firstToken.next,token);}
      break;
    case ELSE:
      jj_consume_token(ELSE);
         {if (true) return new AnyStmtToken13(firstToken.next,token);}
      break;
    case FOR:
      jj_consume_token(FOR);
         {if (true) return new AnyStmtToken14(firstToken.next,token);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
         {if (true) return new AnyStmtToken15(firstToken.next,token);}
      break;
    default:
      jj_la1[62] = jj_gen;
      if (jj_2_31(3)) {
        enumBlock = EnumBlock();
         {if (true) return new AnyStmtToken16(enumBlock, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENUM:
          jj_consume_token(ENUM);
         {if (true) return new AnyStmtToken17(firstToken.next,token);}
          break;
        case STAR:
          jj_consume_token(STAR);
         {if (true) return new AnyStmtToken18(firstToken.next,token);}
          break;
        case AMP:
          jj_consume_token(AMP);
         {if (true) return new AnyStmtToken19(firstToken.next,token);}
          break;
        default:
          jj_la1[63] = jj_gen;
          if (jj_2_32(2147483647)) {
            blockAssignment = BlockAssignment();
         {if (true) return new AnyStmtToken20(blockAssignment, firstToken.next,token);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EQ:
              jj_consume_token(EQ);
         {if (true) return new AnyStmtToken21(firstToken.next,token);}
              break;
            case COLON:
              jj_consume_token(COLON);
         {if (true) return new AnyStmtToken22(firstToken.next,token);}
              break;
            case EXTERN:
            case STATIC:
            case INLINE:
            case INLINE2:
            case INLINE3:
            case WEIREDSTUFF2:
            case WEIREDSTUFF3:
            case VIRTUAL:
              modifier = Modifier();
         {if (true) return new AnyStmtToken23(modifier, firstToken.next,token);}
              break;
            case IFDEF:
              jj_consume_token(IFDEF);
         {if (true) return new AnyStmtToken24(firstToken.next,token);}
              break;
            case IFNDEF:
              jj_consume_token(IFNDEF);
         {if (true) return new AnyStmtToken25(firstToken.next,token);}
              break;
            case DEFINE:
              jj_consume_token(DEFINE);
         {if (true) return new AnyStmtToken26(firstToken.next,token);}
              break;
            case INCLUDE:
              jj_consume_token(INCLUDE);
         {if (true) return new AnyStmtToken27(firstToken.next,token);}
              break;
            case ELIF:
              jj_consume_token(ELIF);
         {if (true) return new AnyStmtToken28(firstToken.next,token);}
              break;
            case ELSIF:
              jj_consume_token(ELSIF);
         {if (true) return new AnyStmtToken29(firstToken.next,token);}
              break;
            case PPLINE:
            case PPPRAGMA:
            case PPERROR:
              pPOtherIgnore = PPOtherIgnore();
         {if (true) return new AnyStmtToken30(pPOtherIgnore, firstToken.next,token);}
              break;
            case CONST:
              jj_consume_token(CONST);
         {if (true) return new AnyStmtToken31(firstToken.next,token);}
              break;
            case STRUCT:
              jj_consume_token(STRUCT);
         {if (true) return new AnyStmtToken32(firstToken.next,token);}
              break;
            case UNSIGNED:
              jj_consume_token(UNSIGNED);
         {if (true) return new AnyStmtToken33(firstToken.next,token);}
              break;
            case PRIVATE:
              jj_consume_token(PRIVATE);
         {if (true) return new AnyStmtToken34(firstToken.next,token);}
              break;
            case PUBLIC:
              jj_consume_token(PUBLIC);
         {if (true) return new AnyStmtToken35(firstToken.next,token);}
              break;
            case PROTECTED:
              jj_consume_token(PROTECTED);
         {if (true) return new AnyStmtToken36(firstToken.next,token);}
              break;
            case CLASS:
              jj_consume_token(CLASS);
         {if (true) return new AnyStmtToken37(firstToken.next,token);}
              break;
            case OPERATOR:
              jj_consume_token(OPERATOR);
         {if (true) return new AnyStmtToken38(firstToken.next,token);}
              break;
            default:
              jj_la1[64] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public VarDecl VarDecl() throws ParseException {
        VarDeclTokenOrComma varDeclTokenOrComma;
        ArrayList<VarDeclTokenOrComma> varDeclTokenOrCommaList = new ArrayList<VarDeclTokenOrComma>();
        Token firstToken=token;
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
      case PPLINE:
      case PPPRAGMA:
      case PPERROR:
      case ENUM:
      case EXTERN:
      case UNSIGNED:
      case CONST:
      case STATIC:
      case STRUCT:
      case INLINE:
      case INLINE2:
      case INLINE3:
      case WEIREDSTUFF2:
      case WEIREDSTUFF3:
      case VIRTUAL:
      case COMMA:
      case OB:
      case STAR:
      case EQ:
      case PIPE:
      case AMP:
      case IDENTIFIER:
      case SYMBOLS:
      case OTHER:
        ;
        break;
      default:
        jj_la1[65] = jj_gen;
        break label_20;
      }
      varDeclTokenOrComma = VarDeclTokenOrComma();
                                                   varDeclTokenOrCommaList.add(varDeclTokenOrComma);
    }
    jj_consume_token(SEMI);
         {if (true) return new VarDecl(varDeclTokenOrCommaList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public VarDeclTokenOrComma VarDeclTokenOrComma() throws ParseException {
        VarDeclToken varDeclToken;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL:
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
    case ENUM:
    case EXTERN:
    case UNSIGNED:
    case CONST:
    case STATIC:
    case STRUCT:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case WEIREDSTUFF3:
    case VIRTUAL:
    case OB:
    case STAR:
    case EQ:
    case PIPE:
    case AMP:
    case IDENTIFIER:
    case SYMBOLS:
    case OTHER:
      varDeclToken = VarDeclToken();
         {if (true) return new VarDeclTokenOrComma1(varDeclToken, firstToken.next,token);}
      break;
    case COMMA:
      jj_consume_token(COMMA);
         {if (true) return new VarDeclTokenOrComma2(firstToken.next,token);}
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VarDeclToken VarDeclToken() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ASTStringNode literal;
        ASTStringNode other;
        ASTStringNode symbols;
        PPOtherIgnore pPOtherIgnore;
        Modifier modifier;
        ASTStringNode findendcb;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new VarDeclToken1(identifier, firstToken.next,token);}
      break;
    case LITERAL:
      t = jj_consume_token(LITERAL);
                    literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new VarDeclToken2(literal, firstToken.next,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new VarDeclToken3(firstToken.next,token);}
      break;
    case AMP:
      jj_consume_token(AMP);
         {if (true) return new VarDeclToken4(firstToken.next,token);}
      break;
    case OTHER:
      t = jj_consume_token(OTHER);
                  other=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new VarDeclToken5(other, firstToken.next,token);}
      break;
    case SYMBOLS:
      t = jj_consume_token(SYMBOLS);
                    symbols=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new VarDeclToken6(symbols, firstToken.next,token);}
      break;
    case PIPE:
      jj_consume_token(PIPE);
         {if (true) return new VarDeclToken7(firstToken.next,token);}
      break;
    case CONST:
      jj_consume_token(CONST);
         {if (true) return new VarDeclToken8(firstToken.next,token);}
      break;
    case STRUCT:
      jj_consume_token(STRUCT);
         {if (true) return new VarDeclToken9(firstToken.next,token);}
      break;
    case UNSIGNED:
      jj_consume_token(UNSIGNED);
         {if (true) return new VarDeclToken10(firstToken.next,token);}
      break;
    case ENUM:
      jj_consume_token(ENUM);
         {if (true) return new VarDeclToken11(firstToken.next,token);}
      break;
    case PPLINE:
    case PPPRAGMA:
    case PPERROR:
      pPOtherIgnore = PPOtherIgnore();
         {if (true) return new VarDeclToken12(pPOtherIgnore, firstToken.next,token);}
      break;
    case EXTERN:
    case STATIC:
    case INLINE:
    case INLINE2:
    case INLINE3:
    case WEIREDSTUFF2:
    case WEIREDSTUFF3:
    case VIRTUAL:
      modifier = Modifier();
         {if (true) return new VarDeclToken13(modifier, firstToken.next,token);}
      break;
    case OB:
      jj_consume_token(OB);
      t = findEndCB();
                          findendcb=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new VarDeclToken14(findendcb, firstToken.next,token);}
      break;
    case EQ:
      jj_consume_token(EQ);
         {if (true) return new VarDeclToken15(firstToken.next,token);}
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
        Token t;
        ASTStringNode literal;
        Token firstToken=token;
    t = jj_consume_token(LITERAL);
                    literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Literal(literal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_3_30() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(VIRTUAL)) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(ELSIF)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(ELIF)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(IFNDEF)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(IFDEF)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_96()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(PPERROR)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(VIRTUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(PPPRAGMA)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(PPLINE)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_36()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    if (jj_scan_token(OCB)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_36()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(PPUNDEF)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(OCB)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(INCLUDE)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(EXTERN)) return true;
    if (jj_scan_token(LITERAL)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(OB)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(CB)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    if (jj_scan_token(OCB)) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    if (jj_scan_token(OCB)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(TYPEDEF)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(TYPEDEF)) return true;
    if (jj_scan_token(ENUM)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) jj_scanpos = xsp;
    if (jj_scan_token(OCB)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(UNSIGNED)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(OCB)) return true;
    if (jj_3R_114()) return true;
    if (jj_scan_token(CCB)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_53()) return true;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(STRUCT)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(HASH)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(WEIREDSTUFF1)) return true;
    if (jj_scan_token(OB)) return true;
    if (jj_scan_token(LITERAL)) return true;
    if (jj_scan_token(CB)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(WEIREDSTUFF3)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(VIRTUAL)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(WEIREDSTUFF2)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(EXTERN)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(INLINE3)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(INLINE2)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(INLINE)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(OCB)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(UNSIGNED)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(STRUCT)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(ELSIF)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(ELIF)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(HASH)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(INCLUDE)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_53()) return true;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(IFNDEF)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_scan_token(OCB)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(IFDEF)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(AMP)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(ENUM)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(CB)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(AMP)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(SYMBOLS)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(OTHER)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OB)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_33()) return true;
    return false;
  }

  public CPPApproxParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[68];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x40000000,0xb7780400,0x40000000,0xb7780400,0xb7780400,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x34000000,0x0,0x0,0xb4000400,0x0,0x0,0x0,0x0,0xb4000400,0xb4000400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb4000400,0xb4000400,0x0,0x0,0x0,0x0,0xb4000400,0x0,0xb4000400,0xf7780400,0xb7780400,0xb7780400,0x40000000,0x0,0x0,0xf7780400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf7780400,0xb7780400,0x400,0x80000000,0x37780000,0xb4000400,0xb4000400,0xb4000400,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x4000000,0x0,0xda787eff,0x1e800,0xda787eff,0xca787eff,0x1000,0x60000,0x0,0x0,0x60000,0x0,0x0,0x80000,0x80000000,0x80000,0x0,0x0,0x0,0x20006ff,0x40000000,0x20006e9,0x100,0x80000000,0x20006ff,0x20006ff,0x20006e9,0x100,0x4,0x10,0x2,0x0,0x0,0x8000016,0x20006e9,0x80000000,0x20006ff,0x20006ff,0x20006e9,0x100,0x40000000,0x4,0x920006ff,0x10000000,0x920006ff,0xda79feff,0xca787eff,0xca787eff,0x0,0x0,0x0,0xde787fff,0x40000000,0x2700000,0x80000,0x700000,0x2000000,0x2700000,0x80000000,0x700000,0xde787eff,0xca787eff,0x80007800,0x0,0x4a7806ff,0x820006ff,0x820006ff,0x20006ff,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x28edf,0x0,0x28edf,0x28edf,0x0,0x0,0x4,0x200,0x0,0x20000,0x20800,0x800,0x0,0x800,0x0,0x100,0x100,0x28ec4,0x0,0x0,0x0,0x0,0x28ec4,0x28ec4,0x0,0x0,0x0,0x0,0x0,0x40,0x400,0x800,0x0,0x0,0x28ec4,0x28ec4,0x0,0x0,0x83c0,0x0,0x28ec4,0x80,0x28ec4,0x28fdf,0x28eff,0x28edf,0x0,0x4,0x800,0x28fdf,0x0,0x800,0x0,0x0,0x0,0x800,0x0,0x0,0x28fdf,0x28eff,0x28a1f,0x440,0x80,0x28ec4,0x28ec4,0x28ec4,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[32];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public CPPApproxParser(CharStream stream) {
    token_source = new CPPApproxParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CPPApproxParser(CPPApproxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CPPApproxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[82];
    for (int i = 0; i < 82; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 68; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 82; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 32; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
