/* Generated By:JavaCC: Do not edit this line. CPPApproxParserConstants.java */
package tmp.generated_cppapprox;

public interface CPPApproxParserConstants {

  int EOF = 0;
  int LITERAL = 10;
  int INTEGER_LITERAL = 11;
  int DECIMAL_LITERAL = 12;
  int HEX_LITERAL = 13;
  int OCTAL_LITERAL = 14;
  int FLOATING_POINT_LITERAL = 15;
  int EXPONENT = 16;
  int CHARACTER_LITERAL = 17;
  int STRING_LITERAL = 18;
  int INCLUDE = 19;
  int DEFINE = 20;
  int IFDEF = 21;
  int IFNDEF = 22;
  int ENDIF = 23;
  int ELIF = 24;
  int ELSIF = 25;
  int PPLINE = 26;
  int PPUNDEF = 27;
  int PPPRAGMA = 28;
  int PPERROR = 29;
  int TYPEDEF = 30;
  int ENUM = 31;
  int EXTERN = 32;
  int UNSIGNED = 33;
  int CONST = 34;
  int STATIC = 35;
  int STRUCT = 36;
  int INLINE = 37;
  int INLINE2 = 38;
  int INLINE3 = 39;
  int WEIREDSTUFF1 = 40;
  int WEIREDSTUFF2 = 41;
  int WEIREDSTUFF3 = 42;
  int IF = 43;
  int ELSE = 44;
  int FOR = 45;
  int WHILE = 46;
  int DO = 47;
  int SWITCH = 48;
  int CASE = 49;
  int SWDEFAULT = 50;
  int CLASS = 51;
  int PRIVATE = 52;
  int PROTECTED = 53;
  int PUBLIC = 54;
  int TRY = 55;
  int CATCH = 56;
  int VIRTUAL = 57;
  int TEMPLATE = 58;
  int OPERATOR = 59;
  int SEMI = 60;
  int DBLCOLON = 61;
  int COLON = 62;
  int COMMA = 63;
  int LT = 64;
  int GT = 65;
  int OB = 66;
  int CB = 67;
  int OCB = 68;
  int CCB = 69;
  int STAR = 70;
  int EQ = 71;
  int HASH = 72;
  int PIPE = 73;
  int AMP = 74;
  int IDENTIFIER = 75;
  int IDENTIFIERPART = 76;
  int LETTER = 77;
  int DIGIT = 78;
  int SYMBOLS = 79;
  int SYMBOL = 80;
  int OTHER = 81;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\"\\n\"",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<token of kind 7>",
    "<token of kind 8>",
    "<token of kind 9>",
    "<LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"include\"",
    "\"define\"",
    "\"ifdef\"",
    "\"ifndef\"",
    "\"endif\"",
    "\"elif\"",
    "\"elsif\"",
    "\"line\"",
    "\"undef\"",
    "\"pragma\"",
    "\"error\"",
    "\"typedef\"",
    "\"enum\"",
    "\"extern\"",
    "\"unsigned\"",
    "\"const\"",
    "\"static\"",
    "\"struct\"",
    "\"inline\"",
    "\"__inline__\"",
    "\"__inline\"",
    "\"__regbank\"",
    "\"__TIPOFUNC__\"",
    "\"__forceinline\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"while\"",
    "\"do\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"class\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"try\"",
    "\"catch\"",
    "\"virtual\"",
    "\"template\"",
    "\"operator\"",
    "\";\"",
    "\"::\"",
    "\":\"",
    "\",\"",
    "\"<\"",
    "\">\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"*\"",
    "\"=\"",
    "\"#\"",
    "\"|\"",
    "\"&\"",
    "<IDENTIFIER>",
    "<IDENTIFIERPART>",
    "<LETTER>",
    "<DIGIT>",
    "<SYMBOLS>",
    "<SYMBOL>",
    "<OTHER>",
  };

}
