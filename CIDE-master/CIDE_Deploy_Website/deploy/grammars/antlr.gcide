options{
  STATIC = false;
  JAVA_UNICODE_ESCAPE = false;
}
PARSER_BEGIN(AntLRParser)
package tmp.generated_antlr;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

public class AntLRParser{
}
PARSER_END(AntLRParser)

/* WHITE SPACE */


SKIP:{
  " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}





/* COMMENTS */
MORE:{
  "//":IN_SINGLE_LINE_COMMENT
  | <"/**"~["/"]>{
    input_stream.backup(1);
  }
  :IN_FORMAL_COMMENT
  | "/*":IN_MULTI_LINE_COMMENT
}
<IN_SINGLE_LINE_COMMENT>SPECIAL_TOKEN:{
  <SINGLE_LINE_COMMENT:"\n"
  | "\r"
  | "\r\n">:DEFAULT
}
<IN_FORMAL_COMMENT>SPECIAL_TOKEN:{
  <FORMAL_COMMENT:"*/">:DEFAULT
}
<IN_MULTI_LINE_COMMENT>SPECIAL_TOKEN:{
  <MULTI_LINE_COMMENT:"*/">:DEFAULT
}
<IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT>MORE:{
  <~[]>
}
/* RESERVED WORDS AND LITERALS */
//TOKEN:{//}

TOKEN:{
  <LPAREN:"(">
  | <RPAREN:")">
  | <M1:"private">
  | <M2:"public">
  | <M3:"protected">
  | <M4:"fragment">
  | <GR:"grammar">
  | <COMMA:",">
  | <SEMI:";">
  | <DOT:".">
  | <PLUS:"+">
  | <STAR:"*">
  | <BIT_OR:"|">
  | <XOR:"^">
}

/* LITERALS */
TOKEN:{
//  <INTEGER_LITERAL:<DECIMAL_LITERAL>(["l", "L"])?//  | <HEX_LITERAL>(["l", "L"])?//  | <OCTAL_LITERAL>(["l", "L"])?>//  | <#DECIMAL_LITERAL:["1"-"9"](["0"-"9"])*>//  | <#HEX_LITERAL:"0"["x", "X"](["0"-"9", "a"-"f", "A"-"F"])+>//  | <#OCTAL_LITERAL:"0"(["0"-"7"])*>//  | <FLOATING_POINT_LITERAL:(["0"-"9"])+"."(["0"-"9"])*(<EXPONENT>)?(["f", "F", "d", "D"])?//  | "."(["0"-"9"])+(<EXPONENT>)?(["f", "F", "d", "D"])?//  | (["0"-"9"])+<EXPONENT>(["f", "F", "d", "D"])?//  | (["0"-"9"])+(<EXPONENT>)?["f", "F", "d", "D"]>//  | <#EXPONENT:["e", "E"](["+", "-"])?(["0"-"9"])+>


	<TOKEN_REF :	["A"-"Z"] (["a"-"z","A"-"Z","_","0"-"9"])*>
|	<RULE_REF :	["a"-"z"] (["a"-"z","A"-"Z","_","0"-"9"])*>
	
  | <CHAR_LITERAL:"'"((~["'", "\\", "\n", "\r"])
  | ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\""]
  | ["0"-"7"](["0"-"7"])?
  | ["0"-"3"]["0"-"7"]["0"-"7"])))"'">
  | <STRING_LITERAL:"'"((~["'", "\\", "\n", "\r"])
  | ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\""]
  | ["0"-"7"](["0"-"7"])?
  | ["0"-"3"]["0"-"7"]["0"-"7"])))*"'">
}





GRAMMARSTART

Grammar :
	"grammar" RuleId ";" @!@!
//  JAVATOKEN(findIntroductionBlock) @!
  (Rule)*
  <EOF> 
;


Modifier: "protected"|"public"|"private"|"fragment";
Rule:	[Modifier] RuleId ["!"<NONE>]
//		( ARG_ACTION )?
//		( "returns" ARG_ACTION  )?
//		throwsSpec? optionsSpec? ruleScopeSpec? ruleAction*
		":"	altList	";" @!@!
//		exceptionGroup?
	;

///** Match stuff like @init {int i;} *///ruleAction//	:	"@" id ACTION -> ^("@" id ACTION)//	;////throwsSpec//	:	"throws" id ( "," id )* -> ^("throws" id+)//	;////ruleScopeSpec//	:	"scope" ACTION -> ^("scope" ACTION)//	|	"scope" id ("," id)* ";" -> ^("scope" id+)//	|	"scope" ACTION//		"scope" id ("," id)* ";"//		-> ^("scope" ACTION id+ )//	;//block    :   "("		altList        ")"    ;

altList
    :   &LI altRewrite ( @+! "|" &LI altRewrite @- )*
    ;
    
altRewrite: (elementNoOptionSpec)+; //rewrite;    

elementNoOptionSpec:
		atom [ebnfSuffix]
	|	ebnf
//	|   ACTION
//	|   treeSpec
	;

atom:   
		terminal | <RULE_REF>
    ;

/** Matches ENBF blocks (and token sets via block rule) */
ebnf	:	block [LL(1) blockModifier]	;
	
blockModifier: "?"
		|	"*"
		|	"+"
		|   "^"
		|   "!";

terminal
    :   	<CHAR_LITERAL>
		|   <TOKEN_REF>
		|   <STRING_LITERAL>
		|   "."				
		|	"!"
	;

notTerminal
	:   <CHAR_LITERAL>
	|	<TOKEN_REF>
	|	<STRING_LITERAL>
	;
	
ebnfSuffix
	:	"?"
  	|	"*"
   	|	"+"
	;
	


RuleId	:	<TOKEN_REF>
	|	<RULE_REF> 
	;

