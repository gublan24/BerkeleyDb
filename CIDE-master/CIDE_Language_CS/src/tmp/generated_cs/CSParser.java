/* Generated By:JavaCC: Do not edit this line. CSParser.java */
package tmp.generated_cs;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

  public class CSParser implements CSParserConstants {

  final public compilation_unit compilation_unit() throws ParseException {
        using_directive using_directive;
        ArrayList<using_directive> using_directiveList = new ArrayList<using_directive>();
        attributes_either attributes_either = null;
        compilation_unitEnd compilation_unitEnd = null;
        Token t;
        ASTStringNode eof;
        Token firstToken=token;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USING:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      using_directive = using_directive();
                                           using_directiveList.add(using_directive);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes_either = attributes_either();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case NAMESPACE:
    case NEW:
    case PRIVATE:
    case CLASS:
    case PROTECTED:
    case PUBLIC:
    case DELEGATE:
    case SEALED:
    case ENUM:
    case STRUCT:
    case UNSAFE:
    case INTERFACE:
    case INTERNAL:
      compilation_unitEnd = compilation_unitEnd();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    t = jj_consume_token(0);
                                                                                                                                                                                    eof=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new compilation_unit(using_directiveList, attributes_either, compilation_unitEnd, eof, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public identifier identifier() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new identifier1(identifier, firstToken.next,token);}
      break;
    case MODULE:
      jj_consume_token(MODULE);
         {if (true) return new identifier2(firstToken.next,token);}
      break;
    case ASSEMBLY:
      jj_consume_token(ASSEMBLY);
         {if (true) return new identifier3(firstToken.next,token);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public literal literal() throws ParseException {
        boolean_literal boolean_literal;
        Token t;
        ASTStringNode numeric_literal;
        ASTStringNode hexadecimal_integer_literal;
        ASTStringNode character_literal;
        ASTStringNode regular_string_literal;
        ASTStringNode verbatim_string_literal;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
      boolean_literal = boolean_literal();
         {if (true) return new literal1(boolean_literal, firstToken.next,token);}
      break;
    case NUMERIC_LITERAL:
      t = jj_consume_token(NUMERIC_LITERAL);
                            numeric_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new literal2(numeric_literal, firstToken.next,token);}
      break;
    case HEXADECIMAL_INTEGER_LITERAL:
      t = jj_consume_token(HEXADECIMAL_INTEGER_LITERAL);
                                        hexadecimal_integer_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new literal3(hexadecimal_integer_literal, firstToken.next,token);}
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                              character_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new literal4(character_literal, firstToken.next,token);}
      break;
    case REGULAR_STRING_LITERAL:
      t = jj_consume_token(REGULAR_STRING_LITERAL);
                                   regular_string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new literal5(regular_string_literal, firstToken.next,token);}
      break;
    case VERBATIM_STRING_LITERAL:
      t = jj_consume_token(VERBATIM_STRING_LITERAL);
                                    verbatim_string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new literal6(verbatim_string_literal, firstToken.next,token);}
      break;
    case NULL:
      jj_consume_token(NULL);
         {if (true) return new literal7(firstToken.next,token);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean_literal boolean_literal() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
         {if (true) return new boolean_literal1(firstToken.next,token);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
         {if (true) return new boolean_literal2(firstToken.next,token);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public type_name type_name() throws ParseException {
        identifier identifier;
        identifier identifier1;
        ArrayList<identifier> identifier1List = new ArrayList<identifier>();
        Token firstToken=token;
    identifier = identifier();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(DOT);
      identifier1 = identifier();
                                                              identifier1List.add(identifier1);
    }
         {if (true) return new type_name(identifier, identifier1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public type type() throws ParseException {
        non_array_type non_array_type;
        rank_specifiers rank_specifiers = null;
        ASTTextNode text146 = null;
        Token firstToken=token;
    non_array_type = non_array_type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      rank_specifiers = rank_specifiers();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
                                                                                  text146=new ASTTextNode("*",new WToken(token));
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
         {if (true) return new type(non_array_type, rank_specifiers, text146, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public rank_specifiers rank_specifiers() throws ParseException {
        rank_specifier rank_specifier;
        ArrayList<rank_specifier> rank_specifierList = new ArrayList<rank_specifier>();
        Token firstToken=token;
    label_3:
    while (true) {
      rank_specifier = rank_specifier();
                                         rank_specifierList.add(rank_specifier);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
    }
         {if (true) return new rank_specifiers(rank_specifierList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public rank_specifier rank_specifier() throws ParseException {
        ASTTextNode text147;
        ArrayList<ASTTextNode> text147List = new ArrayList<ASTTextNode>();
        Token firstToken=token;
    jj_consume_token(LBRACK);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
                  text147=new ASTTextNode(",",new WToken(token));
                                                                   text147List.add(text147);
    }
    jj_consume_token(RBRACK);
         {if (true) return new rank_specifier(text147List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public non_array_type non_array_type() throws ParseException {
        predefined_type predefined_type;
        type_name type_name;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
      predefined_type = predefined_type();
         {if (true) return new non_array_type1(predefined_type, firstToken.next,token);}
      break;
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      type_name = type_name();
         {if (true) return new non_array_type2(type_name, firstToken.next,token);}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public predefined_type predefined_type() throws ParseException {
        simple_type simple_type;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
      simple_type = simple_type();
         {if (true) return new predefined_type1(simple_type, firstToken.next,token);}
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
         {if (true) return new predefined_type2(firstToken.next,token);}
      break;
    case STRING:
      jj_consume_token(STRING);
         {if (true) return new predefined_type3(firstToken.next,token);}
      break;
    case VOID:
      jj_consume_token(VOID);
         {if (true) return new predefined_type4(firstToken.next,token);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public simple_type simple_type() throws ParseException {
        numeric_type numeric_type;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
      numeric_type = numeric_type();
         {if (true) return new simple_type1(numeric_type, firstToken.next,token);}
      break;
    case BOOL:
      jj_consume_token(BOOL);
         {if (true) return new simple_type2(firstToken.next,token);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public numeric_type numeric_type() throws ParseException {
        integral_type integral_type;
        floating_point_type floating_point_type;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BYTE:
    case CHAR:
    case SBYTE:
    case SHORT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
      integral_type = integral_type();
         {if (true) return new numeric_type1(integral_type, firstToken.next,token);}
      break;
    case DOUBLE:
    case FLOAT:
      floating_point_type = floating_point_type();
         {if (true) return new numeric_type2(floating_point_type, firstToken.next,token);}
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
         {if (true) return new numeric_type3(firstToken.next,token);}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public integral_type integral_type() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SBYTE:
      jj_consume_token(SBYTE);
         {if (true) return new integral_type1(firstToken.next,token);}
      break;
    case BYTE:
      jj_consume_token(BYTE);
         {if (true) return new integral_type2(firstToken.next,token);}
      break;
    case SHORT:
      jj_consume_token(SHORT);
         {if (true) return new integral_type3(firstToken.next,token);}
      break;
    case USHORT:
      jj_consume_token(USHORT);
         {if (true) return new integral_type4(firstToken.next,token);}
      break;
    case INT:
      jj_consume_token(INT);
         {if (true) return new integral_type5(firstToken.next,token);}
      break;
    case UINT:
      jj_consume_token(UINT);
         {if (true) return new integral_type6(firstToken.next,token);}
      break;
    case LONG:
      jj_consume_token(LONG);
         {if (true) return new integral_type7(firstToken.next,token);}
      break;
    case ULONG:
      jj_consume_token(ULONG);
         {if (true) return new integral_type8(firstToken.next,token);}
      break;
    case CHAR:
      jj_consume_token(CHAR);
         {if (true) return new integral_type9(firstToken.next,token);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public class_type class_type() throws ParseException {
        type_name type_name;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      type_name = type_name();
         {if (true) return new class_type1(type_name, firstToken.next,token);}
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
         {if (true) return new class_type2(firstToken.next,token);}
      break;
    case STRING:
      jj_consume_token(STRING);
         {if (true) return new class_type3(firstToken.next,token);}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public floating_point_type floating_point_type() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      jj_consume_token(FLOAT);
         {if (true) return new floating_point_type1(firstToken.next,token);}
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
         {if (true) return new floating_point_type2(firstToken.next,token);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public expression expression() throws ParseException {
        conditional_expression conditional_expression;
        expressionInternal expressionInternal = null;
        Token firstToken=token;
    conditional_expression = conditional_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_ASN:
    case MINUS_ASN:
    case STAR_ASN:
    case DIV_ASN:
    case MOD_ASN:
    case SL_ASN:
    case SR_ASN:
    case BSR_ASN:
    case BAND_ASN:
    case BOR_ASN:
    case BXOR_ASN:
    case ASSIGN:
      expressionInternal = expressionInternal();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
         {if (true) return new expression(conditional_expression, expressionInternal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public expressionInternal expressionInternal() throws ParseException {
        assignment_operator assignment_operator;
        expression expression;
        Token firstToken=token;
    assignment_operator = assignment_operator();
    expression = expression();
         {if (true) return new expressionInternal(assignment_operator, expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public assignment assignment() throws ParseException {
        conditional_expression conditional_expression;
        assignment_operator assignment_operator;
        expression expression;
        Token firstToken=token;
    conditional_expression = conditional_expression();
    assignment_operator = assignment_operator();
    expression = expression();
         {if (true) return new assignment(conditional_expression, assignment_operator, expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public assignment_operator assignment_operator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
         {if (true) return new assignment_operator1(firstToken.next,token);}
      break;
    case PLUS_ASN:
      jj_consume_token(PLUS_ASN);
         {if (true) return new assignment_operator2(firstToken.next,token);}
      break;
    case MINUS_ASN:
      jj_consume_token(MINUS_ASN);
         {if (true) return new assignment_operator3(firstToken.next,token);}
      break;
    case STAR_ASN:
      jj_consume_token(STAR_ASN);
         {if (true) return new assignment_operator4(firstToken.next,token);}
      break;
    case DIV_ASN:
      jj_consume_token(DIV_ASN);
         {if (true) return new assignment_operator5(firstToken.next,token);}
      break;
    case MOD_ASN:
      jj_consume_token(MOD_ASN);
         {if (true) return new assignment_operator6(firstToken.next,token);}
      break;
    case BAND_ASN:
      jj_consume_token(BAND_ASN);
         {if (true) return new assignment_operator7(firstToken.next,token);}
      break;
    case BOR_ASN:
      jj_consume_token(BOR_ASN);
         {if (true) return new assignment_operator8(firstToken.next,token);}
      break;
    case BXOR_ASN:
      jj_consume_token(BXOR_ASN);
         {if (true) return new assignment_operator9(firstToken.next,token);}
      break;
    case SL_ASN:
      jj_consume_token(SL_ASN);
         {if (true) return new assignment_operator10(firstToken.next,token);}
      break;
    case SR_ASN:
      jj_consume_token(SR_ASN);
         {if (true) return new assignment_operator11(firstToken.next,token);}
      break;
    case BSR_ASN:
      jj_consume_token(BSR_ASN);
         {if (true) return new assignment_operator12(firstToken.next,token);}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public conditional_expression conditional_expression() throws ParseException {
        conditional_or_expression conditional_or_expression;
        conditional_expressionInternal conditional_expressionInternal = null;
        Token firstToken=token;
    conditional_or_expression = conditional_or_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QMARK:
      conditional_expressionInternal = conditional_expressionInternal();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
         {if (true) return new conditional_expression(conditional_or_expression, conditional_expressionInternal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public conditional_expressionInternal conditional_expressionInternal() throws ParseException {
        expression expression;
        conditional_expression conditional_expression;
        Token firstToken=token;
    jj_consume_token(QMARK);
    expression = expression();
    jj_consume_token(COLON);
    conditional_expression = conditional_expression();
         {if (true) return new conditional_expressionInternal(expression, conditional_expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public conditional_or_expression conditional_or_expression() throws ParseException {
        conditional_and_expression conditional_and_expression;
        conditional_or_expression conditional_or_expression = null;
        Token firstToken=token;
    conditional_and_expression = conditional_and_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOR:
      jj_consume_token(LOR);
      conditional_or_expression = conditional_or_expression();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
         {if (true) return new conditional_or_expression(conditional_and_expression, conditional_or_expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public conditional_and_expression conditional_and_expression() throws ParseException {
        inclusive_or_expression inclusive_or_expression;
        conditional_and_expression conditional_and_expression = null;
        Token firstToken=token;
    inclusive_or_expression = inclusive_or_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LAND:
      jj_consume_token(LAND);
      conditional_and_expression = conditional_and_expression();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
         {if (true) return new conditional_and_expression(inclusive_or_expression, conditional_and_expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public inclusive_or_expression inclusive_or_expression() throws ParseException {
        exclusive_or_expression exclusive_or_expression;
        inclusive_or_expression inclusive_or_expression = null;
        Token firstToken=token;
    exclusive_or_expression = exclusive_or_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOR:
      jj_consume_token(BOR);
      inclusive_or_expression = inclusive_or_expression();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
         {if (true) return new inclusive_or_expression(exclusive_or_expression, inclusive_or_expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public exclusive_or_expression exclusive_or_expression() throws ParseException {
        and_expression and_expression;
        exclusive_or_expression exclusive_or_expression = null;
        Token firstToken=token;
    and_expression = and_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CARET:
      jj_consume_token(CARET);
      exclusive_or_expression = exclusive_or_expression();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
         {if (true) return new exclusive_or_expression(and_expression, exclusive_or_expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public and_expression and_expression() throws ParseException {
        equality_expression equality_expression;
        and_expression and_expression = null;
        Token firstToken=token;
    equality_expression = equality_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMPER:
      jj_consume_token(AMPER);
      and_expression = and_expression();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
         {if (true) return new and_expression(equality_expression, and_expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public equality_expression equality_expression() throws ParseException {
        relational_expression relational_expression;
        equality_expressionInternal equality_expressionInternal = null;
        Token firstToken=token;
    relational_expression = relational_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
    case NOT_EQUAL:
      equality_expressionInternal = equality_expressionInternal();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
         {if (true) return new equality_expression(relational_expression, equality_expressionInternal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public equality_expressionInternal equality_expressionInternal() throws ParseException {
        equality_operator equality_operator;
        equality_expression equality_expression;
        Token firstToken=token;
    equality_operator = equality_operator();
    equality_expression = equality_expression();
         {if (true) return new equality_expressionInternal(equality_operator, equality_expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public equality_operator equality_operator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
         {if (true) return new equality_operator1(firstToken.next,token);}
      break;
    case NOT_EQUAL:
      jj_consume_token(NOT_EQUAL);
         {if (true) return new equality_operator2(firstToken.next,token);}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public relational_expression relational_expression() throws ParseException {
        shift_expression shift_expression;
        relational_expressionInternal relational_expressionInternal = null;
        Token firstToken=token;
    shift_expression = shift_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case IS:
    case LTHAN:
    case LE:
    case GTHAN:
    case GE:
      relational_expressionInternal = relational_expressionInternal();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
         {if (true) return new relational_expression(shift_expression, relational_expressionInternal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public relational_expressionInternal relational_expressionInternal() throws ParseException {
        relational_operator relational_operator;
        relational_expression relational_expression;
        relational_operator2I relational_operator2I;
        type type;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LTHAN:
    case LE:
    case GTHAN:
    case GE:
      relational_operator = relational_operator();
      relational_expression = relational_expression();
         {if (true) return new relational_expressionInternal1(relational_operator, relational_expression, firstToken.next,token);}
      break;
    case AS:
    case IS:
      relational_operator2I = relational_operator2I();
      type = type();
         {if (true) return new relational_expressionInternal2(relational_operator2I, type, firstToken.next,token);}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public relational_operator relational_operator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LTHAN:
      jj_consume_token(LTHAN);
         {if (true) return new relational_operator1(firstToken.next,token);}
      break;
    case GTHAN:
      jj_consume_token(GTHAN);
         {if (true) return new relational_operator2(firstToken.next,token);}
      break;
    case LE:
      jj_consume_token(LE);
         {if (true) return new relational_operator3(firstToken.next,token);}
      break;
    case GE:
      jj_consume_token(GE);
         {if (true) return new relational_operator4(firstToken.next,token);}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public relational_operator2I relational_operator2I() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      jj_consume_token(IS);
         {if (true) return new relational_operator2I1(firstToken.next,token);}
      break;
    case AS:
      jj_consume_token(AS);
         {if (true) return new relational_operator2I2(firstToken.next,token);}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public shift_expression shift_expression() throws ParseException {
        additive_expression additive_expression;
        shift_expressionInternal shift_expressionInternal = null;
        Token firstToken=token;
    additive_expression = additive_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SL:
    case SR:
      shift_expressionInternal = shift_expressionInternal();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
         {if (true) return new shift_expression(additive_expression, shift_expressionInternal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public shift_expressionInternal shift_expressionInternal() throws ParseException {
        shift_operator shift_operator;
        shift_expression shift_expression;
        Token firstToken=token;
    shift_operator = shift_operator();
    shift_expression = shift_expression();
         {if (true) return new shift_expressionInternal(shift_operator, shift_expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public shift_operator shift_operator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SL:
      jj_consume_token(SL);
         {if (true) return new shift_operator1(firstToken.next,token);}
      break;
    case SR:
      jj_consume_token(SR);
         {if (true) return new shift_operator2(firstToken.next,token);}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public additive_expression additive_expression() throws ParseException {
        multiplicative_expression multiplicative_expression;
        additive_expressionInternal additive_expressionInternal = null;
        Token firstToken=token;
    multiplicative_expression = multiplicative_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      additive_expressionInternal = additive_expressionInternal();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
         {if (true) return new additive_expression(multiplicative_expression, additive_expressionInternal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public additive_expressionInternal additive_expressionInternal() throws ParseException {
        additive_operator additive_operator;
        additive_expression additive_expression;
        Token firstToken=token;
    additive_operator = additive_operator();
    additive_expression = additive_expression();
         {if (true) return new additive_expressionInternal(additive_operator, additive_expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public additive_operator additive_operator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
         {if (true) return new additive_operator1(firstToken.next,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
         {if (true) return new additive_operator2(firstToken.next,token);}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public multiplicative_expression multiplicative_expression() throws ParseException {
        unary_expression unary_expression;
        multiplicative_expressionInternal multiplicative_expressionInternal = null;
        Token firstToken=token;
    unary_expression = unary_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case DIV:
    case MOD:
      multiplicative_expressionInternal = multiplicative_expressionInternal();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
         {if (true) return new multiplicative_expression(unary_expression, multiplicative_expressionInternal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public multiplicative_expressionInternal multiplicative_expressionInternal() throws ParseException {
        multiplicative_operator multiplicative_operator;
        multiplicative_expression multiplicative_expression;
        Token firstToken=token;
    multiplicative_operator = multiplicative_operator();
    multiplicative_expression = multiplicative_expression();
         {if (true) return new multiplicative_expressionInternal(multiplicative_operator, multiplicative_expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public multiplicative_operator multiplicative_operator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new multiplicative_operator1(firstToken.next,token);}
      break;
    case DIV:
      jj_consume_token(DIV);
         {if (true) return new multiplicative_operator2(firstToken.next,token);}
      break;
    case MOD:
      jj_consume_token(MOD);
         {if (true) return new multiplicative_operator3(firstToken.next,token);}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public unary_expression unary_expression() throws ParseException {
        unary_operator unary_operator;
        unary_expression unary_expression;
        cast_expression cast_expression;
        primary_expression primary_expression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
      unary_operator = unary_operator();
      unary_expression = unary_expression();
         {if (true) return new unary_expression1(unary_operator, unary_expression, firstToken.next,token);}
      break;
    default:
      jj_la1[38] = jj_gen;
      if (jj_2_1(2147483647)) {
        cast_expression = cast_expression();
         {if (true) return new unary_expression2(cast_expression, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LONG:
        case BASE:
        case NEW:
        case BOOL:
        case NULL:
        case OBJECT:
        case BYTE:
        case CHAR:
        case CHECKED:
        case DECIMAL:
        case SBYTE:
        case DOUBLE:
        case SHORT:
        case SIZEOF:
        case STRING:
        case FALSE:
        case THIS:
        case FLOAT:
        case TRUE:
        case TYPEOF:
        case UINT:
        case ULONG:
        case UNCHECKED:
        case INT:
        case USHORT:
        case VOID:
        case MODULE:
        case ASSEMBLY:
        case LPAREN:
        case IDENTIFIER:
        case NUMERIC_LITERAL:
        case HEXADECIMAL_INTEGER_LITERAL:
        case CHARACTER_LITERAL:
        case REGULAR_STRING_LITERAL:
        case VERBATIM_STRING_LITERAL:
          primary_expression = primary_expression();
         {if (true) return new unary_expression3(primary_expression, firstToken.next,token);}
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public unary_operator unary_operator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
         {if (true) return new unary_operator1(firstToken.next,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
         {if (true) return new unary_operator2(firstToken.next,token);}
      break;
    case BANG:
      jj_consume_token(BANG);
         {if (true) return new unary_operator3(firstToken.next,token);}
      break;
    case TILDE:
      jj_consume_token(TILDE);
         {if (true) return new unary_operator4(firstToken.next,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new unary_operator5(firstToken.next,token);}
      break;
    case INC:
      jj_consume_token(INC);
         {if (true) return new unary_operator6(firstToken.next,token);}
      break;
    case DEC:
      jj_consume_token(DEC);
         {if (true) return new unary_operator7(firstToken.next,token);}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public cast_expression cast_expression() throws ParseException {
        type type;
        unary_expression unary_expression;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    type = type();
    jj_consume_token(RPAREN);
    unary_expression = unary_expression();
         {if (true) return new cast_expression(type, unary_expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public primary_expression primary_expression() throws ParseException {
        primary_expression_start primary_expression_start;
        primary_expression_postfix primary_expression_postfix = null;
        creation_expression creation_expression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      primary_expression_start = primary_expression_start();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LBRACK:
      case LPAREN:
      case INC:
      case DEC:
      case ARROW:
        primary_expression_postfix = primary_expression_postfix();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
         {if (true) return new primary_expression1(primary_expression_start, primary_expression_postfix, firstToken.next,token);}
      break;
    case NEW:
      creation_expression = creation_expression();
         {if (true) return new primary_expression2(creation_expression, firstToken.next,token);}
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public primary_expression_start primary_expression_start() throws ParseException {
        literal literal;
        identifier identifier;
        parenthesized_expression parenthesized_expression;
        predefined_type predefined_type;
        member_access member_access;
        this_access this_access;
        base_access base_access;
        typeof_expression typeof_expression;
        sizeof_expression sizeof_expression;
        checked_expression checked_expression;
        unchecked_expression unchecked_expression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    case FALSE:
    case TRUE:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      literal = literal();
         {if (true) return new primary_expression_start1(literal, firstToken.next,token);}
      break;
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      identifier = identifier();
         {if (true) return new primary_expression_start2(identifier, firstToken.next,token);}
      break;
    case LPAREN:
      parenthesized_expression = parenthesized_expression();
         {if (true) return new primary_expression_start3(parenthesized_expression, firstToken.next,token);}
      break;
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
      predefined_type = predefined_type();
      member_access = member_access();
         {if (true) return new primary_expression_start4(predefined_type, member_access, firstToken.next,token);}
      break;
    case THIS:
      this_access = this_access();
         {if (true) return new primary_expression_start5(this_access, firstToken.next,token);}
      break;
    case BASE:
      base_access = base_access();
         {if (true) return new primary_expression_start6(base_access, firstToken.next,token);}
      break;
    case TYPEOF:
      typeof_expression = typeof_expression();
         {if (true) return new primary_expression_start7(typeof_expression, firstToken.next,token);}
      break;
    case SIZEOF:
      sizeof_expression = sizeof_expression();
         {if (true) return new primary_expression_start8(sizeof_expression, firstToken.next,token);}
      break;
    case CHECKED:
      checked_expression = checked_expression();
         {if (true) return new primary_expression_start9(checked_expression, firstToken.next,token);}
      break;
    case UNCHECKED:
      unchecked_expression = unchecked_expression();
         {if (true) return new primary_expression_start10(unchecked_expression, firstToken.next,token);}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public primary_expression_postfix primary_expression_postfix() throws ParseException {
        primary_expression_postfixInternal primary_expression_postfixInternal;
        ArrayList<primary_expression_postfixInternal> primary_expression_postfixInternalList = new ArrayList<primary_expression_postfixInternal>();
        Token firstToken=token;
    label_5:
    while (true) {
      primary_expression_postfixInternal = primary_expression_postfixInternal();
                                                                                 primary_expression_postfixInternalList.add(primary_expression_postfixInternal);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LBRACK:
      case LPAREN:
      case INC:
      case DEC:
      case ARROW:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_5;
      }
    }
         {if (true) return new primary_expression_postfix(primary_expression_postfixInternalList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public primary_expression_postfixInternal primary_expression_postfixInternal() throws ParseException {
        member_access member_access;
        invocation_expression invocation_expression;
        element_access element_access;
        post_increment_expression post_increment_expression;
        post_decrement_expression post_decrement_expression;
        pointer_member_access pointer_member_access;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      member_access = member_access();
         {if (true) return new primary_expression_postfixInternal1(member_access, firstToken.next,token);}
      break;
    case LPAREN:
      invocation_expression = invocation_expression();
         {if (true) return new primary_expression_postfixInternal2(invocation_expression, firstToken.next,token);}
      break;
    case LBRACK:
      element_access = element_access();
         {if (true) return new primary_expression_postfixInternal3(element_access, firstToken.next,token);}
      break;
    case INC:
      post_increment_expression = post_increment_expression();
         {if (true) return new primary_expression_postfixInternal4(post_increment_expression, firstToken.next,token);}
      break;
    case DEC:
      post_decrement_expression = post_decrement_expression();
         {if (true) return new primary_expression_postfixInternal5(post_decrement_expression, firstToken.next,token);}
      break;
    case ARROW:
      pointer_member_access = pointer_member_access();
         {if (true) return new primary_expression_postfixInternal6(pointer_member_access, firstToken.next,token);}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public array_creation_postfix_expression array_creation_postfix_expression() throws ParseException {
        array_creation_postfix_expressionInternal array_creation_postfix_expressionInternal;
        ArrayList<array_creation_postfix_expressionInternal> array_creation_postfix_expressionInternalList = new ArrayList<array_creation_postfix_expressionInternal>();
        Token firstToken=token;
    label_6:
    while (true) {
      array_creation_postfix_expressionInternal = array_creation_postfix_expressionInternal();
                                                                                               array_creation_postfix_expressionInternalList.add(array_creation_postfix_expressionInternal);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LPAREN:
      case INC:
      case DEC:
      case ARROW:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_6;
      }
    }
         {if (true) return new array_creation_postfix_expression(array_creation_postfix_expressionInternalList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public array_creation_postfix_expressionInternal array_creation_postfix_expressionInternal() throws ParseException {
        member_access member_access;
        invocation_expression invocation_expression;
        post_increment_expression post_increment_expression;
        post_decrement_expression post_decrement_expression;
        pointer_member_access pointer_member_access;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      member_access = member_access();
         {if (true) return new array_creation_postfix_expressionInternal1(member_access, firstToken.next,token);}
      break;
    case LPAREN:
      invocation_expression = invocation_expression();
         {if (true) return new array_creation_postfix_expressionInternal2(invocation_expression, firstToken.next,token);}
      break;
    case INC:
      post_increment_expression = post_increment_expression();
         {if (true) return new array_creation_postfix_expressionInternal3(post_increment_expression, firstToken.next,token);}
      break;
    case DEC:
      post_decrement_expression = post_decrement_expression();
         {if (true) return new array_creation_postfix_expressionInternal4(post_decrement_expression, firstToken.next,token);}
      break;
    case ARROW:
      pointer_member_access = pointer_member_access();
         {if (true) return new array_creation_postfix_expressionInternal5(pointer_member_access, firstToken.next,token);}
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public creation_expression creation_expression() throws ParseException {
        non_array_type non_array_type;
        creation_expressionPostFix creation_expressionPostFix;
        Token firstToken=token;
    jj_consume_token(NEW);
    non_array_type = non_array_type();
    creation_expressionPostFix = creation_expressionPostFix();
         {if (true) return new creation_expression(non_array_type, creation_expressionPostFix, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public creation_expressionPostFix creation_expressionPostFix() throws ParseException {
        argument_list argument_list = null;
        primary_expression_postfix primary_expression_postfix = null;
        expression_list expression_list;
        rank_specifiers rank_specifiers = null;
        array_initializer array_initializer = null;
        array_creation_postfix_expression array_creation_postfix_expression = null;
        rank_specifiers rank_specifiers1;
        array_initializer array_initializer1;
        array_creation_postfix_expression array_creation_postfix_expression1 = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case BASE:
      case NEW:
      case BOOL:
      case NULL:
      case OBJECT:
      case BYTE:
      case OUT:
      case CHAR:
      case CHECKED:
      case DECIMAL:
      case REF:
      case SBYTE:
      case DOUBLE:
      case SHORT:
      case SIZEOF:
      case STRING:
      case FALSE:
      case THIS:
      case FLOAT:
      case TRUE:
      case TYPEOF:
      case UINT:
      case ULONG:
      case UNCHECKED:
      case INT:
      case USHORT:
      case VOID:
      case MODULE:
      case ASSEMBLY:
      case LPAREN:
      case PLUS:
      case MINUS:
      case STAR:
      case INC:
      case DEC:
      case TILDE:
      case BANG:
      case IDENTIFIER:
      case NUMERIC_LITERAL:
      case HEXADECIMAL_INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case REGULAR_STRING_LITERAL:
      case VERBATIM_STRING_LITERAL:
        argument_list = argument_list();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LBRACK:
      case LPAREN:
      case INC:
      case DEC:
      case ARROW:
        primary_expression_postfix = primary_expression_postfix();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
         {if (true) return new creation_expressionPostFix1(argument_list, primary_expression_postfix, firstToken.next,token);}
      break;
    default:
      jj_la1[54] = jj_gen;
      if (jj_2_2(2)) {
        jj_consume_token(LBRACK);
        expression_list = expression_list();
        jj_consume_token(RBRACK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACK:
          rank_specifiers = rank_specifiers();
          break;
        default:
          jj_la1[50] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          array_initializer = array_initializer();
          break;
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
        case LPAREN:
        case INC:
        case DEC:
        case ARROW:
          array_creation_postfix_expression = array_creation_postfix_expression();
          break;
        default:
          jj_la1[52] = jj_gen;
          ;
        }
         {if (true) return new creation_expressionPostFix2(expression_list, rank_specifiers, array_initializer, array_creation_postfix_expression, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACK:
          rank_specifiers1 = rank_specifiers();
          array_initializer1 = array_initializer();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
          case LPAREN:
          case INC:
          case DEC:
          case ARROW:
            array_creation_postfix_expression1 = array_creation_postfix_expression();
            break;
          default:
            jj_la1[53] = jj_gen;
            ;
          }
         {if (true) return new creation_expressionPostFix3(rank_specifiers1, array_initializer1, array_creation_postfix_expression1, firstToken.next,token);}
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public parenthesized_expression parenthesized_expression() throws ParseException {
        expression expression;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    expression = expression();
    jj_consume_token(RPAREN);
         {if (true) return new parenthesized_expression(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public member_access member_access() throws ParseException {
        identifier identifier;
        Token firstToken=token;
    jj_consume_token(DOT);
    identifier = identifier();
         {if (true) return new member_access(identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public invocation_expression invocation_expression() throws ParseException {
        argument_list argument_list = null;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      argument_list = argument_list();
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
         {if (true) return new invocation_expression(argument_list, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public argument_list argument_list() throws ParseException {
        argument argument;
        argument argument1;
        ArrayList<argument> argument1List = new ArrayList<argument>();
        Token firstToken=token;
    argument = argument();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      argument1 = argument();
                                                      argument1List.add(argument1);
    }
         {if (true) return new argument_list(argument, argument1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public argument argument() throws ParseException {
        argumentPrefix argumentPrefix = null;
        expression expression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUT:
    case REF:
      argumentPrefix = argumentPrefix();
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    expression = expression();
         {if (true) return new argument(argumentPrefix, expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public argumentPrefix argumentPrefix() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REF:
      jj_consume_token(REF);
         {if (true) return new argumentPrefix1(firstToken.next,token);}
      break;
    case OUT:
      jj_consume_token(OUT);
         {if (true) return new argumentPrefix2(firstToken.next,token);}
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public element_access element_access() throws ParseException {
        argument_list argument_list;
        Token firstToken=token;
    jj_consume_token(LBRACK);
    argument_list = argument_list();
    jj_consume_token(RBRACK);
         {if (true) return new element_access(argument_list, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public expression_list expression_list() throws ParseException {
        expression expression;
        expression_listList expression_listList;
        ArrayList<expression_listList> expression_listListList = new ArrayList<expression_listList>();
        Token firstToken=token;
    expression = expression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_8;
      }
      expression_listList = expression_listList();
                                                                           expression_listListList.add(expression_listList);
    }
         {if (true) return new expression_list(expression, expression_listListList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public expression_listList expression_listList() throws ParseException {
        expression expression;
        Token firstToken=token;
    jj_consume_token(COMMA);
    expression = expression();
         {if (true) return new expression_listList(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public this_access this_access() throws ParseException {
        Token firstToken=token;
    jj_consume_token(THIS);
         {if (true) return new this_access(firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public base_access base_access() throws ParseException {
        member_access member_access;
        element_access element_access;
        Token firstToken=token;
    if (jj_2_3(2)) {
      jj_consume_token(BASE);
      member_access = member_access();
         {if (true) return new base_access1(member_access, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BASE:
        jj_consume_token(BASE);
        element_access = element_access();
         {if (true) return new base_access2(element_access, firstToken.next,token);}
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public post_increment_expression post_increment_expression() throws ParseException {
        Token firstToken=token;
    jj_consume_token(INC);
         {if (true) return new post_increment_expression(firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public post_decrement_expression post_decrement_expression() throws ParseException {
        Token firstToken=token;
    jj_consume_token(DEC);
         {if (true) return new post_decrement_expression(firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public typeof_expression typeof_expression() throws ParseException {
        type type;
        Token firstToken=token;
    jj_consume_token(TYPEOF);
    jj_consume_token(LPAREN);
    type = type();
    jj_consume_token(RPAREN);
         {if (true) return new typeof_expression(type, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public checked_expression checked_expression() throws ParseException {
        expression expression;
        Token firstToken=token;
    jj_consume_token(CHECKED);
    jj_consume_token(LPAREN);
    expression = expression();
    jj_consume_token(RPAREN);
         {if (true) return new checked_expression(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public unchecked_expression unchecked_expression() throws ParseException {
        expression expression;
        Token firstToken=token;
    jj_consume_token(UNCHECKED);
    jj_consume_token(LPAREN);
    expression = expression();
    jj_consume_token(RPAREN);
         {if (true) return new unchecked_expression(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public statement statement() throws ParseException {
        identifier identifier;
        statement statement;
        local_variable_declaration local_variable_declaration;
        local_constant_declaration local_constant_declaration;
        embedded_statement embedded_statement;
        Token firstToken=token;
    if (jj_2_4(2)) {
      identifier = identifier();
      jj_consume_token(COLON);
      statement = statement();
         {if (true) return new statement1(identifier, statement, firstToken.next,token);}
    } else if (jj_2_5(2147483647)) {
      local_variable_declaration = local_variable_declaration();
      jj_consume_token(SEMI);
         {if (true) return new statement2(local_variable_declaration, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        local_constant_declaration = local_constant_declaration();
        jj_consume_token(SEMI);
         {if (true) return new statement3(local_constant_declaration, firstToken.next,token);}
        break;
      case LONG:
      case BASE:
      case NEW:
      case BOOL:
      case NULL:
      case BREAK:
      case OBJECT:
      case BYTE:
      case CHAR:
      case CHECKED:
      case CONTINUE:
      case DECIMAL:
      case RETURN:
      case SBYTE:
      case DO:
      case DOUBLE:
      case SHORT:
      case SIZEOF:
      case STRING:
      case FALSE:
      case SWITCH:
      case THIS:
      case FIXED:
      case THROW:
      case FLOAT:
      case TRUE:
      case FOR:
      case TRY:
      case FOREACH:
      case TYPEOF:
      case GOTO:
      case UINT:
      case IF:
      case ULONG:
      case UNCHECKED:
      case UNSAFE:
      case INT:
      case USHORT:
      case USING:
      case VOID:
      case LOCK:
      case WHILE:
      case MODULE:
      case ASSEMBLY:
      case LBRACE:
      case LPAREN:
      case PLUS:
      case MINUS:
      case STAR:
      case INC:
      case DEC:
      case TILDE:
      case BANG:
      case SEMI:
      case IDENTIFIER:
      case NUMERIC_LITERAL:
      case HEXADECIMAL_INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case REGULAR_STRING_LITERAL:
      case VERBATIM_STRING_LITERAL:
        embedded_statement = embedded_statement();
         {if (true) return new statement4(embedded_statement, firstToken.next,token);}
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public local_variable_declaration local_variable_declaration() throws ParseException {
        type type;
        local_variable_declarators local_variable_declarators;
        Token firstToken=token;
    type = type();
    local_variable_declarators = local_variable_declarators();
         {if (true) return new local_variable_declaration(type, local_variable_declarators, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public local_variable_declarators local_variable_declarators() throws ParseException {
        local_variable_declarator local_variable_declarator;
        local_variable_declarators local_variable_declarators = null;
        Token firstToken=token;
    local_variable_declarator = local_variable_declarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      local_variable_declarators = local_variable_declarators();
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
         {if (true) return new local_variable_declarators(local_variable_declarator, local_variable_declarators, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public local_variable_declarator local_variable_declarator() throws ParseException {
        identifier identifier;
        local_variable_assignment local_variable_assignment = null;
        Token firstToken=token;
    identifier = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      local_variable_assignment = local_variable_assignment();
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
         {if (true) return new local_variable_declarator(identifier, local_variable_assignment, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public local_variable_assignment local_variable_assignment() throws ParseException {
        local_variable_initializer local_variable_initializer;
        Token firstToken=token;
    jj_consume_token(ASSIGN);
    local_variable_initializer = local_variable_initializer();
         {if (true) return new local_variable_assignment(local_variable_initializer, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public local_variable_initializer local_variable_initializer() throws ParseException {
        array_initializer array_initializer;
        expression expression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      array_initializer = array_initializer();
         {if (true) return new local_variable_initializer1(array_initializer, firstToken.next,token);}
      break;
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression = expression();
         {if (true) return new local_variable_initializer2(expression, firstToken.next,token);}
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public local_constant_declaration local_constant_declaration() throws ParseException {
        type type;
        local_constant_declarators local_constant_declarators;
        Token firstToken=token;
    jj_consume_token(CONST);
    type = type();
    local_constant_declarators = local_constant_declarators();
         {if (true) return new local_constant_declaration(type, local_constant_declarators, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public local_constant_declarators local_constant_declarators() throws ParseException {
        local_constant_declarator local_constant_declarator;
        local_constant_declarators local_constant_declarators = null;
        Token firstToken=token;
    local_constant_declarator = local_constant_declarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      local_constant_declarators = local_constant_declarators();
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
         {if (true) return new local_constant_declarators(local_constant_declarator, local_constant_declarators, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public local_constant_declarator local_constant_declarator() throws ParseException {
        identifier identifier;
        local_variable_initializer local_variable_initializer;
        Token firstToken=token;
    identifier = identifier();
    jj_consume_token(ASSIGN);
    local_variable_initializer = local_variable_initializer();
         {if (true) return new local_constant_declarator(identifier, local_variable_initializer, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public embedded_statement embedded_statement() throws ParseException {
        block block;
        selection_statement selection_statement;
        iteration_statement iteration_statement;
        jump_statement jump_statement;
        try_statement try_statement;
        checked_statement checked_statement;
        unchecked_statement unchecked_statement;
        lock_statement lock_statement;
        using_statement using_statement;
        unsafe_statement unsafe_statement;
        fixed_statement fixed_statement;
        expression_statement expression_statement;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      block = block();
         {if (true) return new embedded_statement1(block, firstToken.next,token);}
      break;
    case SEMI:
      jj_consume_token(SEMI);
         {if (true) return new embedded_statement2(firstToken.next,token);}
      break;
    case SWITCH:
    case IF:
      selection_statement = selection_statement();
         {if (true) return new embedded_statement3(selection_statement, firstToken.next,token);}
      break;
    case DO:
    case FOR:
    case FOREACH:
    case WHILE:
      iteration_statement = iteration_statement();
         {if (true) return new embedded_statement4(iteration_statement, firstToken.next,token);}
      break;
    case BREAK:
    case CONTINUE:
    case RETURN:
    case THROW:
    case GOTO:
      jump_statement = jump_statement();
         {if (true) return new embedded_statement5(jump_statement, firstToken.next,token);}
      break;
    case TRY:
      try_statement = try_statement();
         {if (true) return new embedded_statement6(try_statement, firstToken.next,token);}
      break;
    case CHECKED:
      checked_statement = checked_statement();
         {if (true) return new embedded_statement7(checked_statement, firstToken.next,token);}
      break;
    case UNCHECKED:
      unchecked_statement = unchecked_statement();
         {if (true) return new embedded_statement8(unchecked_statement, firstToken.next,token);}
      break;
    case LOCK:
      lock_statement = lock_statement();
         {if (true) return new embedded_statement9(lock_statement, firstToken.next,token);}
      break;
    case USING:
      using_statement = using_statement();
         {if (true) return new embedded_statement10(using_statement, firstToken.next,token);}
      break;
    case UNSAFE:
      unsafe_statement = unsafe_statement();
         {if (true) return new embedded_statement11(unsafe_statement, firstToken.next,token);}
      break;
    case FIXED:
      fixed_statement = fixed_statement();
         {if (true) return new embedded_statement12(fixed_statement, firstToken.next,token);}
      break;
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression_statement = expression_statement();
         {if (true) return new embedded_statement13(expression_statement, firstToken.next,token);}
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public block block() throws ParseException {
        statement statement;
        ArrayList<statement> statementList = new ArrayList<statement>();
        Token firstToken=token;
    jj_consume_token(LBRACE);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case BASE:
      case NEW:
      case BOOL:
      case NULL:
      case BREAK:
      case OBJECT:
      case BYTE:
      case CHAR:
      case CHECKED:
      case CONST:
      case CONTINUE:
      case DECIMAL:
      case RETURN:
      case SBYTE:
      case DO:
      case DOUBLE:
      case SHORT:
      case SIZEOF:
      case STRING:
      case FALSE:
      case SWITCH:
      case THIS:
      case FIXED:
      case THROW:
      case FLOAT:
      case TRUE:
      case FOR:
      case TRY:
      case FOREACH:
      case TYPEOF:
      case GOTO:
      case UINT:
      case IF:
      case ULONG:
      case UNCHECKED:
      case UNSAFE:
      case INT:
      case USHORT:
      case USING:
      case VOID:
      case LOCK:
      case WHILE:
      case MODULE:
      case ASSEMBLY:
      case LBRACE:
      case LPAREN:
      case PLUS:
      case MINUS:
      case STAR:
      case INC:
      case DEC:
      case TILDE:
      case BANG:
      case SEMI:
      case IDENTIFIER:
      case NUMERIC_LITERAL:
      case HEXADECIMAL_INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case REGULAR_STRING_LITERAL:
      case VERBATIM_STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_9;
      }
      statement = statement();
                                   statementList.add(statement);
    }
    jj_consume_token(RBRACE);
         {if (true) return new block(statementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public statement_list statement_list() throws ParseException {
        statement statement;
        ArrayList<statement> statementList = new ArrayList<statement>();
        Token firstToken=token;
    label_10:
    while (true) {
      statement = statement();
                               statementList.add(statement);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case BASE:
      case NEW:
      case BOOL:
      case NULL:
      case BREAK:
      case OBJECT:
      case BYTE:
      case CHAR:
      case CHECKED:
      case CONST:
      case CONTINUE:
      case DECIMAL:
      case RETURN:
      case SBYTE:
      case DO:
      case DOUBLE:
      case SHORT:
      case SIZEOF:
      case STRING:
      case FALSE:
      case SWITCH:
      case THIS:
      case FIXED:
      case THROW:
      case FLOAT:
      case TRUE:
      case FOR:
      case TRY:
      case FOREACH:
      case TYPEOF:
      case GOTO:
      case UINT:
      case IF:
      case ULONG:
      case UNCHECKED:
      case UNSAFE:
      case INT:
      case USHORT:
      case USING:
      case VOID:
      case LOCK:
      case WHILE:
      case MODULE:
      case ASSEMBLY:
      case LBRACE:
      case LPAREN:
      case PLUS:
      case MINUS:
      case STAR:
      case INC:
      case DEC:
      case TILDE:
      case BANG:
      case SEMI:
      case IDENTIFIER:
      case NUMERIC_LITERAL:
      case HEXADECIMAL_INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case REGULAR_STRING_LITERAL:
      case VERBATIM_STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_10;
      }
    }
         {if (true) return new statement_list(statementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public expression_statement expression_statement() throws ParseException {
        expression expression;
        Token firstToken=token;
    expression = expression();
    jj_consume_token(SEMI);
         {if (true) return new expression_statement(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public selection_statement selection_statement() throws ParseException {
        if_statement if_statement;
        switch_statement switch_statement;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      if_statement = if_statement();
         {if (true) return new selection_statement1(if_statement, firstToken.next,token);}
      break;
    case SWITCH:
      switch_statement = switch_statement();
         {if (true) return new selection_statement2(switch_statement, firstToken.next,token);}
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public if_statement if_statement() throws ParseException {
        expression expression;
        embedded_statement embedded_statement;
        embedded_statement embedded_statement1 = null;
        Token firstToken=token;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    expression = expression();
    jj_consume_token(RPAREN);
    embedded_statement = embedded_statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      embedded_statement1 = embedded_statement();
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
         {if (true) return new if_statement(expression, embedded_statement, embedded_statement1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public switch_statement switch_statement() throws ParseException {
        expression expression;
        switch_block switch_block;
        Token firstToken=token;
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    expression = expression();
    jj_consume_token(RPAREN);
    switch_block = switch_block();
         {if (true) return new switch_statement(expression, switch_block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public switch_block switch_block() throws ParseException {
        switch_section switch_section;
        ArrayList<switch_section> switch_sectionList = new ArrayList<switch_section>();
        Token firstToken=token;
    jj_consume_token(LBRACE);
    label_11:
    while (true) {
      switch_section = switch_section();
                                             switch_sectionList.add(switch_section);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case DEFAULTTOKEN:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_11;
      }
    }
    jj_consume_token(RBRACE);
         {if (true) return new switch_block(switch_sectionList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public switch_section switch_section() throws ParseException {
        switch_label switch_label;
        ArrayList<switch_label> switch_labelList = new ArrayList<switch_label>();
        statement_list statement_list;
        Token firstToken=token;
    label_12:
    while (true) {
      switch_label = switch_label();
                                     switch_labelList.add(switch_label);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case DEFAULTTOKEN:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_12;
      }
    }
    statement_list = statement_list();
         {if (true) return new switch_section(switch_labelList, statement_list, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public switch_label switch_label() throws ParseException {
        expression expression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      expression = expression();
      jj_consume_token(COLON);
         {if (true) return new switch_label1(expression, firstToken.next,token);}
      break;
    case DEFAULTTOKEN:
      jj_consume_token(DEFAULTTOKEN);
      jj_consume_token(COLON);
         {if (true) return new switch_label2(firstToken.next,token);}
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public iteration_statement iteration_statement() throws ParseException {
        while_statement while_statement;
        do_statement do_statement;
        for_statement for_statement;
        foreach_statement foreach_statement;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      while_statement = while_statement();
         {if (true) return new iteration_statement1(while_statement, firstToken.next,token);}
      break;
    case DO:
      do_statement = do_statement();
         {if (true) return new iteration_statement2(do_statement, firstToken.next,token);}
      break;
    case FOR:
      for_statement = for_statement();
         {if (true) return new iteration_statement3(for_statement, firstToken.next,token);}
      break;
    case FOREACH:
      foreach_statement = foreach_statement();
         {if (true) return new iteration_statement4(foreach_statement, firstToken.next,token);}
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public while_statement while_statement() throws ParseException {
        expression expression;
        embedded_statement embedded_statement;
        Token firstToken=token;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    expression = expression();
    jj_consume_token(RPAREN);
    embedded_statement = embedded_statement();
         {if (true) return new while_statement(expression, embedded_statement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public do_statement do_statement() throws ParseException {
        embedded_statement embedded_statement;
        expression expression;
        Token firstToken=token;
    jj_consume_token(DO);
    embedded_statement = embedded_statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    expression = expression();
    jj_consume_token(RPAREN);
         {if (true) return new do_statement(embedded_statement, expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public for_statement for_statement() throws ParseException {
        for_initializer for_initializer = null;
        expression expression = null;
        expression_list expression_list = null;
        embedded_statement embedded_statement;
        Token firstToken=token;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      for_initializer = for_initializer();
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression = expression();
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression_list = expression_list();
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    embedded_statement = embedded_statement();
         {if (true) return new for_statement(for_initializer, expression, expression_list, embedded_statement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public for_initializer for_initializer() throws ParseException {
        local_variable_declaration local_variable_declaration;
        expression_list expression_list;
        Token firstToken=token;
    if (jj_2_6(2147483647)) {
      local_variable_declaration = local_variable_declaration();
         {if (true) return new for_initializer1(local_variable_declaration, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case BASE:
      case NEW:
      case BOOL:
      case NULL:
      case OBJECT:
      case BYTE:
      case CHAR:
      case CHECKED:
      case DECIMAL:
      case SBYTE:
      case DOUBLE:
      case SHORT:
      case SIZEOF:
      case STRING:
      case FALSE:
      case THIS:
      case FLOAT:
      case TRUE:
      case TYPEOF:
      case UINT:
      case ULONG:
      case UNCHECKED:
      case INT:
      case USHORT:
      case VOID:
      case MODULE:
      case ASSEMBLY:
      case LPAREN:
      case PLUS:
      case MINUS:
      case STAR:
      case INC:
      case DEC:
      case TILDE:
      case BANG:
      case IDENTIFIER:
      case NUMERIC_LITERAL:
      case HEXADECIMAL_INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case REGULAR_STRING_LITERAL:
      case VERBATIM_STRING_LITERAL:
        expression_list = expression_list();
         {if (true) return new for_initializer2(expression_list, firstToken.next,token);}
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public foreach_statement foreach_statement() throws ParseException {
        type type;
        identifier identifier;
        expression expression;
        embedded_statement embedded_statement;
        Token firstToken=token;
    jj_consume_token(FOREACH);
    jj_consume_token(LPAREN);
    type = type();
    identifier = identifier();
    jj_consume_token(IN);
    expression = expression();
    jj_consume_token(RPAREN);
    embedded_statement = embedded_statement();
         {if (true) return new foreach_statement(type, identifier, expression, embedded_statement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public jump_statement jump_statement() throws ParseException {
        goto_statement goto_statement;
        return_statement return_statement;
        throw_statement throw_statement;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      jj_consume_token(BREAK);
      jj_consume_token(SEMI);
         {if (true) return new jump_statement1(firstToken.next,token);}
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
      jj_consume_token(SEMI);
         {if (true) return new jump_statement2(firstToken.next,token);}
      break;
    case GOTO:
      goto_statement = goto_statement();
         {if (true) return new jump_statement3(goto_statement, firstToken.next,token);}
      break;
    case RETURN:
      return_statement = return_statement();
         {if (true) return new jump_statement4(return_statement, firstToken.next,token);}
      break;
    case THROW:
      throw_statement = throw_statement();
         {if (true) return new jump_statement5(throw_statement, firstToken.next,token);}
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public goto_statement goto_statement() throws ParseException {
        goto_statementEnd goto_statementEnd;
        Token firstToken=token;
    jj_consume_token(GOTO);
    goto_statementEnd = goto_statementEnd();
         {if (true) return new goto_statement(goto_statementEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public goto_statementEnd goto_statementEnd() throws ParseException {
        identifier identifier;
        expression expression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      identifier = identifier();
      jj_consume_token(SEMI);
         {if (true) return new goto_statementEnd1(identifier, firstToken.next,token);}
      break;
    case CASE:
      jj_consume_token(CASE);
      expression = expression();
      jj_consume_token(SEMI);
         {if (true) return new goto_statementEnd2(expression, firstToken.next,token);}
      break;
    case DEFAULTTOKEN:
      jj_consume_token(DEFAULTTOKEN);
      jj_consume_token(SEMI);
         {if (true) return new goto_statementEnd3(firstToken.next,token);}
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public return_statement return_statement() throws ParseException {
        expression expression = null;
        Token firstToken=token;
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression = expression();
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
         {if (true) return new return_statement(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public throw_statement throw_statement() throws ParseException {
        expression expression = null;
        Token firstToken=token;
    jj_consume_token(THROW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression = expression();
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
         {if (true) return new throw_statement(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public try_statement try_statement() throws ParseException {
        block block;
        try_statement_clauses try_statement_clauses;
        Token firstToken=token;
    jj_consume_token(TRY);
    block = block();
    try_statement_clauses = try_statement_clauses();
         {if (true) return new try_statement(block, try_statement_clauses, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public try_statement_clauses try_statement_clauses() throws ParseException {
        catch_clauses catch_clauses;
        finally_clause finally_clause = null;
        finally_clause finally_clause1;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CATCH:
      catch_clauses = catch_clauses();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        finally_clause = finally_clause();
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
         {if (true) return new try_statement_clauses1(catch_clauses, finally_clause, firstToken.next,token);}
      break;
    case FINALLY:
      finally_clause1 = finally_clause();
         {if (true) return new try_statement_clauses2(finally_clause1, firstToken.next,token);}
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public catch_clauses catch_clauses() throws ParseException {
        catch_clause catch_clause;
        ArrayList<catch_clause> catch_clauseList = new ArrayList<catch_clause>();
        Token firstToken=token;
    label_13:
    while (true) {
      catch_clause = catch_clause();
                                     catch_clauseList.add(catch_clause);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_13;
      }
    }
         {if (true) return new catch_clauses(catch_clauseList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public catch_clause catch_clause() throws ParseException {
        catch_clauseEnd catch_clauseEnd;
        Token firstToken=token;
    jj_consume_token(CATCH);
    catch_clauseEnd = catch_clauseEnd();
         {if (true) return new catch_clause(catch_clauseEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public catch_clauseEnd catch_clauseEnd() throws ParseException {
        type type;
        identifier identifier = null;
        block block;
        block block1;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      type = type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
      case ASSEMBLY:
      case IDENTIFIER:
        identifier = identifier();
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      block = block();
         {if (true) return new catch_clauseEnd1(type, identifier, block, firstToken.next,token);}
      break;
    case LBRACE:
      block1 = block();
         {if (true) return new catch_clauseEnd2(block1, firstToken.next,token);}
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public finally_clause finally_clause() throws ParseException {
        block block;
        Token firstToken=token;
    jj_consume_token(FINALLY);
    block = block();
         {if (true) return new finally_clause(block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public checked_statement checked_statement() throws ParseException {
        block block;
        Token firstToken=token;
    jj_consume_token(CHECKED);
    block = block();
         {if (true) return new checked_statement(block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public unchecked_statement unchecked_statement() throws ParseException {
        block block;
        Token firstToken=token;
    jj_consume_token(UNCHECKED);
    block = block();
         {if (true) return new unchecked_statement(block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public lock_statement lock_statement() throws ParseException {
        expression expression;
        embedded_statement embedded_statement;
        Token firstToken=token;
    jj_consume_token(LOCK);
    jj_consume_token(LPAREN);
    expression = expression();
    jj_consume_token(RPAREN);
    embedded_statement = embedded_statement();
         {if (true) return new lock_statement(expression, embedded_statement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public using_statement using_statement() throws ParseException {
        resource_acquisition resource_acquisition;
        embedded_statement embedded_statement;
        Token firstToken=token;
    jj_consume_token(USING);
    jj_consume_token(LPAREN);
    resource_acquisition = resource_acquisition();
    jj_consume_token(RPAREN);
    embedded_statement = embedded_statement();
         {if (true) return new using_statement(resource_acquisition, embedded_statement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public resource_acquisition resource_acquisition() throws ParseException {
        local_variable_declaration local_variable_declaration;
        expression expression;
        Token firstToken=token;
    if (jj_2_7(2147483647)) {
      local_variable_declaration = local_variable_declaration();
         {if (true) return new resource_acquisition1(local_variable_declaration, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case BASE:
      case NEW:
      case BOOL:
      case NULL:
      case OBJECT:
      case BYTE:
      case CHAR:
      case CHECKED:
      case DECIMAL:
      case SBYTE:
      case DOUBLE:
      case SHORT:
      case SIZEOF:
      case STRING:
      case FALSE:
      case THIS:
      case FLOAT:
      case TRUE:
      case TYPEOF:
      case UINT:
      case ULONG:
      case UNCHECKED:
      case INT:
      case USHORT:
      case VOID:
      case MODULE:
      case ASSEMBLY:
      case LPAREN:
      case PLUS:
      case MINUS:
      case STAR:
      case INC:
      case DEC:
      case TILDE:
      case BANG:
      case IDENTIFIER:
      case NUMERIC_LITERAL:
      case HEXADECIMAL_INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case REGULAR_STRING_LITERAL:
      case VERBATIM_STRING_LITERAL:
        expression = expression();
         {if (true) return new resource_acquisition2(expression, firstToken.next,token);}
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public compilation_unitEnd compilation_unitEnd() throws ParseException {
        namespace_member_declaration_no_attr namespace_member_declaration_no_attr;
        namespace_member_declaration namespace_member_declaration;
        ArrayList<namespace_member_declaration> namespace_member_declarationList = new ArrayList<namespace_member_declaration>();
        Token firstToken=token;
    namespace_member_declaration_no_attr = namespace_member_declaration_no_attr();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case NAMESPACE:
      case NEW:
      case PRIVATE:
      case CLASS:
      case PROTECTED:
      case PUBLIC:
      case DELEGATE:
      case SEALED:
      case ENUM:
      case STRUCT:
      case UNSAFE:
      case INTERFACE:
      case INTERNAL:
      case LBRACK:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_14;
      }
      namespace_member_declaration = namespace_member_declaration();
                                                                                                                                                 namespace_member_declarationList.add(namespace_member_declaration);
    }
         {if (true) return new compilation_unitEnd(namespace_member_declaration_no_attr, namespace_member_declarationList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public namespace_declaration namespace_declaration() throws ParseException {
        type_name type_name;
        namespace_body namespace_body;
        Token firstToken=token;
    jj_consume_token(NAMESPACE);
    type_name = type_name();
    namespace_body = namespace_body();
         {if (true) return new namespace_declaration(type_name, namespace_body, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public namespace_body namespace_body() throws ParseException {
        using_directive using_directive;
        ArrayList<using_directive> using_directiveList = new ArrayList<using_directive>();
        namespace_member_declaration namespace_member_declaration;
        ArrayList<namespace_member_declaration> namespace_member_declarationList = new ArrayList<namespace_member_declaration>();
        ASTTextNode text210 = null;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USING:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_15;
      }
      using_directive = using_directive();
                                               using_directiveList.add(using_directive);
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case NAMESPACE:
      case NEW:
      case PRIVATE:
      case CLASS:
      case PROTECTED:
      case PUBLIC:
      case DELEGATE:
      case SEALED:
      case ENUM:
      case STRUCT:
      case UNSAFE:
      case INTERFACE:
      case INTERNAL:
      case LBRACK:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_16;
      }
      namespace_member_declaration = namespace_member_declaration();
                                                                                                                                                         namespace_member_declarationList.add(namespace_member_declaration);
    }
    jj_consume_token(RBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
                                                                                                                                                                                                                                          text210=new ASTTextNode(";",new WToken(token));
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
         {if (true) return new namespace_body(using_directiveList, namespace_member_declarationList, text210, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public using_directive using_directive() throws ParseException {
        type_name type_name;
        using_directiveEnd using_directiveEnd;
        Token firstToken=token;
    jj_consume_token(USING);
    type_name = type_name();
    using_directiveEnd = using_directiveEnd();
         {if (true) return new using_directive(type_name, using_directiveEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public using_directiveEnd using_directiveEnd() throws ParseException {
        type_name type_name;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      type_name = type_name();
      jj_consume_token(SEMI);
         {if (true) return new using_directiveEnd1(type_name, firstToken.next,token);}
      break;
    case SEMI:
      jj_consume_token(SEMI);
         {if (true) return new using_directiveEnd2(firstToken.next,token);}
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public namespace_member_declaration_no_attr namespace_member_declaration_no_attr() throws ParseException {
        namespace_declaration namespace_declaration;
        type_modifiers type_modifiers = null;
        type_declaration type_declaration;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAMESPACE:
      namespace_declaration = namespace_declaration();
         {if (true) return new namespace_member_declaration_no_attr1(namespace_declaration, firstToken.next,token);}
      break;
    case ABSTRACT:
    case NEW:
    case PRIVATE:
    case CLASS:
    case PROTECTED:
    case PUBLIC:
    case DELEGATE:
    case SEALED:
    case ENUM:
    case STRUCT:
    case UNSAFE:
    case INTERFACE:
    case INTERNAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SEALED:
      case UNSAFE:
      case INTERNAL:
        type_modifiers = type_modifiers();
        break;
      default:
        jj_la1[95] = jj_gen;
        ;
      }
      type_declaration = type_declaration();
         {if (true) return new namespace_member_declaration_no_attr2(type_modifiers, type_declaration, firstToken.next,token);}
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public namespace_member_declaration namespace_member_declaration() throws ParseException {
        namespace_declaration namespace_declaration;
        attributes attributes = null;
        type_modifiers type_modifiers = null;
        type_declaration type_declaration;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAMESPACE:
      namespace_declaration = namespace_declaration();
         {if (true) return new namespace_member_declaration1(namespace_declaration, firstToken.next,token);}
      break;
    case ABSTRACT:
    case NEW:
    case PRIVATE:
    case CLASS:
    case PROTECTED:
    case PUBLIC:
    case DELEGATE:
    case SEALED:
    case ENUM:
    case STRUCT:
    case UNSAFE:
    case INTERFACE:
    case INTERNAL:
    case LBRACK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        attributes = attributes();
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SEALED:
      case UNSAFE:
      case INTERNAL:
        type_modifiers = type_modifiers();
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      type_declaration = type_declaration();
         {if (true) return new namespace_member_declaration2(attributes, type_modifiers, type_declaration, firstToken.next,token);}
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public type_declaration type_declaration() throws ParseException {
        class_declaration class_declaration;
        struct_declaration struct_declaration;
        interface_declaration interface_declaration;
        enum_declaration enum_declaration;
        delegate_declaration delegate_declaration;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      class_declaration = class_declaration();
         {if (true) return new type_declaration1(class_declaration, firstToken.next,token);}
      break;
    case STRUCT:
      struct_declaration = struct_declaration();
         {if (true) return new type_declaration2(struct_declaration, firstToken.next,token);}
      break;
    case INTERFACE:
      interface_declaration = interface_declaration();
         {if (true) return new type_declaration3(interface_declaration, firstToken.next,token);}
      break;
    case ENUM:
      enum_declaration = enum_declaration();
         {if (true) return new type_declaration4(enum_declaration, firstToken.next,token);}
      break;
    case DELEGATE:
      delegate_declaration = delegate_declaration();
         {if (true) return new type_declaration5(delegate_declaration, firstToken.next,token);}
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public type_modifiers type_modifiers() throws ParseException {
        type_modifier type_modifier;
        ArrayList<type_modifier> type_modifierList = new ArrayList<type_modifier>();
        Token firstToken=token;
    label_17:
    while (true) {
      type_modifier = type_modifier();
                                       type_modifierList.add(type_modifier);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SEALED:
      case UNSAFE:
      case INTERNAL:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_17;
      }
    }
         {if (true) return new type_modifiers(type_modifierList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public type_modifier type_modifier() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
         {if (true) return new type_modifier1(firstToken.next,token);}
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
         {if (true) return new type_modifier2(firstToken.next,token);}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
         {if (true) return new type_modifier3(firstToken.next,token);}
      break;
    case INTERNAL:
      jj_consume_token(INTERNAL);
         {if (true) return new type_modifier4(firstToken.next,token);}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
         {if (true) return new type_modifier5(firstToken.next,token);}
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
         {if (true) return new type_modifier6(firstToken.next,token);}
      break;
    case SEALED:
      jj_consume_token(SEALED);
         {if (true) return new type_modifier7(firstToken.next,token);}
      break;
    case UNSAFE:
      jj_consume_token(UNSAFE);
         {if (true) return new type_modifier8(firstToken.next,token);}
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public class_declaration class_declaration() throws ParseException {
        identifier identifier;
        class_base class_base = null;
        class_body class_body;
        ASTTextNode text220 = null;
        Token firstToken=token;
    jj_consume_token(CLASS);
    identifier = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      class_base = class_base();
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
    class_body = class_body();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
                                                                                                text220=new ASTTextNode(";",new WToken(token));
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
         {if (true) return new class_declaration(identifier, class_base, class_body, text220, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public class_base class_base() throws ParseException {
        class_type class_type;
        type_name type_name;
        ArrayList<type_name> type_nameList = new ArrayList<type_name>();
        Token firstToken=token;
    jj_consume_token(COLON);
    class_type = class_type();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[105] = jj_gen;
        break label_18;
      }
      jj_consume_token(COMMA);
      type_name = type_name();
                                                               type_nameList.add(type_name);
    }
         {if (true) return new class_base(class_type, type_nameList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public interface_type_list interface_type_list() throws ParseException {
        type_name type_name;
        type_name type_name1;
        ArrayList<type_name> type_name1List = new ArrayList<type_name>();
        Token firstToken=token;
    type_name = type_name();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[106] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      type_name1 = type_name();
                                                          type_name1List.add(type_name1);
    }
         {if (true) return new interface_type_list(type_name, type_name1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public class_body class_body() throws ParseException {
        class_member_declaration class_member_declaration;
        ArrayList<class_member_declaration> class_member_declarationList = new ArrayList<class_member_declaration>();
        Token firstToken=token;
    jj_consume_token(LBRACE);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case LONG:
      case NEW:
      case BOOL:
      case OBJECT:
      case BYTE:
      case OVERRIDE:
      case CHAR:
      case PRIVATE:
      case CLASS:
      case PROTECTED:
      case CONST:
      case PUBLIC:
      case READONLY:
      case DECIMAL:
      case DELEGATE:
      case SBYTE:
      case SEALED:
      case DOUBLE:
      case SHORT:
      case ENUM:
      case EVENT:
      case STATIC:
      case EXPLICIT:
      case STRING:
      case EXTERN:
      case STRUCT:
      case FLOAT:
      case UINT:
      case ULONG:
      case IMPLICIT:
      case UNSAFE:
      case INT:
      case USHORT:
      case INTERFACE:
      case INTERNAL:
      case VIRTUAL:
      case VOID:
      case MODULE:
      case ASSEMBLY:
      case LBRACK:
      case TILDE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[107] = jj_gen;
        break label_20;
      }
      class_member_declaration = class_member_declaration();
                                                                 class_member_declarationList.add(class_member_declaration);
    }
    jj_consume_token(RBRACE);
         {if (true) return new class_body(class_member_declarationList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public class_member_declaration class_member_declaration() throws ParseException {
        attributes attributes = null;
        member_modifiers member_modifiers = null;
        class_member_declarationEnd class_member_declarationEnd;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes = attributes();
      break;
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case NEW:
    case OVERRIDE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case READONLY:
    case SEALED:
    case STATIC:
    case EXTERN:
    case UNSAFE:
    case INTERNAL:
    case VIRTUAL:
      member_modifiers = member_modifiers();
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    class_member_declarationEnd = class_member_declarationEnd();
         {if (true) return new class_member_declaration(attributes, member_modifiers, class_member_declarationEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public class_member_declarationEnd class_member_declarationEnd() throws ParseException {
        constant_declaration constant_declaration;
        event_declaration event_declaration;
        destructor_declaration destructor_declaration;
        conversion_operator_declaration conversion_operator_declaration;
        type_declaration type_declaration;
        type type;
        typeEnd typeEnd;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      constant_declaration = constant_declaration();
         {if (true) return new class_member_declarationEnd1(constant_declaration, firstToken.next,token);}
      break;
    case EVENT:
      event_declaration = event_declaration();
         {if (true) return new class_member_declarationEnd2(event_declaration, firstToken.next,token);}
      break;
    case TILDE:
      destructor_declaration = destructor_declaration();
         {if (true) return new class_member_declarationEnd3(destructor_declaration, firstToken.next,token);}
      break;
    case EXPLICIT:
    case IMPLICIT:
      conversion_operator_declaration = conversion_operator_declaration();
         {if (true) return new class_member_declarationEnd4(conversion_operator_declaration, firstToken.next,token);}
      break;
    case CLASS:
    case DELEGATE:
    case ENUM:
    case STRUCT:
    case INTERFACE:
      type_declaration = type_declaration();
         {if (true) return new class_member_declarationEnd5(type_declaration, firstToken.next,token);}
      break;
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      type = type();
      typeEnd = typeEnd();
         {if (true) return new class_member_declarationEnd6(type, typeEnd, firstToken.next,token);}
      break;
    default:
      jj_la1[110] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public typeEnd typeEnd() throws ParseException {
        constructor_declaration constructor_declaration;
        indexer_declaration_no_interface indexer_declaration_no_interface;
        operator_declaration operator_declaration;
        indexer_declaration_interface indexer_declaration_interface;
        type_name type_name;
        type_nameEnd type_nameEnd;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      constructor_declaration = constructor_declaration();
         {if (true) return new typeEnd1(constructor_declaration, firstToken.next,token);}
      break;
    case THIS:
      indexer_declaration_no_interface = indexer_declaration_no_interface();
         {if (true) return new typeEnd2(indexer_declaration_no_interface, firstToken.next,token);}
      break;
    case OPERATOR:
      operator_declaration = operator_declaration();
         {if (true) return new typeEnd3(operator_declaration, firstToken.next,token);}
      break;
    default:
      jj_la1[111] = jj_gen;
      if (jj_2_8(2147483647)) {
        indexer_declaration_interface = indexer_declaration_interface();
         {if (true) return new typeEnd4(indexer_declaration_interface, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MODULE:
        case ASSEMBLY:
        case IDENTIFIER:
          type_name = type_name();
          type_nameEnd = type_nameEnd();
         {if (true) return new typeEnd5(type_name, type_nameEnd, firstToken.next,token);}
          break;
        default:
          jj_la1[112] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public type_nameEnd type_nameEnd() throws ParseException {
        method_declaration method_declaration;
        property_declaration property_declaration;
        field_declaration field_declaration;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      method_declaration = method_declaration();
         {if (true) return new type_nameEnd1(method_declaration, firstToken.next,token);}
      break;
    case LBRACE:
      property_declaration = property_declaration();
         {if (true) return new type_nameEnd2(property_declaration, firstToken.next,token);}
      break;
    case ASSIGN:
    case COMMA:
    case SEMI:
      field_declaration = field_declaration();
         {if (true) return new type_nameEnd3(field_declaration, firstToken.next,token);}
      break;
    default:
      jj_la1[113] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public member_modifiers member_modifiers() throws ParseException {
        member_modifier member_modifier;
        ArrayList<member_modifier> member_modifierList = new ArrayList<member_modifier>();
        Token firstToken=token;
    label_21:
    while (true) {
      member_modifier = member_modifier();
                                           member_modifierList.add(member_modifier);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case NEW:
      case OVERRIDE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case READONLY:
      case SEALED:
      case STATIC:
      case EXTERN:
      case UNSAFE:
      case INTERNAL:
      case VIRTUAL:
        ;
        break;
      default:
        jj_la1[114] = jj_gen;
        break label_21;
      }
    }
         {if (true) return new member_modifiers(member_modifierList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public member_modifier member_modifier() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
         {if (true) return new member_modifier1(firstToken.next,token);}
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
         {if (true) return new member_modifier2(firstToken.next,token);}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
         {if (true) return new member_modifier3(firstToken.next,token);}
      break;
    case INTERNAL:
      jj_consume_token(INTERNAL);
         {if (true) return new member_modifier4(firstToken.next,token);}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
         {if (true) return new member_modifier5(firstToken.next,token);}
      break;
    case STATIC:
      jj_consume_token(STATIC);
         {if (true) return new member_modifier6(firstToken.next,token);}
      break;
    case VIRTUAL:
      jj_consume_token(VIRTUAL);
         {if (true) return new member_modifier7(firstToken.next,token);}
      break;
    case SEALED:
      jj_consume_token(SEALED);
         {if (true) return new member_modifier8(firstToken.next,token);}
      break;
    case OVERRIDE:
      jj_consume_token(OVERRIDE);
         {if (true) return new member_modifier9(firstToken.next,token);}
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
         {if (true) return new member_modifier10(firstToken.next,token);}
      break;
    case EXTERN:
      jj_consume_token(EXTERN);
         {if (true) return new member_modifier11(firstToken.next,token);}
      break;
    case READONLY:
      jj_consume_token(READONLY);
         {if (true) return new member_modifier12(firstToken.next,token);}
      break;
    case UNSAFE:
      jj_consume_token(UNSAFE);
         {if (true) return new member_modifier13(firstToken.next,token);}
      break;
    default:
      jj_la1[115] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public constant_declaration constant_declaration() throws ParseException {
        type type;
        constant_declarators constant_declarators;
        Token firstToken=token;
    jj_consume_token(CONST);
    type = type();
    constant_declarators = constant_declarators();
    jj_consume_token(SEMI);
         {if (true) return new constant_declaration(type, constant_declarators, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public constant_declarators constant_declarators() throws ParseException {
        constant_declarator constant_declarator;
        constant_declarator constant_declarator1;
        ArrayList<constant_declarator> constant_declarator1List = new ArrayList<constant_declarator>();
        Token firstToken=token;
    constant_declarator = constant_declarator();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[116] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      constant_declarator1 = constant_declarator();
                                                                                                  constant_declarator1List.add(constant_declarator1);
    }
         {if (true) return new constant_declarators(constant_declarator, constant_declarator1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public constant_declarator constant_declarator() throws ParseException {
        identifier identifier;
        expression expression;
        Token firstToken=token;
    identifier = identifier();
    jj_consume_token(ASSIGN);
    expression = expression();
         {if (true) return new constant_declarator(identifier, expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public field_declaration field_declaration() throws ParseException {
        field_declaration_start field_declaration_start;
        field_declarators field_declarators = null;
        Token firstToken=token;
    field_declaration_start = field_declaration_start();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      field_declarators = field_declarators();
      break;
    default:
      jj_la1[117] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
         {if (true) return new field_declaration(field_declaration_start, field_declarators, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public field_declaration_start field_declaration_start() throws ParseException {
        variable_initializer variable_initializer = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      variable_initializer = variable_initializer();
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
         {if (true) return new field_declaration_start(variable_initializer, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public field_declarators field_declarators() throws ParseException {
        field_declarator field_declarator;
        field_declarator field_declarator1;
        ArrayList<field_declarator> field_declarator1List = new ArrayList<field_declarator>();
        Token firstToken=token;
    field_declarator = field_declarator();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[119] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      field_declarator1 = field_declarator();
                                                                                      field_declarator1List.add(field_declarator1);
    }
         {if (true) return new field_declarators(field_declarator, field_declarator1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public field_declarator field_declarator() throws ParseException {
        identifier identifier;
        variable_initializer variable_initializer = null;
        Token firstToken=token;
    identifier = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      variable_initializer = variable_initializer();
      break;
    default:
      jj_la1[120] = jj_gen;
      ;
    }
         {if (true) return new field_declarator(identifier, variable_initializer, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public variable_initializer variable_initializer() throws ParseException {
        array_initializer array_initializer;
        expression expression;
        stackalloc_initializer stackalloc_initializer;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      array_initializer = array_initializer();
         {if (true) return new variable_initializer1(array_initializer, firstToken.next,token);}
      break;
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression = expression();
         {if (true) return new variable_initializer2(expression, firstToken.next,token);}
      break;
    case STACKALLOC:
      stackalloc_initializer = stackalloc_initializer();
         {if (true) return new variable_initializer3(stackalloc_initializer, firstToken.next,token);}
      break;
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public method_declaration method_declaration() throws ParseException {
        formal_parameter_list formal_parameter_list = null;
        body body;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case PARAMS:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LBRACK:
    case IDENTIFIER:
      formal_parameter_list = formal_parameter_list();
      break;
    default:
      jj_la1[122] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    body = body();
         {if (true) return new method_declaration(formal_parameter_list, body, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public body body() throws ParseException {
        block block;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      block = block();
         {if (true) return new body1(block, firstToken.next,token);}
      break;
    case SEMI:
      jj_consume_token(SEMI);
         {if (true) return new body2(firstToken.next,token);}
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public formal_parameter_list formal_parameter_list() throws ParseException {
        attributes attributes = null;
        formal_parameter_listEnd formal_parameter_listEnd;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes = attributes();
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
    formal_parameter_listEnd = formal_parameter_listEnd();
         {if (true) return new formal_parameter_list(attributes, formal_parameter_listEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public formal_parameter_listEnd formal_parameter_listEnd() throws ParseException {
        fixed_parameter fixed_parameter;
        fixed_parameterEnd fixed_parameterEnd;
        ArrayList<fixed_parameterEnd> fixed_parameterEndList = new ArrayList<fixed_parameterEnd>();
        parameter_array parameter_array;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      fixed_parameter = fixed_parameter();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[125] = jj_gen;
          break label_24;
        }
        fixed_parameterEnd = fixed_parameterEnd();
                                                                                   fixed_parameterEndList.add(fixed_parameterEnd);
      }
         {if (true) return new formal_parameter_listEnd1(fixed_parameter, fixed_parameterEndList, firstToken.next,token);}
      break;
    case PARAMS:
      parameter_array = parameter_array();
         {if (true) return new formal_parameter_listEnd2(parameter_array, firstToken.next,token);}
      break;
    default:
      jj_la1[126] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public formal_parameter_listEndInt formal_parameter_listEndInt() throws ParseException {
        fixed_parameter fixed_parameter;
        parameter_array parameter_array;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      fixed_parameter = fixed_parameter();
         {if (true) return new formal_parameter_listEndInt1(fixed_parameter, firstToken.next,token);}
      break;
    case PARAMS:
      parameter_array = parameter_array();
         {if (true) return new formal_parameter_listEndInt2(parameter_array, firstToken.next,token);}
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public fixed_parameterEnd fixed_parameterEnd() throws ParseException {
        attributes attributes = null;
        formal_parameter_listEndInt formal_parameter_listEndInt;
        Token firstToken=token;
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes = attributes();
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
    formal_parameter_listEndInt = formal_parameter_listEndInt();
         {if (true) return new fixed_parameterEnd(attributes, formal_parameter_listEndInt, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public fixed_parameter fixed_parameter() throws ParseException {
        parameter_modifier parameter_modifier = null;
        type type;
        identifier identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUT:
    case REF:
      parameter_modifier = parameter_modifier();
      break;
    default:
      jj_la1[129] = jj_gen;
      ;
    }
    type = type();
    identifier = identifier();
         {if (true) return new fixed_parameter(parameter_modifier, type, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public parameter_modifier parameter_modifier() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REF:
      jj_consume_token(REF);
         {if (true) return new parameter_modifier1(firstToken.next,token);}
      break;
    case OUT:
      jj_consume_token(OUT);
         {if (true) return new parameter_modifier2(firstToken.next,token);}
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public parameter_array parameter_array() throws ParseException {
        type type;
        identifier identifier;
        Token firstToken=token;
    jj_consume_token(PARAMS);
    type = type();
    identifier = identifier();
         {if (true) return new parameter_array(type, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public property_declaration property_declaration() throws ParseException {
        accessor_declarations accessor_declarations;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    accessor_declarations = accessor_declarations();
    jj_consume_token(RBRACE);
         {if (true) return new property_declaration(accessor_declarations, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public accessor_declarations accessor_declarations() throws ParseException {
        accessor_declaration accessor_declaration;
        accessor_declaration accessor_declaration1 = null;
        Token firstToken=token;
    accessor_declaration = accessor_declaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
    case IDENTIFIER:
      accessor_declaration1 = accessor_declaration();
      break;
    default:
      jj_la1[131] = jj_gen;
      ;
    }
         {if (true) return new accessor_declarations(accessor_declaration, accessor_declaration1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public accessor_declaration accessor_declaration() throws ParseException {
        attributes attributes = null;
        Token t;
        ASTStringNode identifier;
        body body;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes = attributes();
      break;
    default:
      jj_la1[132] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                                                 identifier=new ASTStringNode(t.image,new WToken(t));
    body = body();
         {if (true) return new accessor_declaration(attributes, identifier, body, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public event_declaration event_declaration() throws ParseException {
        type type;
        event_declarationInt event_declarationInt;
        Token firstToken=token;
    jj_consume_token(EVENT);
    type = type();
    event_declarationInt = event_declarationInt();
         {if (true) return new event_declaration(type, event_declarationInt, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public event_declarationInt event_declarationInt() throws ParseException {
        type_name type_name;
        event_accessor_declarations event_accessor_declarations;
        event_variable_declarator event_variable_declarator;
        event_variable_declarator event_variable_declarator1;
        ArrayList<event_variable_declarator> event_variable_declarator1List = new ArrayList<event_variable_declarator>();
        Token firstToken=token;
    if (jj_2_9(2)) {
      type_name = type_name();
      jj_consume_token(LBRACE);
      event_accessor_declarations = event_accessor_declarations();
      jj_consume_token(RBRACE);
         {if (true) return new event_declarationInt1(type_name, event_accessor_declarations, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
      case ASSEMBLY:
      case IDENTIFIER:
        event_variable_declarator = event_variable_declarator();
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[133] = jj_gen;
            break label_25;
          }
          jj_consume_token(COMMA);
          event_variable_declarator1 = event_variable_declarator();
                                                                                                                          event_variable_declarator1List.add(event_variable_declarator1);
        }
        jj_consume_token(SEMI);
         {if (true) return new event_declarationInt2(event_variable_declarator, event_variable_declarator1List, firstToken.next,token);}
        break;
      default:
        jj_la1[134] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public event_variable_declarator event_variable_declarator() throws ParseException {
        identifier identifier;
        variable_initializer variable_initializer = null;
        Token firstToken=token;
    identifier = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      variable_initializer = variable_initializer();
      break;
    default:
      jj_la1[135] = jj_gen;
      ;
    }
         {if (true) return new event_variable_declarator(identifier, variable_initializer, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public event_accessor_declarations event_accessor_declarations() throws ParseException {
        accessor_declaration accessor_declaration;
        accessor_declaration accessor_declaration1;
        Token firstToken=token;
    accessor_declaration = accessor_declaration();
    accessor_declaration1 = accessor_declaration();
         {if (true) return new event_accessor_declarations(accessor_declaration, accessor_declaration1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public indexer_declaration_no_interface indexer_declaration_no_interface() throws ParseException {
        formal_parameter_list formal_parameter_list;
        accessor_declarations accessor_declarations;
        Token firstToken=token;
    jj_consume_token(THIS);
    jj_consume_token(LBRACK);
    formal_parameter_list = formal_parameter_list();
    jj_consume_token(RBRACK);
    jj_consume_token(LBRACE);
    accessor_declarations = accessor_declarations();
    jj_consume_token(RBRACE);
         {if (true) return new indexer_declaration_no_interface(formal_parameter_list, accessor_declarations, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public indexer_declaration_interface indexer_declaration_interface() throws ParseException {
        indexer_base indexer_base;
        formal_parameter_list formal_parameter_list;
        accessor_declarations accessor_declarations;
        Token firstToken=token;
    indexer_base = indexer_base();
    jj_consume_token(LBRACK);
    formal_parameter_list = formal_parameter_list();
    jj_consume_token(RBRACK);
    jj_consume_token(LBRACE);
    accessor_declarations = accessor_declarations();
    jj_consume_token(RBRACE);
         {if (true) return new indexer_declaration_interface(indexer_base, formal_parameter_list, accessor_declarations, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public indexer_base indexer_base() throws ParseException {
        identifier identifier;
        indexer_baseInt indexer_baseInt;
        ArrayList<indexer_baseInt> indexer_baseIntList = new ArrayList<indexer_baseInt>();
        Token firstToken=token;
    identifier = identifier();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_26;
      }
      jj_consume_token(DOT);
      indexer_baseInt = indexer_baseInt();
                                                                       indexer_baseIntList.add(indexer_baseInt);
    }
         {if (true) return new indexer_base(identifier, indexer_baseIntList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public indexer_baseInt indexer_baseInt() throws ParseException {
        identifier identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      identifier = identifier();
         {if (true) return new indexer_baseInt1(identifier, firstToken.next,token);}
      break;
    case THIS:
      jj_consume_token(THIS);
         {if (true) return new indexer_baseInt2(firstToken.next,token);}
      break;
    default:
      jj_la1[137] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public operator_declaration operator_declaration() throws ParseException {
        unary_operator_declaration unary_operator_declaration;
        binary_operator_declaration binary_operator_declaration;
        Token firstToken=token;
    if (jj_2_10(2147483647)) {
      jj_consume_token(OPERATOR);
      unary_operator_declaration = unary_operator_declaration();
         {if (true) return new operator_declaration1(unary_operator_declaration, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR:
        jj_consume_token(OPERATOR);
        binary_operator_declaration = binary_operator_declaration();
         {if (true) return new operator_declaration2(binary_operator_declaration, firstToken.next,token);}
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public unary_operator_declaration unary_operator_declaration() throws ParseException {
        overloadable_unary_operator overloadable_unary_operator;
        type type;
        identifier identifier;
        body body;
        Token firstToken=token;
    overloadable_unary_operator = overloadable_unary_operator();
    jj_consume_token(LPAREN);
    type = type();
    identifier = identifier();
    jj_consume_token(RPAREN);
    body = body();
         {if (true) return new unary_operator_declaration(overloadable_unary_operator, type, identifier, body, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public overloadable_unary_operator overloadable_unary_operator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
         {if (true) return new overloadable_unary_operator1(firstToken.next,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
         {if (true) return new overloadable_unary_operator2(firstToken.next,token);}
      break;
    case BANG:
      jj_consume_token(BANG);
         {if (true) return new overloadable_unary_operator3(firstToken.next,token);}
      break;
    case TILDE:
      jj_consume_token(TILDE);
         {if (true) return new overloadable_unary_operator4(firstToken.next,token);}
      break;
    case INC:
      jj_consume_token(INC);
         {if (true) return new overloadable_unary_operator5(firstToken.next,token);}
      break;
    case DEC:
      jj_consume_token(DEC);
         {if (true) return new overloadable_unary_operator6(firstToken.next,token);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
         {if (true) return new overloadable_unary_operator7(firstToken.next,token);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
         {if (true) return new overloadable_unary_operator8(firstToken.next,token);}
      break;
    default:
      jj_la1[139] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public binary_operator_declaration binary_operator_declaration() throws ParseException {
        overloadable_binary_operator overloadable_binary_operator;
        type type;
        identifier identifier;
        type type1;
        identifier identifier1;
        body body;
        Token firstToken=token;
    overloadable_binary_operator = overloadable_binary_operator();
    jj_consume_token(LPAREN);
    type = type();
    identifier = identifier();
    jj_consume_token(COMMA);
    type1 = type();
    identifier1 = identifier();
    jj_consume_token(RPAREN);
    body = body();
         {if (true) return new binary_operator_declaration(overloadable_binary_operator, type, identifier, type1, identifier1, body, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public overloadable_binary_operator overloadable_binary_operator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
         {if (true) return new overloadable_binary_operator1(firstToken.next,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
         {if (true) return new overloadable_binary_operator2(firstToken.next,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new overloadable_binary_operator3(firstToken.next,token);}
      break;
    case DIV:
      jj_consume_token(DIV);
         {if (true) return new overloadable_binary_operator4(firstToken.next,token);}
      break;
    case MOD:
      jj_consume_token(MOD);
         {if (true) return new overloadable_binary_operator5(firstToken.next,token);}
      break;
    case AMPER:
      jj_consume_token(AMPER);
         {if (true) return new overloadable_binary_operator6(firstToken.next,token);}
      break;
    case BOR:
      jj_consume_token(BOR);
         {if (true) return new overloadable_binary_operator7(firstToken.next,token);}
      break;
    case CARET:
      jj_consume_token(CARET);
         {if (true) return new overloadable_binary_operator8(firstToken.next,token);}
      break;
    case SL:
      jj_consume_token(SL);
         {if (true) return new overloadable_binary_operator9(firstToken.next,token);}
      break;
    case SR:
      jj_consume_token(SR);
         {if (true) return new overloadable_binary_operator10(firstToken.next,token);}
      break;
    case EQUAL:
      jj_consume_token(EQUAL);
         {if (true) return new overloadable_binary_operator11(firstToken.next,token);}
      break;
    case NOT_EQUAL:
      jj_consume_token(NOT_EQUAL);
         {if (true) return new overloadable_binary_operator12(firstToken.next,token);}
      break;
    case GTHAN:
      jj_consume_token(GTHAN);
         {if (true) return new overloadable_binary_operator13(firstToken.next,token);}
      break;
    case LTHAN:
      jj_consume_token(LTHAN);
         {if (true) return new overloadable_binary_operator14(firstToken.next,token);}
      break;
    case GE:
      jj_consume_token(GE);
         {if (true) return new overloadable_binary_operator15(firstToken.next,token);}
      break;
    case LE:
      jj_consume_token(LE);
         {if (true) return new overloadable_binary_operator16(firstToken.next,token);}
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public conversion_operator_declaration conversion_operator_declaration() throws ParseException {
        conversion_operator conversion_operator;
        type type;
        type type1;
        identifier identifier;
        body body;
        Token firstToken=token;
    conversion_operator = conversion_operator();
    jj_consume_token(OPERATOR);
    type = type();
    jj_consume_token(LPAREN);
    type1 = type();
    identifier = identifier();
    jj_consume_token(RPAREN);
    body = body();
         {if (true) return new conversion_operator_declaration(conversion_operator, type, type1, identifier, body, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public conversion_operator conversion_operator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLICIT:
      jj_consume_token(IMPLICIT);
         {if (true) return new conversion_operator1(firstToken.next,token);}
      break;
    case EXPLICIT:
      jj_consume_token(EXPLICIT);
         {if (true) return new conversion_operator2(firstToken.next,token);}
      break;
    default:
      jj_la1[141] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public constructor_declaration constructor_declaration() throws ParseException {
        formal_parameter_list formal_parameter_list = null;
        constructor_initializer constructor_initializer = null;
        body body;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case PARAMS:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LBRACK:
    case IDENTIFIER:
      formal_parameter_list = formal_parameter_list();
      break;
    default:
      jj_la1[142] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      constructor_initializer = constructor_initializer();
      break;
    default:
      jj_la1[143] = jj_gen;
      ;
    }
    body = body();
         {if (true) return new constructor_declaration(formal_parameter_list, constructor_initializer, body, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public constructor_initializer constructor_initializer() throws ParseException {
        constructor_initializerInt constructor_initializerInt;
        argument_list argument_list = null;
        Token firstToken=token;
    jj_consume_token(COLON);
    constructor_initializerInt = constructor_initializerInt();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      argument_list = argument_list();
      break;
    default:
      jj_la1[144] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
         {if (true) return new constructor_initializer(constructor_initializerInt, argument_list, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public constructor_initializerInt constructor_initializerInt() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE:
      jj_consume_token(BASE);
         {if (true) return new constructor_initializerInt1(firstToken.next,token);}
      break;
    case THIS:
      jj_consume_token(THIS);
         {if (true) return new constructor_initializerInt2(firstToken.next,token);}
      break;
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public destructor_declaration destructor_declaration() throws ParseException {
        identifier identifier;
        body body;
        Token firstToken=token;
    jj_consume_token(TILDE);
    identifier = identifier();
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    body = body();
         {if (true) return new destructor_declaration(identifier, body, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public struct_declaration struct_declaration() throws ParseException {
        identifier identifier;
        base_interfaces base_interfaces = null;
        class_body class_body;
        ASTTextNode text266 = null;
        Token firstToken=token;
    jj_consume_token(STRUCT);
    identifier = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      base_interfaces = base_interfaces();
      break;
    default:
      jj_la1[146] = jj_gen;
      ;
    }
    class_body = class_body();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
                                                                                                           text266=new ASTTextNode(";",new WToken(token));
      break;
    default:
      jj_la1[147] = jj_gen;
      ;
    }
         {if (true) return new struct_declaration(identifier, base_interfaces, class_body, text266, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public base_interfaces base_interfaces() throws ParseException {
        interface_type_list interface_type_list;
        Token firstToken=token;
    jj_consume_token(COLON);
    interface_type_list = interface_type_list();
         {if (true) return new base_interfaces(interface_type_list, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public array_initializer array_initializer() throws ParseException {
        rest_of_array_initializer rest_of_array_initializer;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    rest_of_array_initializer = rest_of_array_initializer();
         {if (true) return new array_initializer(rest_of_array_initializer, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public rest_of_array_initializer rest_of_array_initializer() throws ParseException {
        variable_initializer variable_initializer;
        rest_of_array_initializerEnd rest_of_array_initializerEnd;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
         {if (true) return new rest_of_array_initializer1(firstToken.next,token);}
      break;
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STACKALLOC:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LBRACE:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      variable_initializer = variable_initializer();
      rest_of_array_initializerEnd = rest_of_array_initializerEnd();
         {if (true) return new rest_of_array_initializer2(variable_initializer, rest_of_array_initializerEnd, firstToken.next,token);}
      break;
    default:
      jj_la1[148] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public rest_of_array_initializerEnd rest_of_array_initializerEnd() throws ParseException {
        rest_of_array_initializer rest_of_array_initializer;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
         {if (true) return new rest_of_array_initializerEnd1(firstToken.next,token);}
      break;
    case COMMA:
      jj_consume_token(COMMA);
      rest_of_array_initializer = rest_of_array_initializer();
         {if (true) return new rest_of_array_initializerEnd2(rest_of_array_initializer, firstToken.next,token);}
      break;
    default:
      jj_la1[149] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public interface_declaration interface_declaration() throws ParseException {
        identifier identifier;
        base_interfaces base_interfaces = null;
        interface_body interface_body;
        ASTTextNode text269 = null;
        Token firstToken=token;
    jj_consume_token(INTERFACE);
    identifier = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      base_interfaces = base_interfaces();
      break;
    default:
      jj_la1[150] = jj_gen;
      ;
    }
    interface_body = interface_body();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
                                                                                                                      text269=new ASTTextNode(";",new WToken(token));
      break;
    default:
      jj_la1[151] = jj_gen;
      ;
    }
         {if (true) return new interface_declaration(identifier, base_interfaces, interface_body, text269, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public interface_body interface_body() throws ParseException {
        interface_member_declaration interface_member_declaration;
        ArrayList<interface_member_declaration> interface_member_declarationList = new ArrayList<interface_member_declaration>();
        Token firstToken=token;
    jj_consume_token(LBRACE);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case NEW:
      case BOOL:
      case OBJECT:
      case BYTE:
      case CHAR:
      case DECIMAL:
      case SBYTE:
      case DOUBLE:
      case SHORT:
      case EVENT:
      case STRING:
      case FLOAT:
      case UINT:
      case ULONG:
      case UNSAFE:
      case INT:
      case USHORT:
      case VOID:
      case MODULE:
      case ASSEMBLY:
      case LBRACK:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[152] = jj_gen;
        break label_27;
      }
      interface_member_declaration = interface_member_declaration();
                                                                         interface_member_declarationList.add(interface_member_declaration);
    }
    jj_consume_token(RBRACE);
         {if (true) return new interface_body(interface_member_declarationList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public interface_member_declaration interface_member_declaration() throws ParseException {
        attributes attributes = null;
        interface_member_modifier interface_member_modifier;
        ArrayList<interface_member_modifier> interface_member_modifierList = new ArrayList<interface_member_modifier>();
        interface_member_declarationEnd interface_member_declarationEnd;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes = attributes();
      break;
    default:
      jj_la1[153] = jj_gen;
      ;
    }
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case UNSAFE:
        ;
        break;
      default:
        jj_la1[154] = jj_gen;
        break label_28;
      }
      interface_member_modifier = interface_member_modifier();
                                                                                         interface_member_modifierList.add(interface_member_modifier);
    }
    interface_member_declarationEnd = interface_member_declarationEnd();
         {if (true) return new interface_member_declaration(attributes, interface_member_modifierList, interface_member_declarationEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public interface_member_declarationEnd interface_member_declarationEnd() throws ParseException {
        interface_event_declaration interface_event_declaration;
        type type;
        interface_member_declarationEndType interface_member_declarationEndType;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EVENT:
      interface_event_declaration = interface_event_declaration();
         {if (true) return new interface_member_declarationEnd1(interface_event_declaration, firstToken.next,token);}
      break;
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      type = type();
      interface_member_declarationEndType = interface_member_declarationEndType();
         {if (true) return new interface_member_declarationEnd2(type, interface_member_declarationEndType, firstToken.next,token);}
      break;
    default:
      jj_la1[155] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public interface_member_declarationEndType interface_member_declarationEndType() throws ParseException {
        interface_indexer_declaration interface_indexer_declaration;
        identifier identifier;
        interface_member_declarationEndTypeIdentifier interface_member_declarationEndTypeIdentifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      interface_indexer_declaration = interface_indexer_declaration();
         {if (true) return new interface_member_declarationEndType1(interface_indexer_declaration, firstToken.next,token);}
      break;
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      identifier = identifier();
      interface_member_declarationEndTypeIdentifier = interface_member_declarationEndTypeIdentifier();
         {if (true) return new interface_member_declarationEndType2(identifier, interface_member_declarationEndTypeIdentifier, firstToken.next,token);}
      break;
    default:
      jj_la1[156] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public interface_member_declarationEndTypeIdentifier interface_member_declarationEndTypeIdentifier() throws ParseException {
        interface_method_declaration interface_method_declaration;
        interface_property_declaration interface_property_declaration;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      interface_method_declaration = interface_method_declaration();
         {if (true) return new interface_member_declarationEndTypeIdentifier1(interface_method_declaration, firstToken.next,token);}
      break;
    case LBRACE:
      interface_property_declaration = interface_property_declaration();
         {if (true) return new interface_member_declarationEndTypeIdentifier2(interface_property_declaration, firstToken.next,token);}
      break;
    default:
      jj_la1[157] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public interface_member_modifier interface_member_modifier() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
         {if (true) return new interface_member_modifier1(firstToken.next,token);}
      break;
    case UNSAFE:
      jj_consume_token(UNSAFE);
         {if (true) return new interface_member_modifier2(firstToken.next,token);}
      break;
    default:
      jj_la1[158] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public interface_event_declaration interface_event_declaration() throws ParseException {
        type type;
        identifier identifier;
        Token firstToken=token;
    jj_consume_token(EVENT);
    type = type();
    identifier = identifier();
    jj_consume_token(SEMI);
         {if (true) return new interface_event_declaration(type, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public interface_indexer_declaration interface_indexer_declaration() throws ParseException {
        formal_parameter_list formal_parameter_list;
        interface_accessors interface_accessors;
        Token firstToken=token;
    jj_consume_token(THIS);
    jj_consume_token(LBRACK);
    formal_parameter_list = formal_parameter_list();
    jj_consume_token(RBRACK);
    jj_consume_token(LBRACE);
    interface_accessors = interface_accessors();
    jj_consume_token(RBRACE);
         {if (true) return new interface_indexer_declaration(formal_parameter_list, interface_accessors, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public interface_method_declaration interface_method_declaration() throws ParseException {
        formal_parameter_list formal_parameter_list = null;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case PARAMS:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LBRACK:
    case IDENTIFIER:
      formal_parameter_list = formal_parameter_list();
      break;
    default:
      jj_la1[159] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(SEMI);
         {if (true) return new interface_method_declaration(formal_parameter_list, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public interface_property_declaration interface_property_declaration() throws ParseException {
        interface_accessors interface_accessors;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    interface_accessors = interface_accessors();
    jj_consume_token(RBRACE);
         {if (true) return new interface_property_declaration(interface_accessors, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public interface_accessors interface_accessors() throws ParseException {
        interface_accessor interface_accessor;
        interface_accessor interface_accessor1 = null;
        Token firstToken=token;
    interface_accessor = interface_accessor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
    case IDENTIFIER:
      interface_accessor1 = interface_accessor();
      break;
    default:
      jj_la1[160] = jj_gen;
      ;
    }
         {if (true) return new interface_accessors(interface_accessor, interface_accessor1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public interface_accessor interface_accessor() throws ParseException {
        attributes attributes = null;
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes = attributes();
      break;
    default:
      jj_la1[161] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                                                 identifier=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(SEMI);
         {if (true) return new interface_accessor(attributes, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public enum_declaration enum_declaration() throws ParseException {
        identifier identifier;
        enum_base enum_base = null;
        enum_body enum_body;
        ASTTextNode text272 = null;
        Token firstToken=token;
    jj_consume_token(ENUM);
    identifier = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      enum_base = enum_base();
      break;
    default:
      jj_la1[162] = jj_gen;
      ;
    }
    enum_body = enum_body();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
                                                                                           text272=new ASTTextNode(";",new WToken(token));
      break;
    default:
      jj_la1[163] = jj_gen;
      ;
    }
         {if (true) return new enum_declaration(identifier, enum_base, enum_body, text272, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public enum_base enum_base() throws ParseException {
        integral_type integral_type;
        Token firstToken=token;
    jj_consume_token(COLON);
    integral_type = integral_type();
         {if (true) return new enum_base(integral_type, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public enum_body enum_body() throws ParseException {
        rest_of_enum_body rest_of_enum_body;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    rest_of_enum_body = rest_of_enum_body();
         {if (true) return new enum_body(rest_of_enum_body, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public rest_of_enum_body rest_of_enum_body() throws ParseException {
        enum_member_declaration enum_member_declaration;
        rest_of_enum_bodyEnd rest_of_enum_bodyEnd;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
         {if (true) return new rest_of_enum_body1(firstToken.next,token);}
      break;
    case MODULE:
    case ASSEMBLY:
    case LBRACK:
    case IDENTIFIER:
      enum_member_declaration = enum_member_declaration();
      rest_of_enum_bodyEnd = rest_of_enum_bodyEnd();
         {if (true) return new rest_of_enum_body2(enum_member_declaration, rest_of_enum_bodyEnd, firstToken.next,token);}
      break;
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public rest_of_enum_bodyEnd rest_of_enum_bodyEnd() throws ParseException {
        rest_of_enum_body rest_of_enum_body;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
         {if (true) return new rest_of_enum_bodyEnd1(firstToken.next,token);}
      break;
    case COMMA:
      jj_consume_token(COMMA);
      rest_of_enum_body = rest_of_enum_body();
         {if (true) return new rest_of_enum_bodyEnd2(rest_of_enum_body, firstToken.next,token);}
      break;
    default:
      jj_la1[165] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public enum_member_declaration enum_member_declaration() throws ParseException {
        attributes attributes = null;
        identifier identifier;
        enum_member_assignment enum_member_assignment = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes = attributes();
      break;
    default:
      jj_la1[166] = jj_gen;
      ;
    }
    identifier = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      enum_member_assignment = enum_member_assignment();
      break;
    default:
      jj_la1[167] = jj_gen;
      ;
    }
         {if (true) return new enum_member_declaration(attributes, identifier, enum_member_assignment, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public enum_member_assignment enum_member_assignment() throws ParseException {
        expression expression;
        Token firstToken=token;
    jj_consume_token(ASSIGN);
    expression = expression();
         {if (true) return new enum_member_assignment(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public delegate_declaration delegate_declaration() throws ParseException {
        type type;
        identifier identifier;
        formal_parameter_list formal_parameter_list = null;
        Token firstToken=token;
    jj_consume_token(DELEGATE);
    type = type();
    identifier = identifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case PARAMS:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LBRACK:
    case IDENTIFIER:
      formal_parameter_list = formal_parameter_list();
      break;
    default:
      jj_la1[168] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(SEMI);
         {if (true) return new delegate_declaration(type, identifier, formal_parameter_list, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public attributes_either attributes_either() throws ParseException {
        attribute_section_start attribute_section_start;
        ArrayList<attribute_section_start> attribute_section_startList = new ArrayList<attribute_section_start>();
        Token firstToken=token;
    label_29:
    while (true) {
      attribute_section_start = attribute_section_start();
                                                           attribute_section_startList.add(attribute_section_start);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        ;
        break;
      default:
        jj_la1[169] = jj_gen;
        break label_29;
      }
    }
         {if (true) return new attributes_either(attribute_section_startList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public attribute_section_start attribute_section_start() throws ParseException {
        global_attribute_target_specifier global_attribute_target_specifier;
        attribute_section attribute_section;
        attribute_target_specifier attribute_target_specifier = null;
        attribute_section attribute_section1;
        Token firstToken=token;
    if (jj_2_11(2147483647)) {
      jj_consume_token(LBRACK);
      global_attribute_target_specifier = global_attribute_target_specifier();
      attribute_section = attribute_section();
         {if (true) return new attribute_section_start1(global_attribute_target_specifier, attribute_section, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        jj_consume_token(LBRACK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
        case EVENT:
        case IDENTIFIER:
          attribute_target_specifier = attribute_target_specifier();
          break;
        default:
          jj_la1[170] = jj_gen;
          ;
        }
        attribute_section1 = attribute_section();
         {if (true) return new attribute_section_start2(attribute_target_specifier, attribute_section1, firstToken.next,token);}
        break;
      default:
        jj_la1[171] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public global_attribute_target_specifier global_attribute_target_specifier() throws ParseException {
        global_attribute_target global_attribute_target;
        Token firstToken=token;
    global_attribute_target = global_attribute_target();
    jj_consume_token(COLON);
         {if (true) return new global_attribute_target_specifier(global_attribute_target, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public global_attribute_target global_attribute_target() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSEMBLY:
      jj_consume_token(ASSEMBLY);
         {if (true) return new global_attribute_target1(firstToken.next,token);}
      break;
    case MODULE:
      jj_consume_token(MODULE);
         {if (true) return new global_attribute_target2(firstToken.next,token);}
      break;
    default:
      jj_la1[172] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public attributes attributes() throws ParseException {
        local_attribute local_attribute;
        ArrayList<local_attribute> local_attributeList = new ArrayList<local_attribute>();
        Token firstToken=token;
    label_30:
    while (true) {
      local_attribute = local_attribute();
                                           local_attributeList.add(local_attribute);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        ;
        break;
      default:
        jj_la1[173] = jj_gen;
        break label_30;
      }
    }
         {if (true) return new attributes(local_attributeList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public local_attribute local_attribute() throws ParseException {
        attribute_target_specifier attribute_target_specifier = null;
        attribute_section attribute_section;
        Token firstToken=token;
    jj_consume_token(LBRACK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
    case EVENT:
    case IDENTIFIER:
      attribute_target_specifier = attribute_target_specifier();
      break;
    default:
      jj_la1[174] = jj_gen;
      ;
    }
    attribute_section = attribute_section();
         {if (true) return new local_attribute(attribute_target_specifier, attribute_section, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public attribute_section attribute_section() throws ParseException {
        attribute attribute;
        attribute_sectionEnd attribute_sectionEnd;
        Token firstToken=token;
    attribute = attribute();
    attribute_sectionEnd = attribute_sectionEnd();
         {if (true) return new attribute_section(attribute, attribute_sectionEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public attribute_sectionEnd attribute_sectionEnd() throws ParseException {
        attribute_section attribute_section;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACK:
      jj_consume_token(RBRACK);
         {if (true) return new attribute_sectionEnd1(firstToken.next,token);}
      break;
    default:
      jj_la1[175] = jj_gen;
      if (jj_2_12(2)) {
        jj_consume_token(COMMA);
        jj_consume_token(RBRACK);
         {if (true) return new attribute_sectionEnd2(firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          attribute_section = attribute_section();
         {if (true) return new attribute_sectionEnd3(attribute_section, firstToken.next,token);}
          break;
        default:
          jj_la1[176] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public attribute_target_specifier attribute_target_specifier() throws ParseException {
        attribute_target attribute_target;
        Token firstToken=token;
    attribute_target = attribute_target();
    jj_consume_token(COLON);
         {if (true) return new attribute_target_specifier(attribute_target, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public attribute_target attribute_target() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EVENT:
      jj_consume_token(EVENT);
         {if (true) return new attribute_target1(firstToken.next,token);}
      break;
    case RETURN:
      jj_consume_token(RETURN);
         {if (true) return new attribute_target2(firstToken.next,token);}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new attribute_target3(identifier, firstToken.next,token);}
      break;
    default:
      jj_la1[177] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public attribute attribute() throws ParseException {
        type_name type_name;
        attribute_arguments attribute_arguments = null;
        Token firstToken=token;
    type_name = type_name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      attribute_arguments = attribute_arguments();
      break;
    default:
      jj_la1[178] = jj_gen;
      ;
    }
         {if (true) return new attribute(type_name, attribute_arguments, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public attribute_arguments attribute_arguments() throws ParseException {
        expression_list expression_list = null;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression_list = expression_list();
      break;
    default:
      jj_la1[179] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
         {if (true) return new attribute_arguments(expression_list, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public sizeof_expression sizeof_expression() throws ParseException {
        type type;
        Token firstToken=token;
    jj_consume_token(SIZEOF);
    jj_consume_token(LPAREN);
    type = type();
    jj_consume_token(RPAREN);
         {if (true) return new sizeof_expression(type, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public unsafe_statement unsafe_statement() throws ParseException {
        block block;
        Token firstToken=token;
    jj_consume_token(UNSAFE);
    block = block();
         {if (true) return new unsafe_statement(block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public pointer_member_access pointer_member_access() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    jj_consume_token(ARROW);
    t = jj_consume_token(IDENTIFIER);
                            identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new pointer_member_access(identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public fixed_statement fixed_statement() throws ParseException {
        type type;
        fixed_pointer_declarators fixed_pointer_declarators;
        embedded_statement embedded_statement;
        Token firstToken=token;
    jj_consume_token(FIXED);
    jj_consume_token(LPAREN);
    type = type();
    fixed_pointer_declarators = fixed_pointer_declarators();
    jj_consume_token(RPAREN);
    embedded_statement = embedded_statement();
         {if (true) return new fixed_statement(type, fixed_pointer_declarators, embedded_statement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public fixed_pointer_declarators fixed_pointer_declarators() throws ParseException {
        fixed_pointer_declarator fixed_pointer_declarator;
        fixed_pointer_declarator fixed_pointer_declarator1;
        ArrayList<fixed_pointer_declarator> fixed_pointer_declarator1List = new ArrayList<fixed_pointer_declarator>();
        Token firstToken=token;
    fixed_pointer_declarator = fixed_pointer_declarator();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[180] = jj_gen;
        break label_31;
      }
      jj_consume_token(COMMA);
      fixed_pointer_declarator1 = fixed_pointer_declarator();
                                                                                                                      fixed_pointer_declarator1List.add(fixed_pointer_declarator1);
    }
         {if (true) return new fixed_pointer_declarators(fixed_pointer_declarator, fixed_pointer_declarator1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public fixed_pointer_declarator fixed_pointer_declarator() throws ParseException {
        identifier identifier;
        fixed_pointer_initializer fixed_pointer_initializer;
        Token firstToken=token;
    identifier = identifier();
    jj_consume_token(ASSIGN);
    fixed_pointer_initializer = fixed_pointer_initializer();
         {if (true) return new fixed_pointer_declarator(identifier, fixed_pointer_initializer, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public fixed_pointer_initializer fixed_pointer_initializer() throws ParseException {
        ASTTextNode text281 = null;
        expression expression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMPER:
      jj_consume_token(AMPER);
              text281=new ASTTextNode("&",new WToken(token));
      break;
    default:
      jj_la1[181] = jj_gen;
      ;
    }
    expression = expression();
         {if (true) return new fixed_pointer_initializer(text281, expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public stackalloc_initializer stackalloc_initializer() throws ParseException {
        non_array_type non_array_type;
        expression expression;
        Token firstToken=token;
    jj_consume_token(STACKALLOC);
    non_array_type = non_array_type();
    jj_consume_token(LBRACK);
    expression = expression();
    jj_consume_token(RBRACK);
         {if (true) return new stackalloc_initializer(non_array_type, expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_3R_150() {
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_186()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_144()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) return true;
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    if (jj_3R_117()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_114()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(ULONG)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(UINT)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_69()) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(USHORT)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(SBYTE)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_157()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_88()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(OBJECT)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_3R_241()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(LBRACK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_66()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_3R_237()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    if (jj_3R_70()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_36()) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_251() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_3R_251()) return true;
    if (jj_3R_217()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(STACKALLOC)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    }
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_231()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(VERBATIM_STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_190()) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(REGULAR_STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) return true;
    }
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_221()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(HEXADECIMAL_INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(NUMERIC_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_3R_242()) return true;
    if (jj_3R_192()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_36()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_3R_217()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(SR)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(ASSEMBLY)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(SL)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(MODULE)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(ARROW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_238()) return true;
    if (jj_3R_172()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(UNCHECKED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_3R_192()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(CHECKED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(IS)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(TYPEOF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) return true;
    }
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(GTHAN)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(LTHAN)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_3R_226()) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_240()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(BASE)) return true;
    if (jj_3R_144()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_239()) return true;
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(BASE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_scan_token(AMPER)) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    }
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(BOR)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_3R_172()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(CARET)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(LOR)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) return true;
    }
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_229()) return true;
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_151()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(OUT)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_155()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(REF)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    }
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_206()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_138()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_36()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(LBRACK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_166()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_167()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_106()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_82()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_64()) return true;
    if (jj_3R_136()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_36()) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(QMARK)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(BSR_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(SR_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(SL_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(BXOR_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(BOR_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(BAND_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_45()) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(MOD_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(DIV_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(STAR_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(MINUS_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(PLUS_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    Token xsp;
    if (jj_3R_169()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_169()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  public CSParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[182];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x5c001480,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x832100,0x832100,0x822100,0x820100,0x820100,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2837900,0x0,0x0,0x2837900,0x2836900,0x0,0x0,0x0,0x0,0x2937900,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2937900,0x0,0x100000,0x100000,0x0,0x800,0xa283f900,0x0,0x0,0x2837900,0x0,0x8283f900,0xa283f900,0xa283f900,0x0,0x0,0x80000,0x80000,0x80000,0x0,0x2837900,0x2837900,0x2837900,0x2837900,0x80008000,0x80000,0x2837900,0x2837900,0x0,0x200000,0x200000,0x0,0x0,0x2837900,0x5c001480,0x0,0x5c001480,0x0,0x0,0x54001080,0x5c001480,0x0,0x54001080,0x5c001480,0x8000000,0x54001080,0x54001080,0x0,0x0,0x0,0x0,0x7cc33180,0x0,0x54401080,0x28832100,0x40000,0x0,0x0,0x54401080,0x54401080,0x0,0x0,0x0,0x0,0x0,0x2837900,0x1932100,0x0,0x0,0x0,0x1932100,0x1932100,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x1932100,0x0,0x2937900,0x800,0x0,0x0,0x2837900,0x0,0x0,0x0,0x833100,0x0,0x1000,0x832100,0x0,0x0,0x1000,0x1932100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1932100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2837900,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x102120,0x0,0x10200000,0x10200000,0x0,0x0,0x0,0x0,0x0,0x8040642,0x8040642,0x8000642,0x8000642,0x440,0x40000,0x8000200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x19241642,0x0,0x0,0x19241642,0x19241642,0x0,0x0,0x0,0x0,0x19241646,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x19241646,0x0,0x4,0x4,0x0,0x0,0xff6416d2,0x0,0x0,0x19241642,0x0,0xff6416d2,0xff6416d2,0xff6416d2,0x400000,0x800,0x8,0x8,0x8,0xa0000080,0x19241642,0x19241642,0x19241642,0x19241642,0x4000010,0x8,0x19241642,0x19241642,0x800000,0x800000,0x0,0x0,0x0,0x19241642,0x102120,0x0,0x102120,0x0,0x0,0x100,0x102120,0x0,0x100,0x102120,0x102020,0x100,0x100,0x0,0x0,0x0,0x0,0x81fa763,0x0,0x90101,0x816a662,0x1000000,0x0,0x0,0x90101,0x90101,0x0,0x0,0x0,0x0,0x0,0x19245642,0x8040646,0x0,0x0,0x0,0x8040646,0x8040646,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x10200000,0x0,0x20000,0x8040646,0x0,0x19241646,0x1000000,0x0,0x0,0x19245642,0x0,0x0,0x0,0x8048642,0x0,0x0,0x8048642,0x1000000,0x0,0x0,0x8040646,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8040646,0x0,0x8010,0x0,0x0,0x0,0x8010,0x0,0x0,0x8010,0x0,0x19241642,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x1000,0x2000000,0x2900,0x300000,0x0,0x0,0x400000,0x2000000,0x0,0x2000000,0x0,0x310614,0x10614,0x614,0x614,0x614,0x300000,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x0,0x8000,0x0,0x0,0xa0000000,0xa0000000,0x0,0x0,0xa0000000,0x8310655,0xa0000000,0xa400000,0x8310655,0x8310655,0xa400000,0xa400000,0x8400000,0x8400000,0xa8310655,0xa400000,0x2000000,0x800000,0x8400000,0x8400000,0x8000000,0x2000000,0xa8310655,0x0,0x0,0x0,0x0,0x0,0xa8b7175f,0x0,0x0,0xa8b10655,0x0,0xa8b7175f,0xa8b7175f,0xa8b7175f,0x8,0x0,0x0,0x0,0x0,0x40000,0xa8310655,0xa8310655,0xa8310655,0xa8310655,0x2,0x300000,0xa8310655,0xa8310655,0x0,0x0,0x0,0x300000,0x8800000,0xa8310655,0x2002900,0x1000,0x2002900,0x0,0x0,0x2100,0x2900,0x2000000,0x2100,0x2002900,0x800,0x2100,0x2100,0x0,0x0,0x0,0x0,0x2316f34,0x2000000,0x6100,0x310e34,0x8000000,0x300000,0x8800000,0x6100,0x6100,0x0,0x0,0x0,0x0,0x0,0xa8b10655,0x2310614,0x800000,0x2000000,0x0,0x310614,0x310614,0x2000000,0x0,0x0,0x2000000,0x2000000,0x0,0x300000,0x0,0x400000,0x300000,0x0,0xa0000000,0xa0000000,0x20,0x2310614,0x0,0xa8310655,0x0,0x0,0x0,0xa9b10655,0x1000000,0x0,0x0,0x2310714,0x2000000,0x100,0x310614,0x300000,0x8800000,0x100,0x2310614,0x2000000,0x2000000,0x0,0x0,0x3300000,0x1000000,0x2000000,0x0,0x2310614,0x2000000,0x0,0x2000000,0x300000,0x2000000,0x0,0x4000000,0x0,0x0,0x8000000,0xa8310655,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x555455,0x555455,0x0,0x40000000,0x80000000,0x20000,0x80000,0x8000,0x20800000,0x20800000,0xf000000,0xf000000,0xf000000,0x0,0xa00,0xa00,0x0,0x0,0x2a,0x2a,0x10200182,0x0,0x10200182,0x180,0x0,0x0,0x180,0x180,0x180,0x180,0x10200182,0x180,0x0,0x0,0x180,0x180,0x0,0x0,0x10200182,0x0,0x0,0x0,0x0,0x0,0x10200182,0x0,0x400000,0x10200182,0x0,0x10200182,0x10200182,0x10200182,0x0,0x0,0x0,0x0,0x0,0x0,0x10200182,0x10200182,0x10200182,0x10200182,0x0,0x0,0x10200182,0x10200182,0x0,0x0,0x0,0x0,0x0,0x10200182,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x200000,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x400000,0x0,0x400000,0x10200182,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x10200180,0x2f8a8a2a,0x0,0x0,0x0,0x10200182,0x0,0x0,0x0,0x10200182,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10200182,0x0,0x8000,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x100,0xf800,0x0,0x0,0x0,0x0,0x0,0x1,0x100,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf900,0x0,0x40,0xf900,0xf900,0x40,0x40,0x40,0x40,0xf900,0x40,0x0,0x0,0x40,0x40,0x0,0x0,0xf900,0x1,0x0,0x0,0x1,0x0,0xf904,0x1,0x0,0xf900,0x1,0xf904,0xf904,0xf904,0x0,0x0,0x0,0x0,0x0,0x0,0xf900,0xf900,0xf900,0xf900,0x0,0x100,0xf900,0xf900,0x0,0x0,0x0,0x100,0x0,0xf900,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4,0x1,0x1,0x100,0x0,0x0,0x100,0x0,0x100,0x5,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0xf900,0x100,0x4,0x0,0x1,0x100,0x100,0x0,0x0,0x0,0x100,0x0,0x1,0x100,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x100,0x2,0xf900,0x0,0x2,0x4,0xf900,0x1,0x2,0x4,0x100,0x0,0x0,0x100,0x100,0x0,0x0,0x100,0x100,0x0,0x2,0x4,0x100,0x1,0x0,0x0,0x100,0x0,0x100,0x0,0x0,0x0,0x100,0x0,0x1,0x100,0x0,0xf900,0x1,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public CSParser(CharStream stream) {
    token_source = new CSParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 182; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 182; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CSParser(CSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 182; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 182; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[156];
    for (int i = 0; i < 156; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 182; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 156; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
