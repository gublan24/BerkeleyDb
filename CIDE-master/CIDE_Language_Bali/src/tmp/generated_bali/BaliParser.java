/* Generated By:JavaCC: Do not edit this line. BaliParser.java */
package tmp.generated_bali;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

public class BaliParser implements BaliParserConstants {

    private static BaliParse parseRoot = null ;

    public static BaliParse getStartRoot () {
        return parseRoot ;
    }

        public ISourceFile getRoot() throws ParseException {
                return BaliParse();
        }



    //*************************************************************************
    // Code inserted from "bali.b" source grammar:
    //*************************************************************************

    /**
     * Append the given {@link Token} and any preceding special tokens to a
     * given {@link StringBuffer}.
     *
     * @param token the given JavaCC {@link Token} object
     * @param buffer the buffer to which to append <code>token</code>
     **/
    final private static void accumulate (Token token, StringBuffer buffer) {

        // Append preceding special tokens to <code>buffer</code>:
        //
        Token special = firstSpecial (token) ;
        if (special != token)
            while (special != null) {
                buffer.append (special.toString ()) ;
                special = special.next ;
            }

        // Finally, append the token itself:
        //
        buffer.append (token.toString ()) ;
    }

    /**
     * Accumulate {@list Token} objects from the token stream, respecting
     * nested code inside <code>open</code> and <code>close</code> pairs,
     * until an unmatched <code>close</code> is the next token in the stream.
     * This method assumes that an <code>open</code> token has just been read
     * from the stream so the initial nesting level is 1.  The method returns
     * when a matching <code>close</code> token is the next token in the token
     * stream.  <em>The <code>close</code> token is left in the stream!</em>
     *
     * @return the accumulated tokens as a {@link String}.
     *
     * @throws ParseException
     * if an end-of-file is found before an unmatched <code>close</code> token.
     **/
    final private Token accumulateNestedRegion (int open, int close)
    throws ParseException {

        StringBuffer buffer = new StringBuffer () ;

        // Initialize result with known information (starting position, etc.):
        //
        Token result = Token.newToken (OTHER) ;
        result.specialToken = null ;

        Token startToken = firstSpecial (getToken (1)) ;
        result.beginColumn = startToken.beginColumn ;
        result.beginLine = startToken.beginLine ;

        // Accumulate tokens until a <code>close</code> token is found:
        //
        for (int nesting = 1 ; nesting > 0 ; ) {

            token = getToken (1) ;

            // Update information in result:
            //
            result.endColumn = token.endColumn ;
            result.endLine = token.endLine ;
            result.next = token.next ;

            if (token.kind == EOF)
                throw new ParseException (
                    "accumulating from line "
                    + result.beginLine
                    + " at column "
                    + result.beginColumn
                    + ": EOF reached before ending "
                    + tokenImage [close]
                    + " found"
                ) ;

            if (token.kind == open)
                ++ nesting ;
            else if (token.kind == close) {
                if (nesting == 1)
                    break ;
                -- nesting ;
            }

            accumulate (token, buffer) ;
            getNextToken () ;
        }

        result.image = buffer.toString () ;
        return result ;
    }

    /**
     * Accumulate {@link Token} objects from the token stream until a token
     * matching <code>tokenKind</code> is consumed from the stream.  The
     * tokens are accumulated in <code>buffer</code>, including the terminating
     * token.
     *
     * @return a {@link Token}
     * formed by concatenating all intervening tokens and special tokens.
     **/
    final private Token accumulateUntilToken (int tokenKind)
    throws ParseException {

        StringBuffer buffer = new StringBuffer () ;
        Token token = getNextToken () ;

        // Initialize result with known information (starting position, etc.):
        //
        Token result = Token.newToken (OTHER) ;
        result.specialToken = null ;

        Token startToken = firstSpecial (token) ;
        result.beginColumn = startToken.beginColumn ;
        result.beginLine = startToken.beginLine ;

        // Accumulate tokens until a <code>tokenKind</code> token is found:
        //
        while (token.kind != tokenKind) {

            // Update information in result:
            //
            result.endColumn = token.endColumn ;
            result.endLine = token.endLine ;
            result.next = token.next ;

            if (token.kind == EOF)
                throw new ParseException (
                    "from line "
                    + result.beginLine
                    + " at column "
                    + result.beginColumn
                    + ": EOF reached before "
                    + tokenImage [tokenKind]
                    + " found"
                ) ;

            accumulate (token, buffer) ;
            token = getNextToken () ;
        }

        accumulate (token, buffer) ;

        result.image = buffer.toString () ;
        return result ;
    }

    /**
     * Finds the first token, special or otherwise, in the list of special
     * tokens preceding this {@link Token}.  If this list is non-empty, the
     * result will be a special token.  Otherwise, it will be the starting
     * token.
     *
     * @param token the given {@link Token}.
     * @return the first special token preceding <code>token</code>.
     **/
    final private static Token firstSpecial (Token token) {

        while (token.specialToken != null)
            token = token.specialToken ;

        return token ;
    }

  Token findBlockBegin() throws ParseException {
    return accumulateUntilToken (LBRACE) ;
  }

  Token findBlockEnd() throws ParseException {
    return accumulateNestedRegion (LBRACE, RBRACE) ;
  }

  Token findCloseAngle() throws ParseException {
    return accumulateNestedRegion (OPENANGLE, CLOSEANGLE) ;
  }

  Token findCloseParen() throws ParseException {
    return accumulateNestedRegion (OPENPAREN, CLOSEPAREN) ;
  }

  final public BaliParse BaliParse() throws ParseException {
        OptionsNode optionsNode = null;
        ParserCode parserCode = null;
        Statements statements = null;
        Token firstToken=token;
    switch (jj_nt.kind) {
    case _OPTIONS:
      optionsNode = OptionsNode();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case _CODE:
      parserCode = ParserCode();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case OPENANGLE:
    case _JAVACODE:
    case _MORE:
    case _SKIP:
    case _SPECIAL_TOKEN:
    case _TOKEN:
    case _TOKEN_MGR_DECLS:
    case STRING:
    case IDENTIFIER:
      statements = Statements();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
         {if (true) return new BaliParse(optionsNode, parserCode, statements, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public OptionsNode OptionsNode() throws ParseException {
        Token t;
        ASTStringNode _options;
        Block block;
        ASTStringNode _options1;
        Token firstToken=token;
    t = jj_consume_token(_OPTIONS);
                     _options=new ASTStringNode(t.image,new WToken(t));
    block = Block();
    t = jj_consume_token(_OPTIONS);
                                                                                                    _options1=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new OptionsNode(_options, block, _options1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ParserCode ParserCode() throws ParseException {
        Token t;
        ASTStringNode _code;
        Block block;
        ASTStringNode _code1;
        Token firstToken=token;
    t = jj_consume_token(_CODE);
                  _code=new ASTStringNode(t.image,new WToken(t));
    block = Block();
    t = jj_consume_token(_CODE);
                                                                                           _code1=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new ParserCode(_code, block, _code1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
        Token t;
        ASTStringNode findblockend;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    t = findBlockEnd();
                             findblockend=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(RBRACE);
         {if (true) return new Block(findblockend, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Statements Statements() throws ParseException {
        Statement statement;
        ArrayList<Statement> statementList = new ArrayList<Statement>();
        Token firstToken=token;
    label_1:
    while (true) {
      statement = Statement();
                               statementList.add(statement);
      switch (jj_nt.kind) {
      case OPENANGLE:
      case _JAVACODE:
      case _MORE:
      case _SKIP:
      case _SPECIAL_TOKEN:
      case _TOKEN:
      case _TOKEN_MGR_DECLS:
      case STRING:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
         {if (true) return new Statements(statementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
        BaliGrammarRule baliGrammarRule;
        BaliTokenDefinition baliTokenDefinition;
        JavacodeProduction javacodeProduction;
        RegexTokenDefinition regexTokenDefinition;
        TokenManagerDeclarations tokenManagerDeclarations;
        Token firstToken=token;
    switch (jj_nt.kind) {
    case IDENTIFIER:
      baliGrammarRule = BaliGrammarRule();
         {if (true) return new Statement1(baliGrammarRule, firstToken.next,token);}
      break;
    case STRING:
      baliTokenDefinition = BaliTokenDefinition();
         {if (true) return new Statement2(baliTokenDefinition, firstToken.next,token);}
      break;
    case _JAVACODE:
      javacodeProduction = JavacodeProduction();
         {if (true) return new Statement3(javacodeProduction, firstToken.next,token);}
      break;
    case OPENANGLE:
    case _MORE:
    case _SKIP:
    case _SPECIAL_TOKEN:
    case _TOKEN:
      regexTokenDefinition = RegexTokenDefinition();
         {if (true) return new Statement4(regexTokenDefinition, firstToken.next,token);}
      break;
    case _TOKEN_MGR_DECLS:
      tokenManagerDeclarations = TokenManagerDeclarations();
         {if (true) return new Statement5(tokenManagerDeclarations, firstToken.next,token);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BaliTokenDefinition BaliTokenDefinition() throws ParseException {
        Token t;
        ASTStringNode string;
        ASTStringNode bali_token;
        Token firstToken=token;
    t = jj_consume_token(STRING);
                   string=new ASTStringNode(t.image,new WToken(t));
    t = jj_consume_token(BALI_TOKEN);
                                                                                    bali_token=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new BaliTokenDefinition(string, bali_token, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public JavacodeProduction JavacodeProduction() throws ParseException {
        Token t;
        ASTStringNode _javacode;
        ScanBlock scanBlock;
        Token firstToken=token;
    t = jj_consume_token(_JAVACODE);
                      _javacode=new ASTStringNode(t.image,new WToken(t));
    scanBlock = ScanBlock();
         {if (true) return new JavacodeProduction(_javacode, scanBlock, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TokenManagerDeclarations TokenManagerDeclarations() throws ParseException {
        Token t;
        ASTStringNode _token_mgr_decls;
        ScanBlock scanBlock;
        Token firstToken=token;
    t = jj_consume_token(_TOKEN_MGR_DECLS);
                             _token_mgr_decls=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(COLON);
    scanBlock = ScanBlock();
         {if (true) return new TokenManagerDeclarations(_token_mgr_decls, scanBlock, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ScanBlock ScanBlock() throws ParseException {
        Token t;
        ASTStringNode findblockbegin;
        ASTStringNode findblockend;
        Token firstToken=token;
    t = findBlockBegin();
                           findblockbegin=new ASTStringNode(t.image,new WToken(t));
    t = findBlockEnd();
                                                                                                      findblockend=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(RBRACE);
         {if (true) return new ScanBlock(findblockbegin, findblockend, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public BaliGrammarRule BaliGrammarRule() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Production production;
        ArrayList<Production> list0=new ArrayList<Production>();
        Production production1;
        ArrayList<Production> production1List = new ArrayList<Production>();
        Token firstToken=token;
    t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(COLON);
    production = Production();
                                                                                                         list0.add(production);
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case PIPE:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(PIPE);
      production1 = Production();
                                                                                                                                                               list0.add(production1);
    }
    jj_consume_token(SCOLON);
         {if (true) return new BaliGrammarRule(list0, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Production Production() throws ParseException {
        Lookahead lookahead = null;
        Rewrite rewrite;
        Token firstToken=token;
    switch (jj_nt.kind) {
    case _LOOKAHEAD:
      lookahead = Lookahead();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    rewrite = Rewrite();
         {if (true) return new Production(lookahead, rewrite, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Lookahead Lookahead() throws ParseException {
        Token t;
        ASTStringNode _lookahead;
        ASTStringNode findcloseparen;
        Token firstToken=token;
    t = jj_consume_token(_LOOKAHEAD);
                       _lookahead=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(OPENPAREN);
    t = findCloseParen();
                                                                                                    findcloseparen=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(CLOSEPAREN);
         {if (true) return new Lookahead(_lookahead, findcloseparen, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Rewrite Rewrite() throws ParseException {
        Lookahead lookahead = null;
        Primitive primitive;
        Primitive primitive1;
        PrimitiveRewrite primitiveRewrite;
        Token firstToken=token;
    switch (jj_nt.kind) {
    case OPENPAREN:
      jj_consume_token(OPENPAREN);
      switch (jj_nt.kind) {
      case _LOOKAHEAD:
        lookahead = Lookahead();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      primitive = Primitive();
      jj_consume_token(CLOSEPAREN);
      jj_consume_token(PLUS);
         {if (true) return new SimpleListNode(lookahead, primitive, firstToken.next,token);}
      break;
    case SBOPEN:
    case BALI_TOKEN:
    case STRING:
    case IDENTIFIER:
      primitive1 = Primitive();
      primitiveRewrite = PrimitiveRewrite();
         {if (true) return new PrimitiveRewriteNode(primitive1, primitiveRewrite, firstToken.next,token);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PrimitiveRewrite PrimitiveRewrite() throws ParseException {
        Lookahead lookahead = null;
        Primitive primitive;
        Primitive primitive1;
        Pattern pattern = null;
        ClassName className = null;
        Token firstToken=token;
    switch (jj_nt.kind) {
    case OPENPAREN:
      jj_consume_token(OPENPAREN);
      switch (jj_nt.kind) {
      case _LOOKAHEAD:
        lookahead = Lookahead();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      primitive = Primitive();
      primitive1 = Primitive();
      jj_consume_token(CLOSEPAREN);
      jj_consume_token(STAR);
         {if (true) return new ComplexListNode(lookahead, primitive, primitive1, firstToken.next,token);}
      break;
    default:
      jj_la1[12] = jj_gen;
      switch (jj_nt.kind) {
      case SBOPEN:
      case BALI_TOKEN:
      case STRING:
      case IDENTIFIER:
        pattern = Pattern();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case DOUBLECOLON:
        className = ClassName();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
         {if (true) return new PatternNode(pattern, className, firstToken.next,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Pattern Pattern() throws ParseException {
        Primitive primitive;
        ArrayList<Primitive> primitiveList = new ArrayList<Primitive>();
        Token firstToken=token;
    label_3:
    while (true) {
      primitive = Primitive();
                               primitiveList.add(primitive);
      switch (jj_nt.kind) {
      case SBOPEN:
      case BALI_TOKEN:
      case STRING:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
    }
         {if (true) return new Pattern(primitiveList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ClassName ClassName() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    jj_consume_token(DOUBLECOLON);
    t = jj_consume_token(IDENTIFIER);
                            identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new ClassName(identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Primitive Primitive() throws ParseException {
        IASTNode optionalNode;
        Terminal terminal;
        Token firstToken=token;
    switch (jj_nt.kind) {
    case SBOPEN:
      optionalNode = OptionalNode();
         {if (true) return new Primitive1(optionalNode, firstToken.next,token);}
      break;
    case BALI_TOKEN:
    case STRING:
    case IDENTIFIER:
      terminal = Terminal();
         {if (true) return new Primitive2(terminal, firstToken.next,token);}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public OptionalNode OptionalNode() throws ParseException {
        Lookahead lookahead = null;
        Terminal terminal;
        Token firstToken=token;
    jj_consume_token(SBOPEN);
    switch (jj_nt.kind) {
    case _LOOKAHEAD:
      lookahead = Lookahead();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    terminal = Terminal();
    jj_consume_token(SBCLOSE);
         {if (true) return new OptionalNode(lookahead, terminal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Terminal Terminal() throws ParseException {
        Token t;
        ASTStringNode bali_token;
        ASTStringNode identifier;
        ASTStringNode string;
        Token firstToken=token;
    switch (jj_nt.kind) {
    case BALI_TOKEN:
      t = jj_consume_token(BALI_TOKEN);
                       bali_token=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new BaliTokenNode(bali_token, firstToken.next,token);}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new IdentifierNode(identifier, firstToken.next,token);}
      break;
    case STRING:
      t = jj_consume_token(STRING);
                   string=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new StringNode(string, firstToken.next,token);}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public RegexTokenDefinition RegexTokenDefinition() throws ParseException {
        StateSet stateSet = null;
        REKind rEKind;
        CaseFlag caseFlag = null;
        REList rEList;
        Token firstToken=token;
    switch (jj_nt.kind) {
    case OPENANGLE:
      stateSet = StateSet();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    rEKind = REKind();
    switch (jj_nt.kind) {
    case SBOPEN:
      caseFlag = CaseFlag();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    jj_consume_token(LBRACE);
    rEList = REList();
    jj_consume_token(RBRACE);
         {if (true) return new RegexTokenDefinition(stateSet, rEKind, caseFlag, rEList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public StateSet StateSet() throws ParseException {
        StatesSpecifier statesSpecifier;
        Token firstToken=token;
    jj_consume_token(OPENANGLE);
    statesSpecifier = StatesSpecifier();
    jj_consume_token(CLOSEANGLE);
         {if (true) return new StateSet(statesSpecifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public StatesSpecifier StatesSpecifier() throws ParseException {
        StatesList statesList;
        Token firstToken=token;
    switch (jj_nt.kind) {
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new StarStatesNode(firstToken.next,token);}
      break;
    case BALI_TOKEN:
      statesList = StatesList();
         {if (true) return new ListStatesNode(statesList, firstToken.next,token);}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StatesList StatesList() throws ParseException {
        StateName stateName;
        ArrayList<StateName> list0=new ArrayList<StateName>();
        StateName stateName1;
        ArrayList<StateName> stateName1List = new ArrayList<StateName>();
        Token firstToken=token;
    stateName = StateName();
                              list0.add(stateName);
    label_4:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      stateName1 = StateName();
                                                                                 list0.add(stateName1);
    }
         {if (true) return new StatesList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public StateName StateName() throws ParseException {
        Token t;
        ASTStringNode bali_token;
        Token firstToken=token;
    t = jj_consume_token(BALI_TOKEN);
                       bali_token=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new StateName(bali_token, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public REKind REKind() throws ParseException {
        Token t;
        ASTStringNode _token;
        ASTStringNode _special_token;
        ASTStringNode _skip;
        ASTStringNode _more;
        Token firstToken=token;
    switch (jj_nt.kind) {
    case _TOKEN:
      t = jj_consume_token(_TOKEN);
                   _token=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TokenKindNode(_token, firstToken.next,token);}
      break;
    case _SPECIAL_TOKEN:
      t = jj_consume_token(_SPECIAL_TOKEN);
                           _special_token=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new SpecialKindNode(_special_token, firstToken.next,token);}
      break;
    case _SKIP:
      t = jj_consume_token(_SKIP);
                  _skip=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new SkipKindNode(_skip, firstToken.next,token);}
      break;
    case _MORE:
      t = jj_consume_token(_MORE);
                  _more=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new MoreKindNode(_more, firstToken.next,token);}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CaseFlag CaseFlag() throws ParseException {
        Token t;
        ASTStringNode _ignore_case;
        Token firstToken=token;
    jj_consume_token(SBOPEN);
    t = jj_consume_token(_IGNORE_CASE);
                             _ignore_case=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(SBCLOSE);
         {if (true) return new CaseFlag(_ignore_case, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public REList REList() throws ParseException {
        RegexBlock regexBlock;
        ArrayList<RegexBlock> list0=new ArrayList<RegexBlock>();
        RegexBlock regexBlock1;
        ArrayList<RegexBlock> regexBlock1List = new ArrayList<RegexBlock>();
        Token firstToken=token;
    regexBlock = RegexBlock();
                                list0.add(regexBlock);
    label_5:
    while (true) {
      switch (jj_nt.kind) {
      case PIPE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_5;
      }
      jj_consume_token(PIPE);
      regexBlock1 = RegexBlock();
                                                                                      list0.add(regexBlock1);
    }
         {if (true) return new REList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public RegexBlock RegexBlock() throws ParseException {
        Regex regex;
        Block block = null;
        NextState nextState = null;
        Token firstToken=token;
    regex = Regex();
    switch (jj_nt.kind) {
    case LBRACE:
      block = Block();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case COLON:
      nextState = NextState();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
         {if (true) return new RegexBlock(regex, block, nextState, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public NextState NextState() throws ParseException {
        Token t;
        ASTStringNode bali_token;
        Token firstToken=token;
    jj_consume_token(COLON);
    t = jj_consume_token(BALI_TOKEN);
                           bali_token=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new NextState(bali_token, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Regex Regex() throws ParseException {
        Token t;
        ASTStringNode string;
        AngleRegex angleRegex;
        Token firstToken=token;
    switch (jj_nt.kind) {
    case STRING:
      t = jj_consume_token(STRING);
                   string=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new StringRegexNode(string, firstToken.next,token);}
      break;
    case OPENANGLE:
      jj_consume_token(OPENANGLE);
      angleRegex = AngleRegex();
         {if (true) return new AngleRegexNode(angleRegex, firstToken.next,token);}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AngleRegex AngleRegex() throws ParseException {
        Token t;
        ASTStringNode bali_token;
        Label label = null;
        ComplexRegex complexRegex;
        Token firstToken=token;
    if (jj_2_1(2)) {
      t = jj_consume_token(BALI_TOKEN);
                                    bali_token=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(CLOSEANGLE);
         {if (true) return new BaliRegexNode(bali_token, firstToken.next,token);}
    } else {
      switch (jj_nt.kind) {
      case HASH:
      case BALI_TOKEN:
        label = Label();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      complexRegex = ComplexRegex();
         {if (true) return new ComplexRegexNode(label, complexRegex, firstToken.next,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public ComplexRegex ComplexRegex() throws ParseException {
        Token t;
        ASTStringNode string;
        ASTStringNode findcloseangle;
        Token firstToken=token;
    if (jj_2_2(2)) {
      t = jj_consume_token(STRING);
                                string=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(CLOSEANGLE);
         {if (true) return new StringComplexNode(string, firstToken.next,token);}
    } else {
      t = findCloseAngle();
                           findcloseangle=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(CLOSEANGLE);
         {if (true) return new AngleComplexNode(findcloseangle, firstToken.next,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Label Label() throws ParseException {
        ASTTextNode text17 = null;
        Token t;
        ASTStringNode bali_token;
        Token firstToken=token;
    switch (jj_nt.kind) {
    case HASH:
      jj_consume_token(HASH);
              text17=new ASTTextNode("#",new WToken(token));
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    t = jj_consume_token(BALI_TOKEN);
                                                                              bali_token=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(COLON);
         {if (true) return new Label(text17, bali_token, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(STRING)) return true;
    if (jj_scan_token(CLOSEANGLE)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(BALI_TOKEN)) return true;
    if (jj_scan_token(CLOSEANGLE)) return true;
    return false;
  }

  public BaliParserTokenManager token_source;
  public Token token, jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x80000000,0x40000,0x40000,0x40000,0x40000000,0x0,0x0,0x10080000,0x0,0x10000000,0x200000,0x80000,0x10000000,0x10000000,0x0,0x0,0x40000,0x10000000,0x1000000,0x4000000,0x0,0x40000000,0x20000,0x400000,0x40000,0x800000,0x800000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x20,0x0,0x14f14,0x14f14,0x14f14,0x0,0x8,0x8,0x15000,0x8,0x15000,0x0,0x0,0x15000,0x15000,0x8,0x15000,0x0,0x0,0x1000,0x0,0x710,0x0,0x0,0x0,0x4000,0x1000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public BaliParser(CharStream stream) {
    token_source = new BaliParserTokenManager(stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BaliParser(BaliParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(BaliParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[50];
    for (int i = 0; i < 50; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
