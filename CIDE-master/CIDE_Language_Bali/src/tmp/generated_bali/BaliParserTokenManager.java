/* Generated By:JavaCC: Do not edit this line. BaliParserTokenManager.java */
package tmp.generated_bali;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import cide.gparser.*;
public class BaliParserTokenManager implements BaliParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x140L) != 0L)
            return 2;
         if ((active0 & 0x2080000000L) != 0L)
         {
            jjmatchedKind = 48;
            return 17;
         }
         if ((active0 & 0xfdf00000000L) != 0L)
         {
            jjmatchedKind = 44;
            return 18;
         }
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0xfdf00000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 18;
         }
         if ((active0 & 0x2080000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
            return 17;
         }
         return -1;
      case 2:
         if ((active0 & 0x2080000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
            return 17;
         }
         if ((active0 & 0xfde00000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
            return 18;
         }
         if ((active0 & 0x100000000L) != 0L)
            return 18;
         return -1;
      case 3:
         if ((active0 & 0xece00000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
            return 18;
         }
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
            return 17;
         }
         if ((active0 & 0x11000000000L) != 0L)
            return 18;
         if ((active0 & 0x80000000L) != 0L)
            return 17;
         return -1;
      case 4:
         if ((active0 & 0x2ce00000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 4;
            }
            return 18;
         }
         if ((active0 & 0xc0000000000L) != 0L)
            return 18;
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 48;
               jjmatchedPos = 4;
            }
            return 17;
         }
         return -1;
      case 5:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 5;
            return 17;
         }
         if ((active0 & 0xace00000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
            return 18;
         }
         return -1;
      case 6:
         if ((active0 & 0xace00000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 6;
            return 18;
         }
         if ((active0 & 0x2000000000L) != 0L)
            return 17;
         return -1;
      case 7:
         if ((active0 & 0xaca00000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
            return 18;
         }
         if ((active0 & 0x400000000L) != 0L)
            return 18;
         return -1;
      case 8:
         if ((active0 & 0xac200000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
            return 18;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 18;
         return -1;
      case 9:
         if ((active0 & 0xa4200000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 9;
            return 18;
         }
         if ((active0 & 0x8000000000L) != 0L)
            return 18;
         return -1;
      case 10:
         if ((active0 & 0x200000000L) != 0L)
            return 18;
         if ((active0 & 0xa4000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 10;
            return 18;
         }
         return -1;
      case 11:
         if ((active0 & 0x4000000000L) != 0L)
            return 18;
         if ((active0 & 0xa0000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 11;
            return 18;
         }
         return -1;
      case 12:
         if ((active0 & 0x20000000000L) != 0L)
            return 18;
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 12;
            return 18;
         }
         return -1;
      case 13:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 13;
            return 18;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 5);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 2);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 35:
         return jjStopAtPos(0, 23);
      case 40:
         return jjStopAtPos(0, 19);
      case 41:
         return jjStopAtPos(0, 16);
      case 42:
         return jjStopAtPos(0, 24);
      case 43:
         return jjStopAtPos(0, 25);
      case 44:
         return jjStopAtPos(0, 26);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x140L);
      case 58:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 59:
         return jjStopAtPos(0, 27);
      case 60:
         return jjStopAtPos(0, 18);
      case 62:
         return jjStopAtPos(0, 15);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0xc000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x30000000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L);
      case 91:
         return jjStopAtPos(0, 28);
      case 93:
         return jjStopAtPos(0, 29);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 123:
         return jjStopAtPos(0, 17);
      case 124:
         return jjStopAtPos(0, 30);
      case 125:
         return jjStopAtPos(0, 20);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 58:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0xc400000000L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0xc1900000000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 70:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 18);
         break;
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0xd000000000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 69:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 18);
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000000L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 80:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 18);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 17);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      case 78:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0xc200000000L);
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 69:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 18);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      case 68:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 18);
         break;
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 39, 18);
         break;
      case 71:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L);
      case 69:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(10, 33, 18);
         break;
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L);
      case 75:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0xa0000000000L);
      case 78:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 38, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L);
      case 78:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 41, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 43, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 18;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(15);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(17);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 36)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(5);
                  }
                  break;
               case 18:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(17);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(5);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar != 36)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 7:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 9:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if (curChar == 34 && kind > 46)
                     kind = 46;
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar != 36)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(17);
                  }
                  if ((0x87fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(5);
                  }
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(17);
                  }
                  if ((0x87fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(5);
                  }
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 8:
                  if (curChar == 92)
                     jjAddStates(7, 9);
                  break;
               case 9:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 18 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 13 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   7, 8, 10, 7, 8, 12, 10, 9, 11, 13, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\76", "\51", "\173", "\74", "\50", "\175", "\72\72", "\72", "\43", 
"\52", "\53", "\54", "\73", "\133", "\135", "\174", "\143\157\144\145", 
"\105\117\106", "\111\107\116\117\122\105\137\103\101\123\105", 
"\112\101\126\101\103\117\104\105", "\114\117\117\113\101\110\105\101\104", "\115\117\122\105", 
"\157\160\164\151\157\156\163", "\120\101\122\123\105\122\137\102\105\107\111\116", 
"\120\101\122\123\105\122\137\105\116\104", "\123\113\111\120", "\123\120\105\103\111\101\114\137\124\117\113\105\116", 
"\124\117\113\105\116", "\124\117\113\105\116\137\115\107\122\137\104\105\103\114\123", null, null, 
null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3dfffffff8001L, 
};
static final long[] jjtoSkip = {
   0xe3eL, 
};
static final long[] jjtoSpecial = {
   0xe3eL, 
};
static final long[] jjtoMore = {
   0x11c0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[18];
private final int[] jjstateSet = new int[36];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public BaliParserTokenManager(CharStream stream){
   input_stream = stream;
}
public BaliParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 18; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   t.length = input_stream.getLength();
   t.offset = input_stream.getOffset();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 49)
         {
            jjmatchedKind = 49;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                       input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
