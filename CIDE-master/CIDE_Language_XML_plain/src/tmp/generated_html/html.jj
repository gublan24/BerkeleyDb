/*
 * HtmlParser.jj -- JavaCC grammar for HTML.  
 * Copyright (C) 1999 Quiotix Corporation.  
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2, as 
 * published by the Free Software Foundation.  
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License (http://www.gnu.org/copyleft/gpl.txt)
 * for more details.
 */


/* 
 * JavaCC grammar file for HTML.
 * 
 * Author: Brian Goetz, Quiotix
 * Version: 1.00
 * Revision: $Id: HtmlParser-1.0.jj,v 1.1 2002/05/31 00:37:13 brian Exp $
 *
 * This grammar parses an HTML document and produces a (flat) parse "tree" 
 * representing the document.  It preserves almost all information in the
 * source document, including carriage control and spacing (except inside
 * of tags.)  See the HtmlDocument and HtmlDocument.* classes for a 
 * description of the parse tree.  The parse tree supports traversal using
 * the commonly used "Visitor" pattern.  The HtmlDumper class is a visitor
 * which dumps out the tree to an output stream.  
 * 
 * It does not require begin tags to be matched with end tags, or validate
 * the names or contents of the tags (this can easily be done post-parsing; 
 * see the HtmlCollector class (which matches begin tags with end tags) 
 * for an example.)  
 * 
 * Notable edge cases include: 
 * - Quoted string processing.  Quoted strings are matched inside of comments, and
 *   as tag attribute values.  Quoted strings are matched in normal text only
 *   to the extent that they do not span line breaks.  
 * 
 * Please direct comments, questions, gripes or praise to 
 * html-parser@quiotix.com.  If you like it/hate it/use it, please let us know!  
 */

options { IGNORE_CASE = true; STATIC = false; } 

PARSER_BEGIN(HtmlParser)

package tmp.generated_html;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

public class HtmlParser {


}

PARSER_END(HtmlParser)



<*> TOKEN :
{
  <#ALPHA_CHAR: ["a"-"z", "A"-"Z"] >
| <#NUM_CHAR:   ["0"-"9"] >
| <#ALPHANUM_CHAR: [ "a"-"z", "A"-"Z", "0"-"9" ] >
| <#IDENTIFIER_CHAR: [ "a"-"z", "A"-"Z", "0"-"9", "_", "-", "." ] >
| <#IDENTIFIER_PART: <ALPHA_CHAR> (<IDENTIFIER_CHAR>)* >
| <#IDENTIFIER: <IDENTIFIER_PART> (":" <IDENTIFIER_PART>)? >
| <#QUOTED_STRING_NB: ( "'" ( ~["'", "\r", "\n"] )* "'" ) 
                    | ( "\"" ( ~["\"", "\r", "\n"] )* "\"" ) >
| <#QUOTED_STRING: ( "'" ( ~["'"] )* "'" ) | ( "\"" ( ~["\""] )* "\"" ) >
| <#WHITESPACE: ( " " | "\t" | "\n" | "\r" ) >
| <#NEWLINE:    ( "\r\n" | "\r" | "\n" ) >
| <#QUOTE:      ( "'" | "\"" )>
}

<DEFAULT> TOKEN : 
{
  <EOL:            ( " " | "\t" )* <NEWLINE> >
| <TAG_START:      "<"       > : LexStartTag
| <ENDTAG_START:   "</"      > : LexStartTag
| <COMMENT_START:  "<!--"    > : LexComment
| <DECL_START:     "<!"      > : LexDecl
| <PCDATA:         ( ~["'", "\"", "<", "\r", "\n"] )+ >
| <PCDATA_QS:      <QUOTED_STRING_NB> >
| <PCDATA_Q:       <QUOTE> >
}

<LexStartTag> TOKEN :
{
  <TAG_SCRIPT: "SCRIPT">    : LexInTag
| <TAG_NAME: <IDENTIFIER> > : LexInTag
| <LST_ERROR: ~[]>          : DEFAULT
}

<LexInTag> SPECIAL_TOKEN :
{
  < (<WHITESPACE>)+ >
}

<LexInTag> TOKEN :
{
  <ATTR_NAME: <IDENTIFIER> >
| <TAG_END: ">" >                       : DEFAULT
| <ATTR_EQ: "=" >                       : LexAttrVal
| <SLASH: "/" >                       
| <IMPLICIT_TAG_END: "<">               : LexStartTag
| <LIT_ERROR: ~[]>
}
  
<LexAttrVal> SPECIAL_TOKEN :
{
  < <WHITESPACE> >
}

<LexAttrVal> TOKEN :
{
  <ATTR_VAL: <QUOTED_STRING> 
| ( ~[">", "\"", "'", " ", "\t", "\n", "\r"] )+ > : LexInTag
| <LAV_ERROR: ~[]>
}

<LexComment> TOKEN : 
{
  < COMMENT_END:  "-->" > : DEFAULT 
| < DASH:         "-" >
| < COMMENT_EOL:  <NEWLINE> >
| < COMMENT_WORD: ( (~[ "\n", "\r", "'", "\"", "-" ])+ 
                    | <QUOTED_STRING_NB> 
                    | <QUOTE> ) >
}

<LexDecl> TOKEN :
{
  <DECL_ANY: ( <QUOTED_STRING> | ~[ ">", "\"", "'" ] )+ >
| <DECL_END: ">" > : DEFAULT
}

<LexScript> TOKEN :
{
  <SCRIPT_END:   "</SCRIPT>" > : DEFAULT
| <SCRIPT_EOL:   <NEWLINE> >
| <SCRIPT_LBR:   "<" >
| <SCRIPT_WORD:  ( <QUOTED_STRING_NB> 
                   | <QUOTE> 
                   | (~[ "\n", "\r", "'", "\"", "<"])+ ) >
}
HtmlDocument HtmlDocument() : { 
	ElementSequence elementSequence;
	Token t;
	ASTStringNode eof;
	Token firstToken=token;
} { (
	elementSequence=ElementSequence() t=<EOF>{eof=new ASTStringNode(t.image,new WToken(t));} 
	{return new HtmlDocument(elementSequence, eof, firstToken.next,token);}
 ) }

ElementSequence ElementSequence() : { 
	Element element;
	ArrayList<Element> elementList = new ArrayList<Element>();
	Token firstToken=token;
} { (
	(element=Element(){elementList.add(element);})* 
	{return new ElementSequence(elementList, firstToken.next,token);}
 ) }

Element Element() : { 
	Tag tag;
	EndTag endTag;
	CommentTag commentTag;
	DeclTag declTag;
	Token t;
	ASTStringNode tag_start;
	ASTStringNode lst_error;
	ASTStringNode pcdata;
	ASTStringNode pcdata_qs;
	ASTStringNode pcdata_q;
	ASTStringNode eol;
	Token firstToken=token;
} { (
	LOOKAHEAD(2) tag=Tag() 
	{return new Element1(tag, firstToken.next,token);} |
	endTag=EndTag() 
	{return new Element2(endTag, firstToken.next,token);} |
	commentTag=CommentTag() 
	{return new Element3(commentTag, firstToken.next,token);} |
	declTag=DeclTag() 
	{return new Element4(declTag, firstToken.next,token);} |
	LOOKAHEAD(2) t=<TAG_START>{tag_start=new ASTStringNode(t.image,new WToken(t));} t=<LST_ERROR>{lst_error=new ASTStringNode(t.image,new WToken(t));} 
	{return new Element5(tag_start, lst_error, firstToken.next,token);} |
	t=<PCDATA>{pcdata=new ASTStringNode(t.image,new WToken(t));} 
	{return new Element6(pcdata, firstToken.next,token);} |
	t=<PCDATA_QS>{pcdata_qs=new ASTStringNode(t.image,new WToken(t));} 
	{return new Element7(pcdata_qs, firstToken.next,token);} |
	t=<PCDATA_Q>{pcdata_q=new ASTStringNode(t.image,new WToken(t));} 
	{return new Element8(pcdata_q, firstToken.next,token);} |
	t=<EOL>{eol=new ASTStringNode(t.image,new WToken(t));} 
	{return new Element9(eol, firstToken.next,token);}
 ) }

Attribute Attribute() : { 
	Token t;
	ASTStringNode attr_name;
	ASTStringNode attr_val = null;
	Token firstToken=token;
} { (
	t=<ATTR_NAME>{attr_name=new ASTStringNode(t.image,new WToken(t));} [<ATTR_EQ> t=<ATTR_VAL>{attr_val=new ASTStringNode(t.image,new WToken(t));}] 
	{return new Attribute(attr_name, attr_val, firstToken.next,token);}
 ) }

AttributeList AttributeList() : { 
	Attribute attribute;
	ArrayList<Attribute> attributeList = new ArrayList<Attribute>();
	Token firstToken=token;
} { (
	(attribute=Attribute(){attributeList.add(attribute);})* 
	{return new AttributeList(attributeList, firstToken.next,token);}
 ) }

Tag Tag() : { 
	Token t;
	ASTStringNode tag_name;
	AttributeList attributeList;
	ASTStringNode slash = null;
	Token firstToken=token;
} { (
	"<" t=<TAG_NAME>{tag_name=new ASTStringNode(t.image,new WToken(t));} attributeList=AttributeList() [t=<SLASH>{slash=new ASTStringNode(t.image,new WToken(t));}] <TAG_END> 
	{return new Tag(tag_name, attributeList, slash, firstToken.next,token);}
 ) }

EndTag EndTag() : { 
	Token t;
	ASTStringNode tag_name;
	Token firstToken=token;
} { (
	"</" t=<TAG_NAME>{tag_name=new ASTStringNode(t.image,new WToken(t));} <TAG_END> 
	{return new EndTag(tag_name, firstToken.next,token);}
 ) }

CommentTag CommentTag() : { 
	CommentContent commentContent;
	ArrayList<CommentContent> commentContentList = new ArrayList<CommentContent>();
	CommentEnd commentEnd;
	Token firstToken=token;
} { (
	"<!--" (commentContent=CommentContent(){commentContentList.add(commentContent);})* commentEnd=CommentEnd() 
	{return new CommentTag(commentContentList, commentEnd, firstToken.next,token);}
 ) }

CommentContent CommentContent() : { 
	Token t;
	ASTStringNode dash;
	ASTStringNode comment_eol;
	ASTStringNode comment_word;
	Token firstToken=token;
} { (
	t=<DASH>{dash=new ASTStringNode(t.image,new WToken(t));} 
	{return new CommentContent1(dash, firstToken.next,token);} |
	t=<COMMENT_EOL>{comment_eol=new ASTStringNode(t.image,new WToken(t));} 
	{return new CommentContent2(comment_eol, firstToken.next,token);} |
	t=<COMMENT_WORD>{comment_word=new ASTStringNode(t.image,new WToken(t));} 
	{return new CommentContent3(comment_word, firstToken.next,token);}
 ) }

CommentEnd CommentEnd() : { 
	Token t;
	ASTStringNode eof;
	ASTStringNode comment_end;
	Token firstToken=token;
} { (
	t=<EOF>{eof=new ASTStringNode(t.image,new WToken(t));} 
	{return new CommentEnd1(eof, firstToken.next,token);} |
	t=<COMMENT_END>{comment_end=new ASTStringNode(t.image,new WToken(t));} 
	{return new CommentEnd2(comment_end, firstToken.next,token);}
 ) }

DeclTag DeclTag() : { 
	Token t;
	ASTStringNode decl_any;
	Token firstToken=token;
} { (
	"<!" t=<DECL_ANY>{decl_any=new ASTStringNode(t.image,new WToken(t));} <DECL_END> 
	{return new DeclTag(decl_any, firstToken.next,token);}
 ) }

