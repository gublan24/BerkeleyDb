/* Generated By:JavaCC: Do not edit this line. HtmlParser.java */
package tmp.generated_html;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

public class HtmlParser implements HtmlParserConstants {

  final public HtmlDocument HtmlDocument() throws ParseException {
        ElementSequence elementSequence;
        Token t;
        ASTStringNode eof;
        Token firstToken=token;
    elementSequence = ElementSequence();
    t = jj_consume_token(0);
                                                  eof=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new HtmlDocument(elementSequence, eof, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ElementSequence ElementSequence() throws ParseException {
        Element element;
        ArrayList<Element> elementList = new ArrayList<Element>();
        Token firstToken=token;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case TAG_START:
      case ENDTAG_START:
      case COMMENT_START:
      case DECL_START:
      case PCDATA:
      case PCDATA_QS:
      case PCDATA_Q:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      element = Element();
                           elementList.add(element);
    }
         {if (true) return new ElementSequence(elementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Element Element() throws ParseException {
        Tag tag;
        EndTag endTag;
        CommentTag commentTag;
        DeclTag declTag;
        Token t;
        ASTStringNode tag_start;
        ASTStringNode lst_error;
        ASTStringNode pcdata;
        ASTStringNode pcdata_qs;
        ASTStringNode pcdata_q;
        ASTStringNode eol;
        Token firstToken=token;
    if (jj_2_1(2)) {
      tag = Tag();
         {if (true) return new Element1(tag, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDTAG_START:
        endTag = EndTag();
         {if (true) return new Element2(endTag, firstToken.next,token);}
        break;
      case COMMENT_START:
        commentTag = CommentTag();
         {if (true) return new Element3(commentTag, firstToken.next,token);}
        break;
      case DECL_START:
        declTag = DeclTag();
         {if (true) return new Element4(declTag, firstToken.next,token);}
        break;
      default:
        jj_la1[1] = jj_gen;
        if (jj_2_2(2)) {
          t = jj_consume_token(TAG_START);
                                   tag_start=new ASTStringNode(t.image,new WToken(t));
          t = jj_consume_token(LST_ERROR);
                                                                                                      lst_error=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Element5(tag_start, lst_error, firstToken.next,token);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PCDATA:
            t = jj_consume_token(PCDATA);
                   pcdata=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Element6(pcdata, firstToken.next,token);}
            break;
          case PCDATA_QS:
            t = jj_consume_token(PCDATA_QS);
                      pcdata_qs=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Element7(pcdata_qs, firstToken.next,token);}
            break;
          case PCDATA_Q:
            t = jj_consume_token(PCDATA_Q);
                     pcdata_q=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Element8(pcdata_q, firstToken.next,token);}
            break;
          case EOL:
            t = jj_consume_token(EOL);
                eol=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Element9(eol, firstToken.next,token);}
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Attribute Attribute() throws ParseException {
        Token t;
        ASTStringNode attr_name;
        ASTStringNode attr_val = null;
        Token firstToken=token;
    t = jj_consume_token(ATTR_NAME);
                      attr_name=new ASTStringNode(t.image,new WToken(t));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTR_EQ:
      jj_consume_token(ATTR_EQ);
      t = jj_consume_token(ATTR_VAL);
                                                                                                   attr_val=new ASTStringNode(t.image,new WToken(t));
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
         {if (true) return new Attribute(attr_name, attr_val, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AttributeList AttributeList() throws ParseException {
        Attribute attribute;
        ArrayList<Attribute> attributeList = new ArrayList<Attribute>();
        Token firstToken=token;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR_NAME:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      attribute = Attribute();
                               attributeList.add(attribute);
    }
         {if (true) return new AttributeList(attributeList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Tag Tag() throws ParseException {
        Token t;
        ASTStringNode tag_name;
        AttributeList attributeList;
        ASTStringNode slash = null;
        Token firstToken=token;
    jj_consume_token(TAG_START);
    t = jj_consume_token(TAG_NAME);
                         tag_name=new ASTStringNode(t.image,new WToken(t));
    attributeList = AttributeList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLASH:
      t = jj_consume_token(SLASH);
                                                                                                                      slash=new ASTStringNode(t.image,new WToken(t));
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(TAG_END);
         {if (true) return new Tag(tag_name, attributeList, slash, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EndTag EndTag() throws ParseException {
        Token t;
        ASTStringNode tag_name;
        Token firstToken=token;
    jj_consume_token(ENDTAG_START);
    t = jj_consume_token(TAG_NAME);
                          tag_name=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(TAG_END);
         {if (true) return new EndTag(tag_name, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CommentTag CommentTag() throws ParseException {
        CommentContent commentContent;
        ArrayList<CommentContent> commentContentList = new ArrayList<CommentContent>();
        CommentEnd commentEnd;
        Token firstToken=token;
    jj_consume_token(COMMENT_START);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DASH:
      case COMMENT_EOL:
      case COMMENT_WORD:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      commentContent = CommentContent();
                                                commentContentList.add(commentContent);
    }
    commentEnd = CommentEnd();
         {if (true) return new CommentTag(commentContentList, commentEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CommentContent CommentContent() throws ParseException {
        Token t;
        ASTStringNode dash;
        ASTStringNode comment_eol;
        ASTStringNode comment_word;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DASH:
      t = jj_consume_token(DASH);
                 dash=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new CommentContent1(dash, firstToken.next,token);}
      break;
    case COMMENT_EOL:
      t = jj_consume_token(COMMENT_EOL);
                        comment_eol=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new CommentContent2(comment_eol, firstToken.next,token);}
      break;
    case COMMENT_WORD:
      t = jj_consume_token(COMMENT_WORD);
                         comment_word=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new CommentContent3(comment_word, firstToken.next,token);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CommentEnd CommentEnd() throws ParseException {
        Token t;
        ASTStringNode eof;
        ASTStringNode comment_end;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      t = jj_consume_token(0);
                eof=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new CommentEnd1(eof, firstToken.next,token);}
      break;
    case COMMENT_END:
      t = jj_consume_token(COMMENT_END);
                        comment_end=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new CommentEnd2(comment_end, firstToken.next,token);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public DeclTag DeclTag() throws ParseException {
        Token t;
        ASTStringNode decl_any;
        Token firstToken=token;
    jj_consume_token(DECL_START);
    t = jj_consume_token(DECL_ANY);
                          decl_any=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(DECL_END);
         {if (true) return new DeclTag(decl_any, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_scan_token(TAG_START)) return true;
    if (jj_scan_token(TAG_NAME)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(TAG_START)) return true;
    if (jj_scan_token(LST_ERROR)) return true;
    return false;
  }

  public HtmlParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xff000,0x1c000,0xe1000,0x4000000,0x1000000,0x8000000,0x0,0x0,0x1,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1c,0x1c,0x2,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public HtmlParser(CharStream stream) {
    token_source = new HtmlParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public HtmlParser(HtmlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(HtmlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[43];
    for (int i = 0; i < 43; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
