/* Generated By:JavaCC: Do not edit this line. CParser.java */
package tmp.generated_c;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

  public class CParser implements CParserConstants {

    // Hastable for storing typedef types
    private static Set types = new HashSet();

    // Stack for determining when the parser
    // is parsing a typdef definition.
    private static Stack typedefParsingStack = new Stack();

    // Returns true if the given string is
    // a typedef type.
    private static boolean isType(String type){
          return types.contains(type);
    }

    // Add a typedef type to those already defined
    private static void addType(String type){
          types.add(type);
    }

    // Prints out all the types used in parsing the c source
    private static void printTypes(){
      for (Iterator i = types.iterator(); i.hasNext();) {
        System.out.println(i.next());
      }
    }

    // Run the parser
    public static void main ( String args [ ] ) {
      CParser parser ;

          // Hack to include type "special types"
            types.add("__signed__");
            types.add("__const");
            types.add("__inline__");
            types.add("__signed");
              types.add("__int64");
            types.add("__w64");

      if(args.length == 0){
        System.out.println("C Parser Version 0.1Alpha:  Reading from standard input . . .");
        parser = new CParser(new OffsetCharStream(System.in));
      }
      else if(args.length == 1){
        System.out.println("C Parser Version 0.1Alpha:  Reading from file " + args[0] + " . . ." );
      try {
        parser = new CParser(new OffsetCharStream(new java.io.FileInputStream(args[0])));
      }
      catch(java.io.FileNotFoundException e){
        System.out.println("C Parser Version 0.1:  File " + args[0] + " not found.");
        return ;
        }
      }
      else {
        System.out.println("C Parser Version 0.1Alpha:  Usage is one of:");
        System.out.println("         java CParser < inputfile");
        System.out.println("OR");
        System.out.println("         java CParser inputfile");
        return ;
      }
      try {
        parser.TranslationUnit();
        System.out.println("C Parser Version 0.1Alpha:  Java program parsed successfully.");
      }
      catch(ParseException e){
        System.out.println("C Parser Version 0.1Alpha:  Encountered errors during parse.");
        e.printStackTrace();
      }
    }

       public ISourceFile getRoot() throws ParseException {
                return TranslationUnit();
        }

  final public TranslationUnit TranslationUnit() throws ParseException {
        ExternalDeclaration externalDeclaration;
        ExternalDeclaration externalDeclaration1;
        ArrayList<ExternalDeclaration> externalDeclaration1List = new ArrayList<ExternalDeclaration>();
        Token firstToken=token;
    externalDeclaration = ExternalDeclaration();
    label_1:
    while (true) {
      if (jj_2_1(1)) {
        ;
      } else {
        break label_1;
      }
      externalDeclaration1 = ExternalDeclaration();
                                                                                              externalDeclaration1List.add(externalDeclaration1);
    }
                                                                                                                                                       printTypes();
         {if (true) return new TranslationUnit(externalDeclaration, externalDeclaration1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ExternalDeclaration ExternalDeclaration() throws ParseException {
        FunctionDefinition functionDefinition;
        Declaration declaration;
        Token firstToken=token;
    if (jj_2_2(2147483647)) {
      functionDefinition = FunctionDefinition();
         {if (true) return new ExternalDeclaration1(functionDefinition, firstToken.next,token);}
    } else if (jj_2_3(1)) {
      declaration = Declaration();
         {if (true) return new ExternalDeclaration2(declaration, firstToken.next,token);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FunctionDefinition FunctionDefinition() throws ParseException {
        DeclarationSpecifiers declarationSpecifiers = null;
        Declarator declarator;
        DeclarationList declarationList = null;
        CompoundStatement compoundStatement;
        Token firstToken=token;
    if (jj_2_4(2147483647)) {
      declarationSpecifiers = DeclarationSpecifiers();
    } else {
      ;
    }
    declarator = Declarator();
    if (jj_2_5(1)) {
      declarationList = DeclarationList();
    } else {
      ;
    }
    compoundStatement = CompoundStatement();
         {if (true) return new FunctionDefinition(declarationSpecifiers, declarator, declarationList, compoundStatement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration Declaration() throws ParseException {
        DeclarationSpecifiers declarationSpecifiers;
        InitDeclaratorList initDeclaratorList = null;
        Token firstToken=token;
    declarationSpecifiers = DeclarationSpecifiers();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case IDENTIFIER:
    case 92:
      initDeclaratorList = InitDeclaratorList();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(88);
         {if (true) return new Declaration(declarationSpecifiers, initDeclaratorList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public DeclarationList DeclarationList() throws ParseException {
        Declaration declaration;
        Declaration declaration1;
        ArrayList<Declaration> declaration1List = new ArrayList<Declaration>();
        Token firstToken=token;
    if (jj_2_6(2147483647)) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    declaration = Declaration();
    label_2:
    while (true) {
      if (jj_2_7(2147483647)) {
        ;
      } else {
        break label_2;
      }
      declaration1 = Declaration();
                                                                                                                declaration1List.add(declaration1);
    }
         {if (true) return new DeclarationList(declaration, declaration1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public DeclarationSpecifiers DeclarationSpecifiers() throws ParseException {
        StorageClassSpecifier storageClassSpecifier;
        DeclarationSpecifiers declarationSpecifiers = null;
        TypeSpecifier typeSpecifier;
        DeclarationSpecifiers declarationSpecifiers1 = null;
        TypeQualifier typeQualifier;
        DeclarationSpecifiers declarationSpecifiers2 = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
    case TYPEDEF:
    case EXTERN:
    case STATIC:
    case AUTO:
      storageClassSpecifier = StorageClassSpecifier();
      if (jj_2_8(2147483647)) {
        declarationSpecifiers = DeclarationSpecifiers();
      } else {
        ;
      }
         {if (true) return new DeclarationSpecifiers1(storageClassSpecifier, declarationSpecifiers, firstToken.next,token);}
      break;
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_11(1)) {
        typeSpecifier = TypeSpecifier();
        if (jj_2_9(2147483647)) {
          declarationSpecifiers1 = DeclarationSpecifiers();
        } else {
          ;
        }
         {if (true) return new DeclarationSpecifiers2(typeSpecifier, declarationSpecifiers1, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOLATILE:
        case CONST:
          typeQualifier = TypeQualifier();
          if (jj_2_10(2147483647)) {
            declarationSpecifiers2 = DeclarationSpecifiers();
          } else {
            ;
          }
         {if (true) return new DeclarationSpecifiers3(typeQualifier, declarationSpecifiers2, firstToken.next,token);}
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public StorageClassSpecifier StorageClassSpecifier() throws ParseException {
        Token t;
        ASTStringNode auto;
        ASTStringNode register;
        ASTStringNode static_kw;
        ASTStringNode extern;
        ASTStringNode typedef;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTO:
      t = jj_consume_token(AUTO);
                 auto=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new StorageClassSpecifier1(auto, firstToken.next,token);}
      break;
    case REGISTER:
      t = jj_consume_token(REGISTER);
                     register=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new StorageClassSpecifier2(register, firstToken.next,token);}
      break;
    case STATIC:
      t = jj_consume_token(STATIC);
                   static_kw=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new StorageClassSpecifier3(static_kw, firstToken.next,token);}
      break;
    case EXTERN:
      t = jj_consume_token(EXTERN);
                   extern=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new StorageClassSpecifier4(extern, firstToken.next,token);}
      break;
    case TYPEDEF:
      t = jj_consume_token(TYPEDEF);
                    typedef=new ASTStringNode(t.image,new WToken(t));
                                                                         typedefParsingStack.push(Boolean.TRUE);
         {if (true) return new StorageClassSpecifier5(typedef, firstToken.next,token);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypeSpecifier TypeSpecifier() throws ParseException {
        Token t;
        ASTStringNode void_kw;
        ASTStringNode char_kw;
        ASTStringNode short_kw;
        ASTStringNode int_kw;
        ASTStringNode long_kw;
        ASTStringNode float_kw;
        ASTStringNode double_kw;
        ASTStringNode signed;
        ASTStringNode unsigned;
        StructOrUnionSpecifier structOrUnionSpecifier;
        EnumSpecifier enumSpecifier;
        TypedefName typedefName;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      t = jj_consume_token(VOID);
                 void_kw=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TypeSpecifier1(void_kw, firstToken.next,token);}
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
                 char_kw=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TypeSpecifier2(char_kw, firstToken.next,token);}
      break;
    case SHORT:
      t = jj_consume_token(SHORT);
                  short_kw=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TypeSpecifier3(short_kw, firstToken.next,token);}
      break;
    case INT:
      t = jj_consume_token(INT);
                int_kw=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TypeSpecifier4(int_kw, firstToken.next,token);}
      break;
    case LONG:
      t = jj_consume_token(LONG);
                 long_kw=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TypeSpecifier5(long_kw, firstToken.next,token);}
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
                  float_kw=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TypeSpecifier6(float_kw, firstToken.next,token);}
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
                   double_kw=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TypeSpecifier7(double_kw, firstToken.next,token);}
      break;
    case SIGNED:
      t = jj_consume_token(SIGNED);
                   signed=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TypeSpecifier8(signed, firstToken.next,token);}
      break;
    case UNSIGNED:
      t = jj_consume_token(UNSIGNED);
                     unsigned=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TypeSpecifier9(unsigned, firstToken.next,token);}
      break;
    case STRUCT:
    case UNION:
      structOrUnionSpecifier = StructOrUnionSpecifier();
         {if (true) return new TypeSpecifier10(structOrUnionSpecifier, firstToken.next,token);}
      break;
    case ENUM:
      enumSpecifier = EnumSpecifier();
         {if (true) return new TypeSpecifier11(enumSpecifier, firstToken.next,token);}
      break;
    default:
      jj_la1[4] = jj_gen;
      if (isType(getToken(1).image)) {
        typedefName = TypedefName();
         {if (true) return new TypeSpecifier12(typedefName, firstToken.next,token);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public TypeQualifier TypeQualifier() throws ParseException {
        Token t;
        ASTStringNode const_kw;
        ASTStringNode volatile_kw;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      t = jj_consume_token(CONST);
                  const_kw=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TypeQualifier1(const_kw, firstToken.next,token);}
      break;
    case VOLATILE:
      t = jj_consume_token(VOLATILE);
                     volatile_kw=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TypeQualifier2(volatile_kw, firstToken.next,token);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StructOrUnionSpecifier StructOrUnionSpecifier() throws ParseException {
        StructOrUnion structOrUnion;
        StructOrUnionSpecifierInner structOrUnionSpecifierInner;
        Token firstToken=token;
          typedefParsingStack.push(Boolean.FALSE);
    structOrUnion = StructOrUnion();
    structOrUnionSpecifierInner = StructOrUnionSpecifierInner();
                                                                                                                                              typedefParsingStack.pop();
         {if (true) return new StructOrUnionSpecifier(structOrUnion, structOrUnionSpecifierInner, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public StructOrUnionSpecifierInner StructOrUnionSpecifierInner() throws ParseException {
        Token t;
        ASTStringNode identifier = null;
        StructDeclarationList structDeclarationList;
        ASTStringNode identifier1;
        Token firstToken=token;
    if (jj_2_12(3)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                                     identifier=new ASTStringNode(t.image,new WToken(t));
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(89);
      structDeclarationList = StructDeclarationList();
      jj_consume_token(90);
         {if (true) return new StructOrUnionSpecifierInner1(identifier, structDeclarationList, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                       identifier1=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new StructOrUnionSpecifierInner2(identifier1, firstToken.next,token);}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public StructOrUnion StructOrUnion() throws ParseException {
        Token t;
        ASTStringNode struct;
        ASTStringNode union;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCT:
      t = jj_consume_token(STRUCT);
                   struct=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new StructOrUnion1(struct, firstToken.next,token);}
      break;
    case UNION:
      t = jj_consume_token(UNION);
                  union=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new StructOrUnion2(union, firstToken.next,token);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StructDeclarationList StructDeclarationList() throws ParseException {
        StructDeclaration structDeclaration;
        StructDeclaration structDeclaration1;
        ArrayList<StructDeclaration> structDeclaration1List = new ArrayList<StructDeclaration>();
        Token firstToken=token;
    structDeclaration = StructDeclaration();
    label_3:
    while (true) {
      if (jj_2_13(1)) {
        ;
      } else {
        break label_3;
      }
      structDeclaration1 = StructDeclaration();
                                                                                      structDeclaration1List.add(structDeclaration1);
    }
         {if (true) return new StructDeclarationList(structDeclaration, structDeclaration1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public InitDeclaratorList InitDeclaratorList() throws ParseException {
        InitDeclarator initDeclarator;
        InitDeclarator initDeclarator1;
        ArrayList<InitDeclarator> initDeclarator1List = new ArrayList<InitDeclarator>();
        Token firstToken=token;
    initDeclarator = InitDeclarator();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      initDeclarator1 = InitDeclarator();
                                                                              initDeclarator1List.add(initDeclarator1);
    }
                                                                                                                             if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()){                        typedefParsingStack.pop();        }
         {if (true) return new InitDeclaratorList(initDeclarator, initDeclarator1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public InitDeclarator InitDeclarator() throws ParseException {
        Declarator declarator;
        Initializer initializer = null;
        Token firstToken=token;
    declarator = Declarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      initializer = Initializer();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
         {if (true) return new InitDeclarator(declarator, initializer, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public StructDeclaration StructDeclaration() throws ParseException {
        SpecifierQualifierList specifierQualifierList;
        StructDeclaratorList structDeclaratorList;
        Token firstToken=token;
    specifierQualifierList = SpecifierQualifierList();
    structDeclaratorList = StructDeclaratorList();
    jj_consume_token(88);
         {if (true) return new StructDeclaration(specifierQualifierList, structDeclaratorList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public SpecifierQualifierList SpecifierQualifierList() throws ParseException {
        TypeSpecifier typeSpecifier;
        SpecifierQualifierList specifierQualifierList = null;
        TypeQualifier typeQualifier;
        SpecifierQualifierList specifierQualifierList1 = null;
        Token firstToken=token;
    if (jj_2_16(1)) {
      typeSpecifier = TypeSpecifier();
      if (jj_2_14(2147483647)) {
        specifierQualifierList = SpecifierQualifierList();
      } else {
        ;
      }
         {if (true) return new SpecifierQualifierList1(typeSpecifier, specifierQualifierList, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
        typeQualifier = TypeQualifier();
        if (jj_2_15(2147483647)) {
          specifierQualifierList1 = SpecifierQualifierList();
        } else {
          ;
        }
         {if (true) return new SpecifierQualifierList2(typeQualifier, specifierQualifierList1, firstToken.next,token);}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public StructDeclaratorList StructDeclaratorList() throws ParseException {
        StructDeclarator structDeclarator;
        StructDeclarator structDeclarator1;
        ArrayList<StructDeclarator> structDeclarator1List = new ArrayList<StructDeclarator>();
        Token firstToken=token;
    structDeclarator = StructDeclarator();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      structDeclarator1 = StructDeclarator();
                                                                                      structDeclarator1List.add(structDeclarator1);
    }
         {if (true) return new StructDeclaratorList(structDeclarator, structDeclarator1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public StructDeclarator StructDeclarator() throws ParseException {
        Declarator declarator;
        Declarator declarator1 = null;
        ConstantExpression constantExpression;
        Token firstToken=token;
    if (jj_2_17(3)) {
      declarator = Declarator();
         {if (true) return new StructDeclarator1(declarator, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case IDENTIFIER:
      case 91:
      case 92:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case IDENTIFIER:
        case 92:
          declarator1 = Declarator();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(91);
        constantExpression = ConstantExpression();
         {if (true) return new StructDeclarator2(declarator1, constantExpression, firstToken.next,token);}
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public EnumSpecifier EnumSpecifier() throws ParseException {
        Token t;
        ASTStringNode enum_kw;
        EnumSpecifierInternal enumSpecifierInternal;
        Token firstToken=token;
    t = jj_consume_token(ENUM);
                 enum_kw=new ASTStringNode(t.image,new WToken(t));
    enumSpecifierInternal = EnumSpecifierInternal();
         {if (true) return new EnumSpecifier(enum_kw, enumSpecifierInternal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EnumSpecifierInternal EnumSpecifierInternal() throws ParseException {
        Token t;
        ASTStringNode identifier = null;
        EnumeratorList enumeratorList;
        ASTStringNode identifier1;
        Token firstToken=token;
    if (jj_2_18(3)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                                     identifier=new ASTStringNode(t.image,new WToken(t));
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(89);
      enumeratorList = EnumeratorList();
      jj_consume_token(90);
         {if (true) return new EnumSpecifierInternal1(identifier, enumeratorList, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                       identifier1=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new EnumSpecifierInternal2(identifier1, firstToken.next,token);}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public EnumeratorList EnumeratorList() throws ParseException {
        Enumerator enumerator;
        Enumerator enumerator1;
        ArrayList<Enumerator> enumerator1List = new ArrayList<Enumerator>();
        Token firstToken=token;
    enumerator = Enumerator();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      enumerator1 = Enumerator();
                                                              enumerator1List.add(enumerator1);
    }
         {if (true) return new EnumeratorList(enumerator, enumerator1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Enumerator Enumerator() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ConstantExpression constantExpression = null;
        Token firstToken=token;
    t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      constantExpression = ConstantExpression();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
         {if (true) return new Enumerator(identifier, constantExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Declarator Declarator() throws ParseException {
        Pointer pointer = null;
        DirectDeclarator directDeclarator;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      pointer = Pointer();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    directDeclarator = DirectDeclarator();
         {if (true) return new Declarator(pointer, directDeclarator, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public DirectDeclarator DirectDeclarator() throws ParseException {
        DirectDeclaratorP1 directDeclaratorP1;
        DirectDeclaratorP2 directDeclaratorP2;
        ArrayList<DirectDeclaratorP2> directDeclaratorP2List = new ArrayList<DirectDeclaratorP2>();
        Token firstToken=token;
    directDeclaratorP1 = DirectDeclaratorP1();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
      case 94:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      directDeclaratorP2 = DirectDeclaratorP2();
                                                                                         directDeclaratorP2List.add(directDeclaratorP2);
    }
         {if (true) return new DirectDeclarator(directDeclaratorP1, directDeclaratorP2List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public DirectDeclaratorP1 DirectDeclaratorP1() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Declarator declarator;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
                                                                                if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()){                             addType(t.image);         }
         {if (true) return new DirectDeclaratorP11(identifier, firstToken.next,token);}
      break;
    case 92:
      jj_consume_token(92);
      declarator = Declarator();
      jj_consume_token(93);
         {if (true) return new DirectDeclaratorP12(declarator, firstToken.next,token);}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public DirectDeclaratorP2 DirectDeclaratorP2() throws ParseException {
        ConstantExpression constantExpression = null;
        ParameterTypeList parameterTypeList;
        IdentifierList identifierList = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 94:
      jj_consume_token(94);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case PLUS:
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case STAR:
      case NOT:
      case TILDE:
      case AND:
      case IDENTIFIER:
      case 92:
        constantExpression = ConstantExpression();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(95);
         {if (true) return new DirectDeclaratorP21(constantExpression, firstToken.next,token);}
      break;
    default:
      jj_la1[24] = jj_gen;
      if (jj_2_19(5)) {
        jj_consume_token(92);
        parameterTypeList = ParameterTypeList();
        jj_consume_token(93);
         {if (true) return new DirectDeclaratorP22(parameterTypeList, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 92:
          jj_consume_token(92);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            identifierList = IdentifierList();
            break;
          default:
            jj_la1[23] = jj_gen;
            ;
          }
          jj_consume_token(93);
         {if (true) return new DirectDeclaratorP23(identifierList, firstToken.next,token);}
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Pointer Pointer() throws ParseException {
        TypeQualifierList typeQualifierList = null;
        Pointer pointer = null;
        Token firstToken=token;
    jj_consume_token(STAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOLATILE:
    case CONST:
      typeQualifierList = TypeQualifierList();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      pointer = Pointer();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
         {if (true) return new Pointer(typeQualifierList, pointer, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TypeQualifierList TypeQualifierList() throws ParseException {
        TypeQualifier typeQualifier;
        TypeQualifier typeQualifier1;
        ArrayList<TypeQualifier> typeQualifier1List = new ArrayList<TypeQualifier>();
        Token firstToken=token;
    typeQualifier = TypeQualifier();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_8;
      }
      typeQualifier1 = TypeQualifier();
                                                                      typeQualifier1List.add(typeQualifier1);
    }
         {if (true) return new TypeQualifierList(typeQualifier, typeQualifier1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterTypeList ParameterTypeList() throws ParseException {
        ParameterList parameterList;
        ASTTextNode text18 = null;
        Token firstToken=token;
    parameterList = ParameterList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      jj_consume_token(96);
      jj_consume_token(96);
      jj_consume_token(96);
                                                        text18=new ASTTextNode(new String[]{",",".",".","."},new WToken(token));
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
         {if (true) return new ParameterTypeList(parameterList, text18, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterList ParameterList() throws ParseException {
        ParameterDeclaration parameterDeclaration;
        ParameterDeclaration parameterDeclaration1;
        ArrayList<ParameterDeclaration> parameterDeclaration1List = new ArrayList<ParameterDeclaration>();
        Token firstToken=token;
    parameterDeclaration = ParameterDeclaration();
    label_9:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(COMMA);
      parameterDeclaration1 = ParameterDeclaration();
                                                                                                                   parameterDeclaration1List.add(parameterDeclaration1);
    }
         {if (true) return new ParameterList(parameterDeclaration, parameterDeclaration1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterDeclaration ParameterDeclaration() throws ParseException {
        DeclarationSpecifiers declarationSpecifiers;
        ParameterDeclarationInternal parameterDeclarationInternal;
        Token firstToken=token;
    declarationSpecifiers = DeclarationSpecifiers();
    parameterDeclarationInternal = ParameterDeclarationInternal();
         {if (true) return new ParameterDeclaration(declarationSpecifiers, parameterDeclarationInternal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterDeclarationInternal ParameterDeclarationInternal() throws ParseException {
        Declarator declarator;
        AbstractDeclarator abstractDeclarator = null;
        Token firstToken=token;
    if (jj_2_21(2147483647)) {
      declarator = Declarator();
         {if (true) return new ParameterDeclarationInternal1(declarator, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case 92:
      case 94:
        abstractDeclarator = AbstractDeclarator();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
         {if (true) return new ParameterDeclarationInternal2(abstractDeclarator, firstToken.next,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public IdentifierList IdentifierList() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ASTStringNode identifier1;
        ArrayList<ASTStringNode> identifier1List = new ArrayList<ASTStringNode>();
        Token firstToken=token;
    t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENTIFIER);
                                                                                                 identifier1=new ASTStringNode(t.image,new WToken(t));
                                                                                                                                                        identifier1List.add(identifier1);
    }
         {if (true) return new IdentifierList(identifier, identifier1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Initializer Initializer() throws ParseException {
        AssignmentExpression assignmentExpression;
        InitializerList initializerList;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case SIZEOF:
    case PLUS:
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case STAR:
    case NOT:
    case TILDE:
    case AND:
    case IDENTIFIER:
    case 92:
      assignmentExpression = AssignmentExpression();
         {if (true) return new Initializer1(assignmentExpression, firstToken.next,token);}
      break;
    case 89:
      jj_consume_token(89);
      initializerList = InitializerList();
      jj_consume_token(90);
         {if (true) return new Initializer2(initializerList, firstToken.next,token);}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public InitializerList InitializerList() throws ParseException {
        Initializer initializer;
        Initializer initializer1;
        ArrayList<Initializer> initializer1List = new ArrayList<Initializer>();
        Token firstToken=token;
    initializer = Initializer();
    label_11:
    while (true) {
      if (jj_2_22(2)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(COMMA);
      initializer1 = Initializer();
                                                                               initializer1List.add(initializer1);
    }
         {if (true) return new InitializerList(initializer, initializer1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TypeName TypeName() throws ParseException {
        SpecifierQualifierList specifierQualifierList;
        AbstractDeclarator abstractDeclarator = null;
        Token firstToken=token;
    specifierQualifierList = SpecifierQualifierList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case 92:
    case 94:
      abstractDeclarator = AbstractDeclarator();
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
         {if (true) return new TypeName(specifierQualifierList, abstractDeclarator, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AbstractDeclarator AbstractDeclarator() throws ParseException {
        Pointer pointer;
        Pointer pointer1 = null;
        DirectAbstractDeclarator directAbstractDeclarator;
        Token firstToken=token;
    if (jj_2_23(3)) {
      pointer = Pointer();
         {if (true) return new AbstractDeclarator1(pointer, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case 92:
      case 94:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          pointer1 = Pointer();
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        directAbstractDeclarator = DirectAbstractDeclarator();
         {if (true) return new AbstractDeclarator2(pointer1, directAbstractDeclarator, firstToken.next,token);}
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public DirectAbstractDeclarator DirectAbstractDeclarator() throws ParseException {
        DirectAbstractDeclaratorP1 directAbstractDeclaratorP1;
        DirectAbstractDeclaratorP2 directAbstractDeclaratorP2;
        ArrayList<DirectAbstractDeclaratorP2> directAbstractDeclaratorP2List = new ArrayList<DirectAbstractDeclaratorP2>();
        Token firstToken=token;
    directAbstractDeclaratorP1 = DirectAbstractDeclaratorP1();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
      case 94:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_12;
      }
      directAbstractDeclaratorP2 = DirectAbstractDeclaratorP2();
                                                                                                                         directAbstractDeclaratorP2List.add(directAbstractDeclaratorP2);
    }
         {if (true) return new DirectAbstractDeclarator(directAbstractDeclaratorP1, directAbstractDeclaratorP2List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public DirectAbstractDeclaratorP1 DirectAbstractDeclaratorP1() throws ParseException {
        AbstractDeclarator abstractDeclarator;
        ConstantExpression constantExpression = null;
        ParameterTypeList parameterTypeList = null;
        Token firstToken=token;
    if (jj_2_25(2)) {
      jj_consume_token(92);
      abstractDeclarator = AbstractDeclarator();
      jj_consume_token(93);
         {if (true) return new DirectAbstractDeclaratorP11(abstractDeclarator, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 94:
        jj_consume_token(94);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case PLUS:
        case MINUS:
        case PLUSPLUS:
        case MINUSMINUS:
        case STAR:
        case NOT:
        case TILDE:
        case AND:
        case IDENTIFIER:
        case 92:
          constantExpression = ConstantExpression();
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        jj_consume_token(95);
         {if (true) return new DirectAbstractDeclaratorP12(constantExpression, firstToken.next,token);}
        break;
      case 92:
        jj_consume_token(92);
        if (jj_2_24(1)) {
          parameterTypeList = ParameterTypeList();
        } else {
          ;
        }
        jj_consume_token(93);
         {if (true) return new DirectAbstractDeclaratorP13(parameterTypeList, firstToken.next,token);}
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public DirectAbstractDeclaratorP2 DirectAbstractDeclaratorP2() throws ParseException {
        ConstantExpression constantExpression = null;
        ParameterTypeList parameterTypeList = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 94:
      jj_consume_token(94);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case PLUS:
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case STAR:
      case NOT:
      case TILDE:
      case AND:
      case IDENTIFIER:
      case 92:
        constantExpression = ConstantExpression();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(95);
         {if (true) return new DirectAbstractDeclaratorP21(constantExpression, firstToken.next,token);}
      break;
    case 92:
      jj_consume_token(92);
      if (jj_2_26(1)) {
        parameterTypeList = ParameterTypeList();
      } else {
        ;
      }
      jj_consume_token(93);
         {if (true) return new DirectAbstractDeclaratorP22(parameterTypeList, firstToken.next,token);}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypedefName TypedefName() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new TypedefName(identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
        LabeledStatement labeledStatement;
        ExpressionStatement expressionStatement;
        CompoundStatement compoundStatement;
        SelectionStatement selectionStatement;
        IterationStatement iterationStatement;
        JumpStatement jumpStatement;
        Token firstToken=token;
    if (jj_2_27(2)) {
      labeledStatement = LabeledStatement();
         {if (true) return new Statement1(labeledStatement, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case PLUS:
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case STAR:
      case NOT:
      case TILDE:
      case AND:
      case IDENTIFIER:
      case 88:
      case 92:
        expressionStatement = ExpressionStatement();
         {if (true) return new Statement2(expressionStatement, firstToken.next,token);}
        break;
      case 89:
        compoundStatement = CompoundStatement();
         {if (true) return new Statement3(compoundStatement, firstToken.next,token);}
        break;
      case SWITCH:
      case IF:
        selectionStatement = SelectionStatement();
         {if (true) return new Statement4(selectionStatement, firstToken.next,token);}
        break;
      case WHILE:
      case FOR:
      case DO:
        iterationStatement = IterationStatement();
         {if (true) return new Statement5(iterationStatement, firstToken.next,token);}
        break;
      case CONTINUE:
      case RETURN:
      case BREAK:
      case GOTO:
        jumpStatement = JumpStatement();
         {if (true) return new Statement6(jumpStatement, firstToken.next,token);}
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public LabeledStatement LabeledStatement() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Statement statement;
        ASTStringNode case_kw;
        ConstantExpression constantExpression;
        Statement statement1;
        ASTStringNode dflt;
        Statement statement2;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(91);
      statement = Statement();
         {if (true) return new LabeledStatement1(identifier, statement, firstToken.next,token);}
      break;
    case CASE:
      t = jj_consume_token(CASE);
                 case_kw=new ASTStringNode(t.image,new WToken(t));
      constantExpression = ConstantExpression();
      jj_consume_token(91);
      statement1 = Statement();
         {if (true) return new LabeledStatement2(case_kw, constantExpression, statement1, firstToken.next,token);}
      break;
    case DFLT:
      t = jj_consume_token(DFLT);
                 dflt=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(91);
      statement2 = Statement();
         {if (true) return new LabeledStatement3(dflt, statement2, firstToken.next,token);}
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionStatement ExpressionStatement() throws ParseException {
        Expression expression = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case SIZEOF:
    case PLUS:
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case STAR:
    case NOT:
    case TILDE:
    case AND:
    case IDENTIFIER:
    case 92:
      expression = Expression();
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    jj_consume_token(88);
         {if (true) return new ExpressionStatement(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CompoundStatement CompoundStatement() throws ParseException {
        DeclarationList declarationList = null;
        StatementList statementList = null;
        Token firstToken=token;
    jj_consume_token(89);
    if (jj_2_28(2147483647)) {
      declarationList = DeclarationList();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case CONTINUE:
    case DFLT:
    case SIZEOF:
    case SWITCH:
    case RETURN:
    case WHILE:
    case BREAK:
    case CASE:
    case GOTO:
    case FOR:
    case IF:
    case DO:
    case PLUS:
    case MINUS:
    case PLUSPLUS:
    case MINUSMINUS:
    case STAR:
    case NOT:
    case TILDE:
    case AND:
    case IDENTIFIER:
    case 88:
    case 89:
    case 92:
      statementList = StatementList();
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    jj_consume_token(90);
         {if (true) return new CompoundStatement(declarationList, statementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public StatementList StatementList() throws ParseException {
        Statement statement;
        Statement statement1;
        ArrayList<Statement> statement1List = new ArrayList<Statement>();
        Token firstToken=token;
    statement = Statement();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case CONTINUE:
      case DFLT:
      case SIZEOF:
      case SWITCH:
      case RETURN:
      case WHILE:
      case BREAK:
      case CASE:
      case GOTO:
      case FOR:
      case IF:
      case DO:
      case PLUS:
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case STAR:
      case NOT:
      case TILDE:
      case AND:
      case IDENTIFIER:
      case 88:
      case 89:
      case 92:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_13;
      }
      statement1 = Statement();
                                                      statement1List.add(statement1);
    }
         {if (true) return new StatementList(statement, statement1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public SelectionStatement SelectionStatement() throws ParseException {
        Token t;
        ASTStringNode if_kw;
        Expression expression;
        Statement statement;
        Statement statement1 = null;
        ASTStringNode switch_kw;
        Expression expression1;
        Statement statement2;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      t = jj_consume_token(IF);
               if_kw=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(92);
      expression = Expression();
      jj_consume_token(93);
      statement = Statement();
      if (jj_2_29(2)) {
        jj_consume_token(ELSE);
        statement1 = Statement();
      } else {
        ;
      }
         {if (true) return new SelectionStatement1(if_kw, expression, statement, statement1, firstToken.next,token);}
      break;
    case SWITCH:
      t = jj_consume_token(SWITCH);
                   switch_kw=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(92);
      expression1 = Expression();
      jj_consume_token(93);
      statement2 = Statement();
         {if (true) return new SelectionStatement2(switch_kw, expression1, statement2, firstToken.next,token);}
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IterationStatement IterationStatement() throws ParseException {
        Token t;
        ASTStringNode while_kw;
        Expression expression;
        Statement statement;
        ASTStringNode do_kw;
        Statement statement1;
        ASTStringNode while_kw1;
        Expression expression1;
        ASTStringNode for_kw;
        Expression expression2 = null;
        Expression expression3 = null;
        Expression expression4 = null;
        Statement statement2;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      t = jj_consume_token(WHILE);
                  while_kw=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(92);
      expression = Expression();
      jj_consume_token(93);
      statement = Statement();
         {if (true) return new IterationStatement1(while_kw, expression, statement, firstToken.next,token);}
      break;
    case DO:
      t = jj_consume_token(DO);
               do_kw=new ASTStringNode(t.image,new WToken(t));
      statement1 = Statement();
      t = jj_consume_token(WHILE);
                                                                                                 while_kw1=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(92);
      expression1 = Expression();
      jj_consume_token(93);
      jj_consume_token(88);
         {if (true) return new IterationStatement2(do_kw, statement1, while_kw1, expression1, firstToken.next,token);}
      break;
    case FOR:
      t = jj_consume_token(FOR);
                for_kw=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(92);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case PLUS:
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case STAR:
      case NOT:
      case TILDE:
      case AND:
      case IDENTIFIER:
      case 92:
        expression2 = Expression();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(88);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case PLUS:
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case STAR:
      case NOT:
      case TILDE:
      case AND:
      case IDENTIFIER:
      case 92:
        expression3 = Expression();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      jj_consume_token(88);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case PLUS:
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case STAR:
      case NOT:
      case TILDE:
      case AND:
      case IDENTIFIER:
      case 92:
        expression4 = Expression();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      jj_consume_token(93);
      statement2 = Statement();
         {if (true) return new IterationStatement3(for_kw, expression2, expression3, expression4, statement2, firstToken.next,token);}
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public JumpStatement JumpStatement() throws ParseException {
        Token t;
        ASTStringNode goto_kw;
        ASTStringNode identifier;
        ASTStringNode continue_kw;
        ASTStringNode break_kw;
        ASTStringNode return_kw;
        Expression expression = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GOTO:
      t = jj_consume_token(GOTO);
                 goto_kw=new ASTStringNode(t.image,new WToken(t));
      t = jj_consume_token(IDENTIFIER);
                                                                                   identifier=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(88);
         {if (true) return new JumpStatement1(goto_kw, identifier, firstToken.next,token);}
      break;
    case CONTINUE:
      t = jj_consume_token(CONTINUE);
                     continue_kw=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(88);
         {if (true) return new JumpStatement2(continue_kw, firstToken.next,token);}
      break;
    case BREAK:
      t = jj_consume_token(BREAK);
                  break_kw=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(88);
         {if (true) return new JumpStatement3(break_kw, firstToken.next,token);}
      break;
    case RETURN:
      t = jj_consume_token(RETURN);
                   return_kw=new ASTStringNode(t.image,new WToken(t));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case PLUS:
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case STAR:
      case NOT:
      case TILDE:
      case AND:
      case IDENTIFIER:
      case 92:
        expression = Expression();
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      jj_consume_token(88);
         {if (true) return new JumpStatement4(return_kw, expression, firstToken.next,token);}
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
        AssignmentExpression assignmentExpression;
        AssignmentExpression assignmentExpression1;
        ArrayList<AssignmentExpression> assignmentExpression1List = new ArrayList<AssignmentExpression>();
        Token firstToken=token;
    assignmentExpression = AssignmentExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      assignmentExpression1 = AssignmentExpression();
                                                                                                      assignmentExpression1List.add(assignmentExpression1);
    }
         {if (true) return new Expression(assignmentExpression, assignmentExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentExpression AssignmentExpression() throws ParseException {
        UnaryExpression unaryExpression;
        AssignmentOperator assignmentOperator;
        AssignmentExpression assignmentExpression;
        ConditionalExpression conditionalExpression;
        Token firstToken=token;
    if (jj_2_30(2147483647)) {
      unaryExpression = UnaryExpression();
      assignmentOperator = AssignmentOperator();
      assignmentExpression = AssignmentExpression();
         {if (true) return new AssignmentExpression1(unaryExpression, assignmentOperator, assignmentExpression, firstToken.next,token);}
    } else if (jj_2_31(3)) {
      conditionalExpression = ConditionalExpression();
         {if (true) return new AssignmentExpression2(conditionalExpression, firstToken.next,token);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AssignmentOperator AssignmentOperator() throws ParseException {
        Token t;
        ASTStringNode eq;
        ASTStringNode assstar;
        ASTStringNode assslash;
        ASTStringNode asspercent;
        ASTStringNode assplus;
        ASTStringNode assminus;
        ASTStringNode asssl;
        ASTStringNode asssr;
        ASTStringNode assamp;
        ASTStringNode asstil;
        ASTStringNode assor;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
               eq=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AssignmentOperator1(eq, firstToken.next,token);}
      break;
    case ASSSTAR:
      t = jj_consume_token(ASSSTAR);
                    assstar=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AssignmentOperator2(assstar, firstToken.next,token);}
      break;
    case ASSSLASH:
      t = jj_consume_token(ASSSLASH);
                     assslash=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AssignmentOperator3(assslash, firstToken.next,token);}
      break;
    case ASSPERCENT:
      t = jj_consume_token(ASSPERCENT);
                       asspercent=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AssignmentOperator4(asspercent, firstToken.next,token);}
      break;
    case ASSPLUS:
      t = jj_consume_token(ASSPLUS);
                    assplus=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AssignmentOperator5(assplus, firstToken.next,token);}
      break;
    case ASSMINUS:
      t = jj_consume_token(ASSMINUS);
                     assminus=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AssignmentOperator6(assminus, firstToken.next,token);}
      break;
    case ASSSL:
      t = jj_consume_token(ASSSL);
                  asssl=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AssignmentOperator7(asssl, firstToken.next,token);}
      break;
    case ASSSR:
      t = jj_consume_token(ASSSR);
                  asssr=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AssignmentOperator8(asssr, firstToken.next,token);}
      break;
    case ASSAMP:
      t = jj_consume_token(ASSAMP);
                   assamp=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AssignmentOperator9(assamp, firstToken.next,token);}
      break;
    case ASSTIL:
      t = jj_consume_token(ASSTIL);
                   asstil=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AssignmentOperator10(asstil, firstToken.next,token);}
      break;
    case ASSOR:
      t = jj_consume_token(ASSOR);
                  assor=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new AssignmentOperator11(assor, firstToken.next,token);}
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpression ConditionalExpression() throws ParseException {
        LogicalORExpression logicalORExpression;
        ConditionalExpressionInternal conditionalExpressionInternal = null;
        Token firstToken=token;
    logicalORExpression = LogicalORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 97:
      conditionalExpressionInternal = ConditionalExpressionInternal();
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
         {if (true) return new ConditionalExpression(logicalORExpression, conditionalExpressionInternal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpressionInternal ConditionalExpressionInternal() throws ParseException {
        Expression expression;
        ConditionalExpression conditionalExpression;
        Token firstToken=token;
    jj_consume_token(97);
    expression = Expression();
    jj_consume_token(91);
    conditionalExpression = ConditionalExpression();
         {if (true) return new ConditionalExpressionInternal(expression, conditionalExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ConstantExpression ConstantExpression() throws ParseException {
        ConditionalExpression conditionalExpression;
        Token firstToken=token;
    conditionalExpression = ConditionalExpression();
         {if (true) return new ConstantExpression(conditionalExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalORExpression LogicalORExpression() throws ParseException {
        LogicalANDExpression logicalANDExpression;
        LogicalORExpression logicalORExpression = null;
        Token firstToken=token;
    logicalANDExpression = LogicalANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OROR:
      jj_consume_token(OROR);
      logicalORExpression = LogicalORExpression();
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
         {if (true) return new LogicalORExpression(logicalANDExpression, logicalORExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalANDExpression LogicalANDExpression() throws ParseException {
        InclusiveORExpression inclusiveORExpression;
        LogicalANDExpression logicalANDExpression = null;
        Token firstToken=token;
    inclusiveORExpression = InclusiveORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANDAND:
      jj_consume_token(ANDAND);
      logicalANDExpression = LogicalANDExpression();
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
         {if (true) return new LogicalANDExpression(inclusiveORExpression, logicalANDExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public InclusiveORExpression InclusiveORExpression() throws ParseException {
        ExclusiveORExpression exclusiveORExpression;
        InclusiveORExpression inclusiveORExpression = null;
        Token firstToken=token;
    exclusiveORExpression = ExclusiveORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      inclusiveORExpression = InclusiveORExpression();
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
         {if (true) return new InclusiveORExpression(exclusiveORExpression, inclusiveORExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ExclusiveORExpression ExclusiveORExpression() throws ParseException {
        ANDExpression aNDExpression;
        ExclusiveORExpression exclusiveORExpression = null;
        Token firstToken=token;
    aNDExpression = ANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 98:
      jj_consume_token(98);
      exclusiveORExpression = ExclusiveORExpression();
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
         {if (true) return new ExclusiveORExpression(aNDExpression, exclusiveORExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ANDExpression ANDExpression() throws ParseException {
        EqualityExpression equalityExpression;
        ANDExpression aNDExpression = null;
        Token firstToken=token;
    equalityExpression = EqualityExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      aNDExpression = ANDExpression();
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
         {if (true) return new ANDExpression(equalityExpression, aNDExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpression EqualityExpression() throws ParseException {
        RelationalExpression relationalExpression;
        EqualityExpressionInt equalityExpressionInt = null;
        Token firstToken=token;
    relationalExpression = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQEQ:
    case NOTEQ:
      equalityExpressionInt = EqualityExpressionInt();
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
         {if (true) return new EqualityExpression(relationalExpression, equalityExpressionInt, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpressionInt EqualityExpressionInt() throws ParseException {
        Token t;
        ASTStringNode eqeq;
        EqualityExpression equalityExpression;
        ASTStringNode noteq;
        EqualityExpression equalityExpression1;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQEQ:
      t = jj_consume_token(EQEQ);
                 eqeq=new ASTStringNode(t.image,new WToken(t));
      equalityExpression = EqualityExpression();
         {if (true) return new EqualityExpressionInt1(eqeq, equalityExpression, firstToken.next,token);}
      break;
    case NOTEQ:
      t = jj_consume_token(NOTEQ);
                  noteq=new ASTStringNode(t.image,new WToken(t));
      equalityExpression1 = EqualityExpression();
         {if (true) return new EqualityExpressionInt2(noteq, equalityExpression1, firstToken.next,token);}
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpression RelationalExpression() throws ParseException {
        ShiftExpression shiftExpression;
        RelationalExpressionInt relationalExpressionInt = null;
        Token firstToken=token;
    shiftExpression = ShiftExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SL:
    case SR:
    case SLEQ:
    case SREQ:
      relationalExpressionInt = RelationalExpressionInt();
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
         {if (true) return new RelationalExpression(shiftExpression, relationalExpressionInt, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpressionInt RelationalExpressionInt() throws ParseException {
        RelationalExpression relationalExpression;
        RelationalExpression relationalExpression1;
        RelationalExpression relationalExpression2;
        RelationalExpression relationalExpression3;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SL:
      jj_consume_token(SL);
      relationalExpression = RelationalExpression();
         {if (true) return new RelationalExpressionInt1(relationalExpression, firstToken.next,token);}
      break;
    case SR:
      jj_consume_token(SR);
      relationalExpression1 = RelationalExpression();
         {if (true) return new RelationalExpressionInt2(relationalExpression1, firstToken.next,token);}
      break;
    case SLEQ:
      jj_consume_token(SLEQ);
      relationalExpression2 = RelationalExpression();
         {if (true) return new RelationalExpressionInt3(relationalExpression2, firstToken.next,token);}
      break;
    case SREQ:
      jj_consume_token(SREQ);
      relationalExpression3 = RelationalExpression();
         {if (true) return new RelationalExpressionInt4(relationalExpression3, firstToken.next,token);}
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ShiftExpression ShiftExpression() throws ParseException {
        AdditiveExpression additiveExpression;
        ShiftExpressionInt shiftExpressionInt = null;
        Token firstToken=token;
    additiveExpression = AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLSL:
    case SRSR:
      shiftExpressionInt = ShiftExpressionInt();
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
         {if (true) return new ShiftExpression(additiveExpression, shiftExpressionInt, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ShiftExpressionInt ShiftExpressionInt() throws ParseException {
        ShiftExpression shiftExpression;
        ShiftExpression shiftExpression1;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLSL:
      jj_consume_token(SLSL);
      shiftExpression = ShiftExpression();
         {if (true) return new ShiftExpressionInt1(shiftExpression, firstToken.next,token);}
      break;
    case SRSR:
      jj_consume_token(SRSR);
      shiftExpression1 = ShiftExpression();
         {if (true) return new ShiftExpressionInt2(shiftExpression1, firstToken.next,token);}
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpression AdditiveExpression() throws ParseException {
        MultiplicativeExpression multiplicativeExpression;
        AdditiveExpressionInt additiveExpressionInt = null;
        Token firstToken=token;
    multiplicativeExpression = MultiplicativeExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      additiveExpressionInt = AdditiveExpressionInt();
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
         {if (true) return new AdditiveExpression(multiplicativeExpression, additiveExpressionInt, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpressionInt AdditiveExpressionInt() throws ParseException {
        AdditiveExpression additiveExpression;
        AdditiveExpression additiveExpression1;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      additiveExpression = AdditiveExpression();
         {if (true) return new AdditiveExpressionInt1(additiveExpression, firstToken.next,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      additiveExpression1 = AdditiveExpression();
         {if (true) return new AdditiveExpressionInt2(additiveExpression1, firstToken.next,token);}
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
        CastExpression castExpression;
        MultiplicativeExpressionInt multiplicativeExpressionInt = null;
        Token firstToken=token;
    castExpression = CastExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case SLASH:
    case PERCENT:
      multiplicativeExpressionInt = MultiplicativeExpressionInt();
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
         {if (true) return new MultiplicativeExpression(castExpression, multiplicativeExpressionInt, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpressionInt MultiplicativeExpressionInt() throws ParseException {
        MultiplicativeExpression multiplicativeExpression;
        MultiplicativeExpression multiplicativeExpression1;
        MultiplicativeExpression multiplicativeExpression2;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
      multiplicativeExpression = MultiplicativeExpression();
         {if (true) return new MultiplicativeExpressionInt1(multiplicativeExpression, firstToken.next,token);}
      break;
    case SLASH:
      jj_consume_token(SLASH);
      multiplicativeExpression1 = MultiplicativeExpression();
         {if (true) return new MultiplicativeExpressionInt2(multiplicativeExpression1, firstToken.next,token);}
      break;
    case PERCENT:
      jj_consume_token(PERCENT);
      multiplicativeExpression2 = MultiplicativeExpression();
         {if (true) return new MultiplicativeExpressionInt3(multiplicativeExpression2, firstToken.next,token);}
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CastExpression CastExpression() throws ParseException {
        TypeName typeName;
        CastExpression castExpression;
        UnaryExpression unaryExpression;
        Token firstToken=token;
    if (jj_2_32(2147483647)) {
      jj_consume_token(92);
      typeName = TypeName();
      jj_consume_token(93);
      castExpression = CastExpression();
         {if (true) return new CastExpression1(typeName, castExpression, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case PLUS:
      case MINUS:
      case PLUSPLUS:
      case MINUSMINUS:
      case STAR:
      case NOT:
      case TILDE:
      case AND:
      case IDENTIFIER:
      case 92:
        unaryExpression = UnaryExpression();
         {if (true) return new CastExpression2(unaryExpression, firstToken.next,token);}
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpression UnaryExpression() throws ParseException {
        PostfixExpression postfixExpression;
        UnaryExpression unaryExpression;
        UnaryExpression unaryExpression1;
        UnaryOperator unaryOperator;
        CastExpression castExpression;
        Token t;
        ASTStringNode sizeof;
        UnaryExpressionSizeOf unaryExpressionSizeOf;
        Token firstToken=token;
    if (jj_2_33(3)) {
      postfixExpression = PostfixExpression();
         {if (true) return new UnaryExpression1(postfixExpression, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSPLUS:
        jj_consume_token(PLUSPLUS);
        unaryExpression = UnaryExpression();
         {if (true) return new UnaryExpression2(unaryExpression, firstToken.next,token);}
        break;
      case MINUSMINUS:
        jj_consume_token(MINUSMINUS);
        unaryExpression1 = UnaryExpression();
         {if (true) return new UnaryExpression3(unaryExpression1, firstToken.next,token);}
        break;
      case PLUS:
      case MINUS:
      case STAR:
      case NOT:
      case TILDE:
      case AND:
        unaryOperator = UnaryOperator();
        castExpression = CastExpression();
         {if (true) return new UnaryExpression4(unaryOperator, castExpression, firstToken.next,token);}
        break;
      case SIZEOF:
        t = jj_consume_token(SIZEOF);
                   sizeof=new ASTStringNode(t.image,new WToken(t));
        unaryExpressionSizeOf = UnaryExpressionSizeOf();
         {if (true) return new UnaryExpression5(sizeof, unaryExpressionSizeOf, firstToken.next,token);}
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpressionSizeOf UnaryExpressionSizeOf() throws ParseException {
        UnaryExpression unaryExpression;
        TypeName typeName;
        Token firstToken=token;
    if (jj_2_34(2147483647)) {
      unaryExpression = UnaryExpression();
         {if (true) return new UnaryExpressionSizeOf1(unaryExpression, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
        jj_consume_token(92);
        typeName = TypeName();
        jj_consume_token(93);
         {if (true) return new UnaryExpressionSizeOf2(typeName, firstToken.next,token);}
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public UnaryOperator UnaryOperator() throws ParseException {
        Token t;
        ASTStringNode and;
        ASTStringNode star;
        ASTStringNode plus;
        ASTStringNode minus;
        ASTStringNode tilde;
        ASTStringNode not;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t = jj_consume_token(AND);
                and=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new UnaryOperator1(and, firstToken.next,token);}
      break;
    case STAR:
      t = jj_consume_token(STAR);
                 star=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new UnaryOperator2(star, firstToken.next,token);}
      break;
    case PLUS:
      t = jj_consume_token(PLUS);
                 plus=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new UnaryOperator3(plus, firstToken.next,token);}
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
                  minus=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new UnaryOperator4(minus, firstToken.next,token);}
      break;
    case TILDE:
      t = jj_consume_token(TILDE);
                  tilde=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new UnaryOperator5(tilde, firstToken.next,token);}
      break;
    case NOT:
      t = jj_consume_token(NOT);
                not=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new UnaryOperator6(not, firstToken.next,token);}
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PostfixExpression PostfixExpression() throws ParseException {
        PrimaryExpression primaryExpression;
        PostfixExpressionInternal postfixExpressionInternal;
        ArrayList<PostfixExpressionInternal> postfixExpressionInternalList = new ArrayList<PostfixExpressionInternal>();
        Token firstToken=token;
    primaryExpression = PrimaryExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSPLUS:
      case MINUSMINUS:
      case 92:
      case 94:
      case 96:
      case 99:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_15;
      }
      postfixExpressionInternal = PostfixExpressionInternal();
                                                                                                     postfixExpressionInternalList.add(postfixExpressionInternal);
    }
         {if (true) return new PostfixExpression(primaryExpression, postfixExpressionInternalList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PostfixExpressionInternal PostfixExpressionInternal() throws ParseException {
        Expression expression;
        ArgumentExpressionList argumentExpressionList = null;
        Token t;
        ASTStringNode identifier;
        ASTStringNode identifier1;
        ASTStringNode plusplus;
        ASTStringNode minusminus;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 94:
      jj_consume_token(94);
      expression = Expression();
      jj_consume_token(95);
         {if (true) return new PostfixExpressionInternal1(expression, firstToken.next,token);}
      break;
    case 92:
      jj_consume_token(92);
      if (jj_2_35(2147483647)) {
        argumentExpressionList = ArgumentExpressionList();
      } else {
        ;
      }
      jj_consume_token(93);
         {if (true) return new PostfixExpressionInternal2(argumentExpressionList, firstToken.next,token);}
      break;
    case 96:
      jj_consume_token(96);
      t = jj_consume_token(IDENTIFIER);
                           identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new PostfixExpressionInternal3(identifier, firstToken.next,token);}
      break;
    case 99:
      jj_consume_token(99);
      t = jj_consume_token(IDENTIFIER);
                            identifier1=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new PostfixExpressionInternal4(identifier1, firstToken.next,token);}
      break;
    case PLUSPLUS:
      t = jj_consume_token(PLUSPLUS);
                     plusplus=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new PostfixExpressionInternal5(plusplus, firstToken.next,token);}
      break;
    case MINUSMINUS:
      t = jj_consume_token(MINUSMINUS);
                       minusminus=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new PostfixExpressionInternal6(minusminus, firstToken.next,token);}
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Constant constant;
        Expression expression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new PrimaryExpression1(identifier, firstToken.next,token);}
      break;
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      constant = Constant();
         {if (true) return new PrimaryExpression2(constant, firstToken.next,token);}
      break;
    case 92:
      jj_consume_token(92);
      expression = Expression();
      jj_consume_token(93);
         {if (true) return new PrimaryExpression3(expression, firstToken.next,token);}
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArgumentExpressionList ArgumentExpressionList() throws ParseException {
        AssignmentExpression assignmentExpression;
        AssignmentExpression assignmentExpression1;
        ArrayList<AssignmentExpression> assignmentExpression1List = new ArrayList<AssignmentExpression>();
        Token firstToken=token;
    assignmentExpression = AssignmentExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[78] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
      assignmentExpression1 = AssignmentExpression();
                                                                                                      assignmentExpression1List.add(assignmentExpression1);
    }
         {if (true) return new ArgumentExpressionList(assignmentExpression, assignmentExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Constant Constant() throws ParseException {
        Token t;
        ASTStringNode integer_literal;
        ASTStringNode floating_point_literal;
        ASTStringNode character_literal;
        ASTStringNode string_literal;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                            integer_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Constant1(integer_literal, firstToken.next,token);}
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                   floating_point_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Constant2(floating_point_literal, firstToken.next,token);}
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                              character_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Constant3(character_literal, firstToken.next,token);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Constant4(string_literal, firstToken.next,token);}
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_133()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_222()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(MINUSMINUS)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(PLUSPLUS)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(UNSIGNED)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(SIGNED)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_3R_255()) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_3R_252()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isType(getToken(1).image);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_62()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_scan_token(PERCENT)) return true;
    if (jj_3R_244()) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(92)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_244()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(94)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_244()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    return false;
  }

  final private boolean jj_3R_255() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(92)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_3R_246()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(TYPEDEF)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(94)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(EXTERN)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(REGISTER)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(AUTO)) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_252() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) return true;
    }
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_216()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_110()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_3R_244()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_49() {
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(SRSR)) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_scan_token(SLSL)) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_240()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) return true;
    if (jj_3R_19()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_236()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_238()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(SREQ)) return true;
    if (jj_3R_225()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(SLEQ)) return true;
    if (jj_3R_225()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(SR)) return true;
    if (jj_3R_225()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_223()) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(SL)) return true;
    if (jj_3R_225()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_214()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_224()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_179()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_3R_234()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(96)) return true;
    if (jj_scan_token(96)) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(NOTEQ)) return true;
    if (jj_3R_220()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(98)) return true;
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(EQEQ)) return true;
    if (jj_3R_220()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(ANDAND)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) return true;
    }
    return false;
  }

  final private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(OROR)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_20()) return true;
    if (jj_3R_158()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_225()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_220()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_214()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_157()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_159()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_200()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_219()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(STAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_179()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(92)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(94)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_135()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_181()) return true;
    if (jj_scan_token(91)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_123()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(ASSOR)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(ASSTIL)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(ASSAMP)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(ASSSR)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(ASSSL)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(ASSMINUS)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(ASSPLUS)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(ASSPERCENT)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(ASSSLASH)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(ASSSTAR)) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_37()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_37()) return true;
    if (jj_3R_38()) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_3R_106()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_206()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(88)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(88)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(88)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_243()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_106()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_181()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(92)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    xsp = jj_scanpos;
    if (jj_3R_232()) jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(92)) return true;
    if (jj_3R_181()) return true;
    if (jj_scan_token(93)) return true;
    if (jj_scan_token(88)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(92)) return true;
    if (jj_3R_181()) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    if (jj_3R_119()) return true;
    if (jj_scan_token(88)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(MINUSMINUS)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(PLUSPLUS)) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(99)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(96)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(92)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(94)) return true;
    if (jj_3R_181()) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(92)) return true;
    if (jj_3R_181()) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(92)) return true;
    if (jj_3R_181()) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_151()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(STRUCT)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_189()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(89)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(91)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_128()) return true;
    if (jj_scan_token(91)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(91)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_153()) return true;
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  public CParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[80];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x41400000,0x200000,0x41400000,0x84800000,0x200000,0x0,0x0,0x80000000,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80d1000,0x0,0x0,0x0,0x200000,0x0,0x200000,0x0,0x0,0x0,0x80d1000,0x0,0x0,0x0,0x0,0x80d1000,0x0,0x80d1000,0x0,0x381d1000,0x2000000,0x80d1000,0x3a1d1000,0x3a1d1000,0x10000000,0x80d1000,0x80d1000,0x80d1000,0x0,0x80d1000,0x20100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80d1000,0x8000000,0x0,0x0,0x0,0x0,0xd1000,0x0,0xd1000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x1001,0x20,0x1001,0x26cd2,0x20,0x0,0x0,0x10,0x0,0x100000,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd800c,0x200,0x0,0xd820c,0xd820c,0x40000,0x0,0x0,0x0,0x90004,0x0,0x8008,0x0,0x7ff00000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x10200800,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x0,0x100000,0x0,0x0,0x100000,0x10200800,0x18200800,0x200000,0x200000,0x100000,0x0,0x800,0x50000000,0x10200000,0x10270f80,0x200000,0x40000000,0x10000000,0x0,0x800,0x0,0x100000,0x50000800,0x100000,0x12270f80,0x50000800,0x800,0x50000800,0x50000000,0x10270f80,0x50000000,0x10270f80,0x50000000,0x13270f80,0x200000,0x10270f80,0x13270f80,0x13270f80,0x0,0x10270f80,0x10270f80,0x10270f80,0x0,0x10270f80,0x0,0x100000,0x0,0x0,0x8000,0x80000,0x4000,0x0,0x40000,0x1,0x1,0x1e,0x1e,0x60,0x60,0x180,0x180,0x3800,0x3800,0x10270f80,0x70f80,0x10000000,0x70980,0x50000600,0x50000600,0x10200000,0x100000,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x9,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[35];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public CParser(CharStream stream) {
    token_source = new CParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CParser(CParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[100];
    for (int i = 0; i < 100; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 80; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 100; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 35; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
