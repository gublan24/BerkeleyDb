/* Generated By:JavaCC: Do not edit this line. HaskellParser.java */
package tmp.generated_haskell;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

  public class HaskellParser implements HaskellParserConstants {

        /**
	 * Append the given {@link Token} and any preceding special tokens to a
	 * given {@link StringBuffer}.
	 * 
	 * @param token
	 *            the given JavaCC {@link Token} object
	 * @param buffer
	 *            the buffer to which to append <code>token</code>
	 */
        final private static void accumulate(Token token, StringBuffer buffer) {

                // Append preceding special tokens to <code>buffer</code>:
                //
                Token special = firstSpecial(token);
                if (special != token)
                        while (special != null) {
                                buffer.append(special.toString());
                                special = special.next;
                        }

                // Finally, append the token itself:
                //
                buffer.append(token.toString());
        }

        /**
	 * Accumulate {@list Token} objects from the token stream, respecting nested
	 * code inside <code>open</code> and <code>close</code> pairs, until an
	 * unmatched <code>close</code> is the next token in the stream. This
	 * method assumes that an <code>open</code> token has just been read from
	 * the stream so the initial nesting level is 1. The method returns when a
	 * matching <code>close</code> token is the next token in the token
	 * stream. <em>The <code>close</code> token is left in the stream!</em>
	 * 
	 * @return the accumulated tokens as a {@link String}.
	 * 
	 * @throws ParseException
	 *             if an end-of-file is found before an unmatched
	 *             <code>close</code> token.
	 */
        final private Token accumulateNestedRegion(int open, int close)
                        throws ParseException {

                StringBuffer buffer = new StringBuffer();
                Token token = getToken(1);

                // Initialize result with known information (starting position, etc.):
                //
                Token result = Token.newToken(UNANTICIPATED_SYMBOL);
                result.specialToken = null;

                Token startToken = firstSpecial(token);
                result.beginColumn = startToken.beginColumn;
                result.beginLine = startToken.beginLine;
                result.offset=startToken.offset;

                // Accumulate tokens until a <code>close</code> token is found:
                //
                for (int nesting = 1; nesting > 0;) {


                        if (token.kind == EOF)
                                throw new ParseException("accumulating from line "
                                                + result.beginLine + " at column " + result.beginColumn
                                                + ": EOF reached before ending " + tokenImage[close]
                                                + " found");

                        if (token.kind == open)
                                ++nesting;
                        else if (token.kind == close) {
                                if (nesting == 1)
                                        break;
                                --nesting;
                        }

                        // Update information in result:
                        //
                        result.endColumn = token.endColumn;
                        result.endLine = token.endLine;
                        result.length=(token.offset-result.offset)+token.length;
                        result.next = token.next;

                        accumulate(token, buffer);
                        getNextToken();
                        token = getToken(1);
                }

                result.image = buffer.toString();
                return result;
        }


        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int endTokenKind) throws ParseException {
                return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind });
        }

        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int endTokenKind1, int endTokenKind2) throws ParseException {
                return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind1,
                                endTokenKind2 });
        }

        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int endTokenKind1, int endTokenKind2, int endTokenKind3)
                        throws ParseException {
                return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind1,
                                endTokenKind2, endTokenKind3 });
        }
        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int endTokenKind1, int endTokenKind2, int endTokenKind3, int endTokenKind4)
                        throws ParseException {
                return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind1,
                                endTokenKind2, endTokenKind3, endTokenKind4 });
        }

        final private boolean isNot(int kind) {
                return getToken(1).kind != kind;
        }

        final private boolean isNot(int k1, int k2) {
                return isNot(k1) && isNot(k2);
        }

        final private boolean isNot(int k1, int k2, int k3) {
                return isNot(k1, k2) && isNot(k3);
        }
        final private boolean isNot(int k1, int k2, int k3, int k4) {
                return isNot(k1, k2, k3) && isNot(k4);
        }

        /** returns true if the CONTEXT_ARROW is found before the SEMICOLON **/
        final private boolean isContext() throws ParseException {
                int lookahead=1;
                while (true) {
                        Token t = getToken(lookahead);
                        if (t.kind==EOF) throw new ParseException("EOF found before ; or =>  (line " + token.beginLine
                                                + ", column " + token.beginColumn
                                                + ")");
                        if (t.kind==SEMICOLON) return false;
                        if (t.kind==CONTEXT_ARROW) return true;
                        lookahead++;
                }
        }

        /**
	 * Accumulate {@link Token} objects from the token stream until a token
	 * matching <code>tokenKind</code> is consumed from the stream. The tokens
	 * are accumulated in <code>buffer</code>, NOT including the terminating
	 * token.
	 * 
	 * @return a {@link Token} formed by concatenating all intervening tokens
	 *         and special tokens.
	 */
        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int[] endTokenKinds) throws ParseException {

                StringBuffer buffer = new StringBuffer();
                Token token = getToken(1);

                // Initialize result with known information (starting position, etc.):
                //
                Token result = Token.newToken(UNANTICIPATED_SYMBOL);
                result.specialToken = null;

                Token startToken = firstSpecial(token);
                result.beginColumn = startToken.beginColumn;
                result.beginLine = startToken.beginLine;
                result.offset=startToken.offset;

                // Accumulate tokens until a <code>tokenKind</code> token is found:
                //
                int nesting=0;
                while (!contains(endTokenKinds, token.kind) || nesting >0) {
                        // Update information in result:
                        //
                        result.endColumn = token.endColumn;
                        result.endLine = token.endLine;
                        result.next = token.next;
                        result.length=(token.offset-result.offset)+token.length;

                        if (token.kind == EOF)
                                throw new ParseException("from line " + result.beginLine
                                                + " at column " + result.beginColumn
                                                + ": EOF reached before " + images(endTokenKinds)
                                                + " found");

                        if (considerInnerBlocks && token.kind == LEFT_CURLY)
                                ++nesting;
                        else if (considerInnerBlocks && token.kind == RIGHT_CURLY) {
                                --nesting;
                        }

                        accumulate(token, buffer);
                        getNextToken();
                        token = getToken(1);
                }

                if (buffer.length() == 0)
                        throw new ParseException("syntax error - empty pseudo-match (line " + result.beginLine
                                                + ", column " + result.beginColumn
                                                + ")");

                result.image = buffer.toString();
                return result;
        }

        private String images(int[] endTokenKinds) {
                String result = "";
                for (int i : endTokenKinds)
                        result += tokenImage[i] + " ";
                return result;
        }

        private boolean contains(int[] endTokenKinds, int kind) {
                for (int i : endTokenKinds)
                        if (i == kind)
                                return true;
                return false;
        }

    /**
     * Finds the first token, special or otherwise, in the list of special
     * tokens preceding this {@link Token}.  If this list is non-empty, the
     * result will be a special token.  Otherwise, it will be the starting
     * token.
     *
     * @param token the given {@link Token}.
     * @return the first special token preceding <code>token</code>.
     **/
    final private static Token firstSpecial (Token token) {

        while (token.specialToken != null)
            token = token.specialToken ;

        return token ;
    }

  Token findListContent() throws ParseException {
    return accumulateNestedRegion(LEFT_PAREN, RIGHT_PAREN) ;
  }

  Token findBlockContent() throws ParseException {
    return accumulateNestedRegion (LEFT_CURLY, RIGHT_CURLY) ;
  }

  Token findConRest() throws ParseException {
        //(block | ~(SEMICOLON|ALT|RIGHT_CURLY))*
    return accumulateUntil(true,SEMICOLON,ALT,RIGHT_CURLY,DERIVING) ;
  }

  Token findNonstddeclRest() throws ParseException {
        //(block | ~(SEMICOLON|RIGHT_CURLY))+
    return accumulateUntil(true,SEMICOLON,RIGHT_CURLY) ;
  }

  Token findUntilSemiOrCCB() throws ParseException {
        //~(SEMICOLON | RIGHT_CURLY)*
    return accumulateUntil(false,SEMICOLON,RIGHT_CURLY) ;
  }

  Token findUntilSemiOrContextArrow() throws ParseException {
        //(~(CONTEXT_ARROW|SEMICOLON))*;
    return accumulateUntil(false,CONTEXT_ARROW,SEMICOLON) ;
  }

  Token findUntilSemiOrEquals() throws ParseException {
        //~(EQUALS|SEMICOLON))*
    return accumulateUntil(false,SEMICOLON,EQUALS) ;
  }

  Token findUntilEquals() throws ParseException {
        //~(EQUALS))*
    return accumulateUntil(false,EQUALS) ;
  }

  final public module module() throws ParseException {
        moduleHeader moduleHeader = null;
        body body;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
      moduleHeader = moduleHeader();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(LEFT_CURLY);
    body = body();
    jj_consume_token(RIGHT_CURLY);
         {if (true) return new module(moduleHeader, body, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public body body() throws ParseException {
        importDecl importDecl;
        ArrayList<importDecl> list0=new ArrayList<importDecl>();
        importDecl importDecl1;
        ArrayList<importDecl> importDecl1List = new ArrayList<importDecl>();
        definitions definitions = null;
        definitions definitions1 = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT:
      importDecl = importDecl();
                                list0.add(importDecl);
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        jj_consume_token(SEMICOLON);
        importDecl1 = importDecl();
                                                                                                   list0.add(importDecl1);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        definitions = definitions();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
         {if (true) return new body1(list0, definitions, firstToken.next,token);}
      break;
    default:
      jj_la1[3] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
      case DATA:
      case NEWTYPE:
      case CLASS:
      case INSTANCE:
      case DEFAULTTOKEN:
      case INFIXL:
      case INFIXR:
      case INFIX:
      case OTHER2:
      case OTHER4:
      case OTHER5:
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case INTEGER:
      case FLOAT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        definitions1 = definitions();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
         {if (true) return new body2(definitions1, firstToken.next,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public moduleHeader moduleHeader() throws ParseException {
        naam naam;
        exports exports = null;
        Token firstToken=token;
    jj_consume_token(MODULE);
    naam = naam();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      exports = exports();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(WHERE);
         {if (true) return new moduleHeader(naam, exports, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public exports exports() throws ParseException {
        exportList exportList = null;
        ASTTextNode text351 = null;
        Token firstToken=token;
    jj_consume_token(LEFT_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case LEFT_PAREN:
      exportList = exportList();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
                                            text351=new ASTTextNode(",",new WToken(token));
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_PAREN);
         {if (true) return new exports(exportList, text351, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public importDecl importDecl() throws ParseException {
        ASTTextNode text352 = null;
        naam naam;
        naam naam1 = null;
        hiding hiding = null;
        Token firstToken=token;
    jj_consume_token(IMPORT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUALIFIED:
      jj_consume_token(QUALIFIED);
                               text352=new ASTTextNode("qualified",new WToken(token));
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    naam = naam();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      naam1 = naam();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HIDING:
    case LEFT_PAREN:
      hiding = hiding();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
         {if (true) return new importDecl(text352, naam, naam1, hiding, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public hiding hiding() throws ParseException {
        ASTTextNode text353 = null;
        exportList exportList = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HIDING:
      jj_consume_token(HIDING);
                   text353=new ASTTextNode("hiding",new WToken(token));
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(LEFT_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case LEFT_PAREN:
      exportList = exportList();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_PAREN);
         {if (true) return new hiding(text353, exportList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public exportList exportList() throws ParseException {
        export export;
        ArrayList<export> list0=new ArrayList<export>();
        export export1;
        ArrayList<export> export1List = new ArrayList<export>();
        Token firstToken=token;
    export = export();
                        list0.add(export);
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      export1 = export();
                                                                               list0.add(export1);
    }
         {if (true) return new exportList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public export export() throws ParseException {
        var var;
        naam naam;
        exportNaamParam exportNaamParam = null;
        naam naam1;
        Token firstToken=token;
    if (jj_2_3(2147483647)) {
      var = var();
         {if (true) return new export1(var, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRUCTOR_ID:
      case LEFT_PAREN:
        naam = naam();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          exportNaamParam = exportNaamParam();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
         {if (true) return new export2(naam, exportNaamParam, firstToken.next,token);}
        break;
      case MODULE:
        jj_consume_token(MODULE);
        naam1 = naam();
         {if (true) return new export3(naam1, firstToken.next,token);}
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public exportNaamParam exportNaamParam() throws ParseException {
        naamOrVarList naamOrVarList = null;
        Token firstToken=token;
    if (jj_2_4(2)) {
      jj_consume_token(LEFT_PAREN);
      jj_consume_token(OTHER12);
      jj_consume_token(RIGHT_PAREN);
         {if (true) return new exportNaamParam1(firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case LEFT_PAREN:
          naamOrVarList = naamOrVarList();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PAREN);
         {if (true) return new exportNaamParam2(naamOrVarList, firstToken.next,token);}
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public naamOrVarList naamOrVarList() throws ParseException {
        naamOrVar naamOrVar;
        ArrayList<naamOrVar> list0=new ArrayList<naamOrVar>();
        naamOrVar naamOrVar1;
        ArrayList<naamOrVar> naamOrVar1List = new ArrayList<naamOrVar>();
        Token firstToken=token;
    naamOrVar = naamOrVar();
                              list0.add(naamOrVar);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      naamOrVar1 = naamOrVar();
                                                                                 list0.add(naamOrVar1);
    }
         {if (true) return new naamOrVarList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public naamOrVar naamOrVar() throws ParseException {
        naam naam;
        var var;
        Token firstToken=token;
    if (jj_2_5(2147483647)) {
      naam = naam();
         {if (true) return new naamOrVar1(naam, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case LEFT_PAREN:
        var = var();
         {if (true) return new naamOrVar2(var, firstToken.next,token);}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public definitions definitions() throws ParseException {
        definition definition;
        ArrayList<definition> list0=new ArrayList<definition>();
        definition definition1;
        ArrayList<definition> definition1List = new ArrayList<definition>();
        Token firstToken=token;
    definition = definition();
                                list0.add(definition);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_4;
      }
      jj_consume_token(SEMICOLON);
      definition1 = definition();
                                                                                      list0.add(definition1);
    }
         {if (true) return new definitions(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public definition definition() throws ParseException {
        simpletype simpletype;
        functiontype functiontype;
        context context = null;
        simpletype simpletype1;
        constrs constrs;
        deriving deriving = null;
        context context1 = null;
        simpletype simpletype2;
        naam naam;
        newtypeParam newtypeParam;
        deriving deriving1 = null;
        context context2 = null;
        naam naam1;
        var var;
        ArrayList<var> varList = new ArrayList<var>();
        whereDecls whereDecls = null;
        context context3 = null;
        inst inst;
        whereDecls whereDecls1 = null;
        functiontypeList functiontypeList;
        declaration declaration;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      jj_consume_token(TYPE);
      simpletype = simpletype();
      jj_consume_token(EQUALS);
      functiontype = functiontype();
         {if (true) return new typedecl(simpletype, functiontype, firstToken.next,token);}
      break;
    case DATA:
      jj_consume_token(DATA);
      if (jj_2_6(2147483647)) {
        context = context();
      } else {
        ;
      }
      simpletype1 = simpletype();
      jj_consume_token(EQUALS);
      constrs = constrs();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DERIVING:
        deriving = deriving();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
         {if (true) return new datadecl(context, simpletype1, constrs, deriving, firstToken.next,token);}
      break;
    case NEWTYPE:
      jj_consume_token(NEWTYPE);
      if (jj_2_7(2147483647)) {
        context1 = context();
      } else {
        ;
      }
      simpletype2 = simpletype();
      jj_consume_token(EQUALS);
      naam = naam();
      newtypeParam = newtypeParam();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DERIVING:
        deriving1 = deriving();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
         {if (true) return new newtypedecl(context1, simpletype2, naam, newtypeParam, deriving1, firstToken.next,token);}
      break;
    case CLASS:
      jj_consume_token(CLASS);
      if (jj_2_8(2147483647)) {
        context2 = context();
      } else {
        ;
      }
      naam1 = naam();
      label_5:
      while (true) {
        var = var();
                                                                                  varList.add(var);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case LEFT_PAREN:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_5;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        whereDecls = whereDecls();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
         {if (true) return new classdecl(context2, naam1, varList, whereDecls, firstToken.next,token);}
      break;
    case INSTANCE:
      jj_consume_token(INSTANCE);
      if (jj_2_9(2147483647)) {
        context3 = context();
      } else {
        ;
      }
      inst = inst();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        whereDecls1 = whereDecls();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
         {if (true) return new instancedecl(context3, inst, whereDecls1, firstToken.next,token);}
      break;
    case DEFAULTTOKEN:
      jj_consume_token(DEFAULTTOKEN);
      functiontypeList = functiontypeList();
         {if (true) return new defaultdecl(functiontypeList, firstToken.next,token);}
      break;
    case INFIXL:
    case INFIXR:
    case INFIX:
    case OTHER2:
    case OTHER4:
    case OTHER5:
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case INTEGER:
    case FLOAT:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LEFT_HPAREN:
    case LEFT_PAREN:
    case LEFT_BRACKET:
      declaration = declaration();
         {if (true) return new definition7(declaration, firstToken.next,token);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public simpletype simpletype() throws ParseException {
        naam naam;
        var var;
        ArrayList<var> varList = new ArrayList<var>();
        Token firstToken=token;
    naam = naam();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case LEFT_PAREN:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_6;
      }
      var = var();
                               varList.add(var);
    }
         {if (true) return new simpletype(naam, varList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public constrs constrs() throws ParseException {
        constr constr;
        ArrayList<constr> list0=new ArrayList<constr>();
        constr constr1;
        ArrayList<constr> constr1List = new ArrayList<constr>();
        Token firstToken=token;
    constr = constr();
                        list0.add(constr);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALT:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_7;
      }
      jj_consume_token(ALT);
      constr1 = constr();
                                                                  list0.add(constr1);
    }
         {if (true) return new constrs(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public constr constr() throws ParseException {
        naam naam;
        fielddeclaration fielddeclaration;
        ArrayList<fielddeclaration> list0=new ArrayList<fielddeclaration>();
        fielddeclaration fielddeclaration1;
        ArrayList<fielddeclaration> fielddeclaration1List = new ArrayList<fielddeclaration>();
        type type;
        ArrayList<type> typeList = new ArrayList<type>();
        operator operator;
        type type1;
        ArrayList<type> type1List = new ArrayList<type>();
        naam naam1;
        type type2;
        ArrayList<type> type2List = new ArrayList<type>();
        Token firstToken=token;
    if (jj_2_11(2147483647)) {
      naam = naam();
      jj_consume_token(LEFT_CURLY);
      fielddeclaration = fielddeclaration();
                                                                                  list0.add(fielddeclaration);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        fielddeclaration1 = fielddeclaration();
                                                                                                                                                          list0.add(fielddeclaration1);
      }
      jj_consume_token(RIGHT_CURLY);
         {if (true) return new constr1(list0, naam, firstToken.next,token);}
    } else if (jj_2_12(2147483647)) {
      label_9:
      while (true) {
        type = type();
                                                                       typeList.add(type);
        if (jj_2_10(2147483647)) {
          ;
        } else {
          break label_9;
        }
      }
      operator = operator();
      label_10:
      while (true) {
        type1 = type();
                                                                                                                                type1List.add(type1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_10;
        }
      }
         {if (true) return new constr2(typeList, operator, type1List, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRUCTOR_ID:
      case LEFT_PAREN:
        naam1 = naam();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_11;
          }
          type2 = type();
                                   type2List.add(type2);
        }
         {if (true) return new constr3(naam1, type2List, firstToken.next,token);}
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public fielddeclaration fielddeclaration() throws ParseException {
        varList varList;
        functiontype functiontype;
        Token firstToken=token;
    varList = varList();
    jj_consume_token(OFTYPE);
    functiontype = functiontype();
         {if (true) return new fielddeclaration(varList, functiontype, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public deriving deriving() throws ParseException {
        naamList naamList;
        naam naam;
        Token firstToken=token;
    if (jj_2_13(2)) {
      jj_consume_token(DERIVING);
      jj_consume_token(LEFT_PAREN);
      naamList = naamList();
      jj_consume_token(RIGHT_PAREN);
         {if (true) return new deriving1(naamList, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DERIVING:
        jj_consume_token(DERIVING);
        naam = naam();
         {if (true) return new deriving2(naam, firstToken.next,token);}
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public newtypeParam newtypeParam() throws ParseException {
        var var;
        functiontype functiontype;
        type type;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_CURLY:
      jj_consume_token(LEFT_CURLY);
      var = var();
      jj_consume_token(OFTYPE);
      functiontype = functiontype();
      jj_consume_token(RIGHT_CURLY);
         {if (true) return new newtypeParam1(var, functiontype, firstToken.next,token);}
      break;
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case LEFT_HPAREN:
    case LEFT_PAREN:
    case LEFT_BRACKET:
      type = type();
         {if (true) return new newtypeParam2(type, firstToken.next,token);}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public inst inst() throws ParseException {
        naam naam;
        type type;
        ArrayList<type> typeList = new ArrayList<type>();
        Token firstToken=token;
    naam = naam();
    label_12:
    while (true) {
      type = type();
                                 typeList.add(type);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_12;
      }
    }
         {if (true) return new inst(naam, typeList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public decls decls() throws ParseException {
        declarationList declarationList = null;
        Token firstToken=token;
    jj_consume_token(LEFT_CURLY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INFIXL:
    case INFIXR:
    case INFIX:
    case OTHER2:
    case OTHER4:
    case OTHER5:
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case INTEGER:
    case FLOAT:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LEFT_HPAREN:
    case LEFT_PAREN:
    case LEFT_BRACKET:
      declarationList = declarationList();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_CURLY);
         {if (true) return new decls(declarationList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public declarationList declarationList() throws ParseException {
        declaration declaration;
        ArrayList<declaration> list0=new ArrayList<declaration>();
        declaration declaration1;
        ArrayList<declaration> declaration1List = new ArrayList<declaration>();
        Token firstToken=token;
    declaration = declaration();
                                  list0.add(declaration);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_13;
      }
      jj_consume_token(SEMICOLON);
      declaration1 = declaration();
                                                                                           list0.add(declaration1);
    }
         {if (true) return new declarationList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public declaration declaration() throws ParseException {
        function function;
        expr expr;
        whereDecls whereDecls = null;
        function function1;
        altExprAss altExprAss;
        ArrayList<altExprAss> altExprAssList = new ArrayList<altExprAss>();
        whereDecls whereDecls1 = null;
        varList varList;
        context context = null;
        functiontype functiontype;
        patr patr;
        expr expr1;
        whereDecls whereDecls2 = null;
        patr patr1;
        altExprAss altExprAss1;
        ArrayList<altExprAss> altExprAss1List = new ArrayList<altExprAss>();
        whereDecls whereDecls3 = null;
        Token t;
        ASTStringNode integer = null;
        operatorList operatorList;
        ASTStringNode integer1 = null;
        operatorList operatorList1;
        ASTStringNode integer2 = null;
        operatorList operatorList2;
        Token firstToken=token;
    if (jj_2_15(2147483647)) {
      function = function();
      jj_consume_token(EQUALS);
      expr = expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        whereDecls = whereDecls();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
         {if (true) return new declaration1(function, expr, whereDecls, firstToken.next,token);}
    } else if (jj_2_16(2147483647)) {
      function1 = function();
      label_14:
      while (true) {
        altExprAss = altExprAss();
                                                                                altExprAssList.add(altExprAss);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALT:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_14;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        whereDecls1 = whereDecls();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
         {if (true) return new declaration2(function1, altExprAssList, whereDecls1, firstToken.next,token);}
    } else if (jj_2_17(2147483647)) {
      varList = varList();
      jj_consume_token(OFTYPE);
      if (jj_2_14(2147483647)) {
        context = context();
      } else {
        ;
      }
      functiontype = functiontype();
         {if (true) return new declaration3(varList, context, functiontype, firstToken.next,token);}
    } else if (jj_2_18(2147483647)) {
      patr = patr();
      jj_consume_token(EQUALS);
      expr1 = expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        whereDecls2 = whereDecls();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
         {if (true) return new declaration4(patr, expr1, whereDecls2, firstToken.next,token);}
    } else if (jj_2_19(2147483647)) {
      patr1 = patr();
      label_15:
      while (true) {
        altExprAss1 = altExprAss();
                                                                     altExprAss1List.add(altExprAss1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALT:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_15;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        whereDecls3 = whereDecls();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
         {if (true) return new declaration5(patr1, altExprAss1List, whereDecls3, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INFIX:
        jj_consume_token(INFIX);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
                             integer=new ASTStringNode(t.image,new WToken(t));
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        operatorList = operatorList();
         {if (true) return new declaration6(integer, operatorList, firstToken.next,token);}
        break;
      case INFIXL:
        jj_consume_token(INFIXL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
                              integer1=new ASTStringNode(t.image,new WToken(t));
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        operatorList1 = operatorList();
         {if (true) return new declaration7(integer1, operatorList1, firstToken.next,token);}
        break;
      case INFIXR:
        jj_consume_token(INFIXR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
                              integer2=new ASTStringNode(t.image,new WToken(t));
          break;
        default:
          jj_la1[44] = jj_gen;
          ;
        }
        operatorList2 = operatorList();
         {if (true) return new declaration8(integer2, operatorList2, firstToken.next,token);}
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public altExprAss altExprAss() throws ParseException {
        expr expr;
        expr expr1;
        Token firstToken=token;
    jj_consume_token(ALT);
    expr = expr();
    jj_consume_token(EQUALS);
    expr1 = expr();
         {if (true) return new altExprAss(expr, expr1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public function function() throws ParseException {
        var var;
        patroon patroon;
        ArrayList<patroon> list0=new ArrayList<patroon>();
        patroon patroon1;
        ArrayList<patroon> patroon1List = new ArrayList<patroon>();
        function function;
        patroon patroon2;
        ArrayList<patroon> patroon2List = new ArrayList<patroon>();
        patroon patroon3;
        operator operator;
        patr patr;
        Token firstToken=token;
    if (jj_2_20(2147483647)) {
      var = var();
      patroon = patroon();
                                                               list0.add(patroon);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OTHER2:
        case OTHER4:
        case OTHER5:
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case INTEGER:
        case FLOAT:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_16;
        }
        patroon1 = patroon();
                                                                                                        list0.add(patroon1);
      }
         {if (true) return new function1(list0, var, firstToken.next,token);}
    } else if (jj_2_21(2147483647)) {
      jj_consume_token(LEFT_PAREN);
      function = function();
      jj_consume_token(RIGHT_PAREN);
      label_17:
      while (true) {
        patroon2 = patroon();
                                                                                  patroon2List.add(patroon2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OTHER2:
        case OTHER4:
        case OTHER5:
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case INTEGER:
        case FLOAT:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_17;
        }
      }
         {if (true) return new function2(function, patroon2List, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER2:
      case OTHER4:
      case OTHER5:
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case INTEGER:
      case FLOAT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        patroon3 = patroon();
        operator = operator();
        patr = patr();
         {if (true) return new function3(patroon3, operator, patr, firstToken.next,token);}
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public whereDecls whereDecls() throws ParseException {
        decls decls;
        Token firstToken=token;
    jj_consume_token(WHERE);
    decls = decls();
         {if (true) return new whereDecls(decls, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public expressie expressie() throws ParseException {
        literal literal;
        var var;
        contrExprParam contrExprParam = null;
        naam naam;
        contrExprParam contrExprParam1 = null;
        expr expr;
        operator operator;
        operator operator1;
        expr expr1;
        exprList exprList = null;
        exprList exprList1 = null;
        exprListSpecial exprListSpecial = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case FLOAT:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      literal = literal();
         {if (true) return new expressie1(literal, firstToken.next,token);}
      break;
    default:
      jj_la1[54] = jj_gen;
      if (jj_2_22(2147483647)) {
        var = var();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_CURLY:
          contrExprParam = contrExprParam();
          break;
        default:
          jj_la1[49] = jj_gen;
          ;
        }
         {if (true) return new expressie2(var, contrExprParam, firstToken.next,token);}
      } else if (jj_2_23(2147483647)) {
        naam = naam();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_CURLY:
          contrExprParam1 = contrExprParam();
          break;
        default:
          jj_la1[50] = jj_gen;
          ;
        }
         {if (true) return new expressie3(naam, contrExprParam1, firstToken.next,token);}
      } else if (jj_2_24(2147483647)) {
        jj_consume_token(LEFT_PAREN);
        expr = expr();
        operator = operator();
        jj_consume_token(RIGHT_PAREN);
         {if (true) return new expressie4(expr, operator, firstToken.next,token);}
      } else if (jj_2_25(2147483647)) {
        jj_consume_token(LEFT_PAREN);
        operator1 = operator();
        expr1 = expr();
        jj_consume_token(RIGHT_PAREN);
         {if (true) return new expressie5(operator1, expr1, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          jj_consume_token(LEFT_PAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LET:
          case DO:
          case CASE:
          case IF:
          case OTHER2:
          case OTHER9:
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case INTEGER:
          case FLOAT:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            exprList = exprList();
            break;
          default:
            jj_la1[51] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_PAREN);
         {if (true) return new expressie6(exprList, firstToken.next,token);}
          break;
        case LEFT_HPAREN:
          jj_consume_token(LEFT_HPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LET:
          case DO:
          case CASE:
          case IF:
          case OTHER2:
          case OTHER9:
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case INTEGER:
          case FLOAT:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            exprList1 = exprList();
            break;
          default:
            jj_la1[52] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_HPAREN);
         {if (true) return new expressie7(exprList1, firstToken.next,token);}
          break;
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LET:
          case DO:
          case CASE:
          case IF:
          case OTHER2:
          case OTHER9:
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case INTEGER:
          case FLOAT:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            exprListSpecial = exprListSpecial();
            break;
          default:
            jj_la1[53] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_BRACKET);
         {if (true) return new expressie8(exprListSpecial, firstToken.next,token);}
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public contrExprParam contrExprParam() throws ParseException {
        contrExprAssign contrExprAssign;
        ArrayList<contrExprAssign> list0=new ArrayList<contrExprAssign>();
        contrExprAssign contrExprAssign1;
        ArrayList<contrExprAssign> contrExprAssign1List = new ArrayList<contrExprAssign>();
        Token firstToken=token;
    jj_consume_token(LEFT_CURLY);
    contrExprAssign = contrExprAssign();
                                              list0.add(contrExprAssign);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_18;
      }
      jj_consume_token(COMMA);
      contrExprAssign1 = contrExprAssign();
                                                                                                                   list0.add(contrExprAssign1);
    }
    jj_consume_token(RIGHT_CURLY);
         {if (true) return new contrExprParam(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public contrExprAssign contrExprAssign() throws ParseException {
        var var;
        expr expr;
        Token firstToken=token;
    var = var();
    jj_consume_token(EQUALS);
    expr = expr();
         {if (true) return new contrExprAssign(var, expr, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public expr expr() throws ParseException {
        exprMain exprMain;
        exprOperator exprOperator;
        ArrayList<exprOperator> exprOperatorList = new ArrayList<exprOperator>();
        exprEnd exprEnd = null;
        Token firstToken=token;
    exprMain = exprMain();
    label_19:
    while (true) {
      if (jj_2_26(2147483647)) {
        ;
      } else {
        break label_19;
      }
      exprOperator = exprOperator();
                                                                                   exprOperatorList.add(exprOperator);
    }
    if (jj_2_27(2147483647)) {
      exprEnd = exprEnd();
    } else {
      ;
    }
         {if (true) return new expr(exprMain, exprOperatorList, exprEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public exprEnd exprEnd() throws ParseException {
        context context = null;
        functiontype functiontype;
        Token firstToken=token;
    jj_consume_token(OFTYPE);
    if (jj_2_28(2147483647)) {
      context = context();
    } else {
      ;
    }
    functiontype = functiontype();
         {if (true) return new exprEnd(context, functiontype, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public exprMain exprMain() throws ParseException {
        expressie expressie;
        ArrayList<expressie> expressieList = new ArrayList<expressie>();
        ArrayList<expressie> list0=new ArrayList<expressie>();
        expr expr;
        patroon patroon;
        ArrayList<patroon> patroonList = new ArrayList<patroon>();
        expr expr1;
        expr expr2;
        expr expr3;
        expr expr4;
        expr expr5;
        caseInner caseInner;
        ArrayList<caseInner> list4=new ArrayList<caseInner>();
        caseInner caseInner1;
        ArrayList<caseInner> caseInner1List = new ArrayList<caseInner>();
        decls decls;
        expr expr6;
        altSpecialSemiList altSpecialSemiList;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case INTEGER:
    case FLOAT:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LEFT_HPAREN:
    case LEFT_PAREN:
    case LEFT_BRACKET:
      label_20:
      while (true) {
        expressie = expressie();
                                            list0.add(expressie);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case INTEGER:
        case FLOAT:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_20;
        }
      }
         {if (true) return new exprMain1(list0, firstToken.next,token);}
      break;
    case OTHER2:
      jj_consume_token(OTHER2);
      expr = expr();
         {if (true) return new exprMain2(expr, firstToken.next,token);}
      break;
    case OTHER9:
      jj_consume_token(OTHER9);
      label_21:
      while (true) {
        patroon = patroon();
                                patroonList.add(patroon);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OTHER2:
        case OTHER4:
        case OTHER5:
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case INTEGER:
        case FLOAT:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_21;
        }
      }
      jj_consume_token(OTHER7);
      expr1 = expr();
         {if (true) return new exprMain3(patroonList, expr1, firstToken.next,token);}
      break;
    case IF:
      jj_consume_token(IF);
      expr2 = expr();
      jj_consume_token(THEN);
      expr3 = expr();
      jj_consume_token(ELSE);
      expr4 = expr();
         {if (true) return new exprMain4(expr2, expr3, expr4, firstToken.next,token);}
      break;
    case CASE:
      jj_consume_token(CASE);
      expr5 = expr();
      jj_consume_token(OF);
      jj_consume_token(LEFT_CURLY);
      caseInner = caseInner();
                                                           list4.add(caseInner);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_22;
        }
        jj_consume_token(SEMICOLON);
        caseInner1 = caseInner();
                                                                                                              list4.add(caseInner1);
      }
      jj_consume_token(RIGHT_CURLY);
         {if (true) return new exprMain5(list4, expr5, firstToken.next,token);}
      break;
    case LET:
      jj_consume_token(LET);
      decls = decls();
      jj_consume_token(IN);
      expr6 = expr();
         {if (true) return new exprMain6(decls, expr6, firstToken.next,token);}
      break;
    case DO:
      jj_consume_token(DO);
      jj_consume_token(LEFT_CURLY);
      altSpecialSemiList = altSpecialSemiList();
      jj_consume_token(RIGHT_CURLY);
         {if (true) return new exprMain7(altSpecialSemiList, firstToken.next,token);}
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public exprOperator exprOperator() throws ParseException {
        operator operator;
        expr expr;
        Token firstToken=token;
    operator = operator();
    expr = expr();
         {if (true) return new exprOperator(operator, expr, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public exprList exprList() throws ParseException {
        expr expr;
        ArrayList<expr> list0=new ArrayList<expr>();
        expr expr1;
        ArrayList<expr> expr1List = new ArrayList<expr>();
        Token firstToken=token;
    expr = expr();
                    list0.add(expr);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      expr1 = expr();
                                                        list0.add(expr1);
    }
         {if (true) return new exprList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public exprListSpecial exprListSpecial() throws ParseException {
        expr expr;
        altSpecialList altSpecialList;
        expr expr1;
        expr expr2 = null;
        expr expr3 = null;
        expr expr4;
        ArrayList<expr> list2=new ArrayList<expr>();
        expr expr5;
        ArrayList<expr> expr5List = new ArrayList<expr>();
        Token firstToken=token;
    if (jj_2_29(2147483647)) {
      expr = expr();
      jj_consume_token(ALT);
      altSpecialList = altSpecialList();
         {if (true) return new exprListSpecial1(expr, altSpecialList, firstToken.next,token);}
    } else if (jj_2_30(2147483647)) {
      expr1 = expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        expr2 = expr();
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      jj_consume_token(OTHER12);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
      case DO:
      case CASE:
      case IF:
      case OTHER2:
      case OTHER9:
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case INTEGER:
      case FLOAT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        expr3 = expr();
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
         {if (true) return new exprListSpecial2(expr1, expr2, expr3, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
      case DO:
      case CASE:
      case IF:
      case OTHER2:
      case OTHER9:
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case INTEGER:
      case FLOAT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        expr4 = expr();
                     list2.add(expr4);
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[64] = jj_gen;
            break label_24;
          }
          jj_consume_token(COMMA);
          expr5 = expr();
                                                          list2.add(expr5);
        }
         {if (true) return new exprListSpecial3(list2, firstToken.next,token);}
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public altSpecialSemiList altSpecialSemiList() throws ParseException {
        altSpecial altSpecial;
        ArrayList<altSpecial> list0=new ArrayList<altSpecial>();
        altSpecial altSpecial1;
        ArrayList<altSpecial> altSpecial1List = new ArrayList<altSpecial>();
        Token firstToken=token;
    altSpecial = altSpecial();
                                list0.add(altSpecial);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_25;
      }
      jj_consume_token(SEMICOLON);
      altSpecial1 = altSpecial();
                                                                                      list0.add(altSpecial1);
    }
         {if (true) return new altSpecialSemiList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public altSpecialList altSpecialList() throws ParseException {
        altSpecial altSpecial;
        ArrayList<altSpecial> list0=new ArrayList<altSpecial>();
        altSpecial altSpecial1;
        ArrayList<altSpecial> altSpecial1List = new ArrayList<altSpecial>();
        Token firstToken=token;
    altSpecial = altSpecial();
                                list0.add(altSpecial);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_26;
      }
      jj_consume_token(COMMA);
      altSpecial1 = altSpecial();
                                                                                      list0.add(altSpecial1);
    }
         {if (true) return new altSpecialList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public altSpecial altSpecial() throws ParseException {
        patr patr;
        expr expr;
        expr expr1;
        decls decls;
        Token firstToken=token;
    if (jj_2_31(2147483647)) {
      patr = patr();
      jj_consume_token(OTHER10);
      expr = expr();
         {if (true) return new altSpecial1(patr, expr, firstToken.next,token);}
    } else if (jj_2_32(2147483647)) {
      expr1 = expr();
         {if (true) return new altSpecial2(expr1, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
        jj_consume_token(LET);
        decls = decls();
         {if (true) return new altSpecial3(decls, firstToken.next,token);}
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public caseInner caseInner() throws ParseException {
        patr patr;
        expr expr;
        whereDecls whereDecls = null;
        patr patr1;
        caseInnerAlt caseInnerAlt;
        ArrayList<caseInnerAlt> caseInnerAltList = new ArrayList<caseInnerAlt>();
        whereDecls whereDecls1 = null;
        Token firstToken=token;
    if (jj_2_33(2147483647)) {
      patr = patr();
      jj_consume_token(OTHER7);
      expr = expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        whereDecls = whereDecls();
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
         {if (true) return new caseInner1(patr, expr, whereDecls, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER2:
      case OTHER4:
      case OTHER5:
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case INTEGER:
      case FLOAT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        patr1 = patr();
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALT:
            ;
            break;
          default:
            jj_la1[70] = jj_gen;
            break label_27;
          }
          caseInnerAlt = caseInnerAlt();
                                                  caseInnerAltList.add(caseInnerAlt);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHERE:
          whereDecls1 = whereDecls();
          break;
        default:
          jj_la1[71] = jj_gen;
          ;
        }
         {if (true) return new caseInner2(patr1, caseInnerAltList, whereDecls1, firstToken.next,token);}
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public caseInnerAlt caseInnerAlt() throws ParseException {
        expr expr;
        expr expr1;
        Token firstToken=token;
    jj_consume_token(ALT);
    expr = expr();
    jj_consume_token(OTHER7);
    expr1 = expr();
         {if (true) return new caseInnerAlt(expr, expr1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public patr patr() throws ParseException {
        patrMain patrMain;
        patrOp patrOp;
        ArrayList<patrOp> patrOpList = new ArrayList<patrOp>();
        Token firstToken=token;
    patrMain = patrMain();
    label_28:
    while (true) {
      if (jj_2_34(2147483647)) {
        ;
      } else {
        break label_28;
      }
      patrOp = patrOp();
                                                                 patrOpList.add(patrOp);
    }
         {if (true) return new patr(patrMain, patrOpList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public patrOp patrOp() throws ParseException {
        qconop qconop;
        patr patr;
        Token firstToken=token;
    qconop = qconop();
    patr = patr();
         {if (true) return new patrOp(qconop, patr, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public patrMain patrMain() throws ParseException {
        naam naam;
        patroon patroon;
        ArrayList<patroon> patroonList = new ArrayList<patroon>();
        var var;
        Token t;
        ASTStringNode integer;
        patroon patroon1;
        Token firstToken=token;
    if (jj_2_35(2147483647)) {
      naam = naam();
      label_29:
      while (true) {
        patroon = patroon();
                                                                                patroonList.add(patroon);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OTHER2:
        case OTHER4:
        case OTHER5:
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case INTEGER:
        case FLOAT:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_29;
        }
      }
         {if (true) return new patrMain1(naam, patroonList, firstToken.next,token);}
    } else if (jj_2_36(2147483647)) {
      var = var();
      jj_consume_token(OTHER8);
      t = jj_consume_token(INTEGER);
                                                                 integer=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new patrMain2(var, integer, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER2:
      case OTHER4:
      case OTHER5:
      case CONSTRUCTOR_ID:
      case VARIABLE_ID:
      case INTEGER:
      case FLOAT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LEFT_HPAREN:
      case LEFT_PAREN:
      case LEFT_BRACKET:
        patroon1 = patroon();
         {if (true) return new patrMain3(patroon1, firstToken.next,token);}
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public patroon patroon() throws ParseException {
        patroonPrefix patroonPrefix;
        ArrayList<patroonPrefix> patroonPrefixList = new ArrayList<patroonPrefix>();
        patroonMain patroonMain;
        Token firstToken=token;
    label_30:
    while (true) {
      if (jj_2_37(2147483647)) {
        ;
      } else {
        break label_30;
      }
      patroonPrefix = patroonPrefix();
                                                                  patroonPrefixList.add(patroonPrefix);
    }
    patroonMain = patroonMain();
         {if (true) return new patroon(patroonPrefixList, patroonMain, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public patroonPrefix patroonPrefix() throws ParseException {
        var var;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHER5:
      jj_consume_token(OTHER5);
         {if (true) return new patroonPrefix1(firstToken.next,token);}
      break;
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case LEFT_PAREN:
      var = var();
      jj_consume_token(OTHER3);
         {if (true) return new patroonPrefix2(var, firstToken.next,token);}
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public patroonMain patroonMain() throws ParseException {
        ASTTextNode text357 = null;
        literal literal;
        var var;
        naam naam;
        contrPatrParam contrPatrParam = null;
        patrList patrList = null;
        patrList patrList1 = null;
        patrList patrList2 = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHER4:
      jj_consume_token(OTHER4);
         {if (true) return new patroonMain1(firstToken.next,token);}
      break;
    case OTHER2:
    case INTEGER:
    case FLOAT:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER2:
        jj_consume_token(OTHER2);
              text357=new ASTTextNode("-",new WToken(token));
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      literal = literal();
         {if (true) return new patroonMain2(text357, literal, firstToken.next,token);}
      break;
    default:
      jj_la1[81] = jj_gen;
      if (jj_2_38(2147483647)) {
        var = var();
         {if (true) return new patroonMain3(var, firstToken.next,token);}
      } else if (jj_2_39(2147483647)) {
        naam = naam();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_CURLY:
          contrPatrParam = contrPatrParam();
          break;
        default:
          jj_la1[77] = jj_gen;
          ;
        }
         {if (true) return new constructorNaam(naam, contrPatrParam, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          jj_consume_token(LEFT_PAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OTHER2:
          case OTHER4:
          case OTHER5:
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case INTEGER:
          case FLOAT:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            patrList = patrList();
            break;
          default:
            jj_la1[78] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_PAREN);
         {if (true) return new patroonMain5(patrList, firstToken.next,token);}
          break;
        case LEFT_HPAREN:
          jj_consume_token(LEFT_HPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OTHER2:
          case OTHER4:
          case OTHER5:
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case INTEGER:
          case FLOAT:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            patrList1 = patrList();
            break;
          default:
            jj_la1[79] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_HPAREN);
         {if (true) return new patroonMain6(patrList1, firstToken.next,token);}
          break;
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OTHER2:
          case OTHER4:
          case OTHER5:
          case CONSTRUCTOR_ID:
          case VARIABLE_ID:
          case INTEGER:
          case FLOAT:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LEFT_HPAREN:
          case LEFT_PAREN:
          case LEFT_BRACKET:
            patrList2 = patrList();
            break;
          default:
            jj_la1[80] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_BRACKET);
         {if (true) return new patroonMain7(patrList2, firstToken.next,token);}
          break;
        default:
          jj_la1[82] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public patrList patrList() throws ParseException {
        patr patr;
        ArrayList<patr> list0=new ArrayList<patr>();
        patr patr1;
        ArrayList<patr> patr1List = new ArrayList<patr>();
        Token firstToken=token;
    patr = patr();
                    list0.add(patr);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_31;
      }
      jj_consume_token(COMMA);
      patr1 = patr();
                                                        list0.add(patr1);
    }
         {if (true) return new patrList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public contrPatrParam contrPatrParam() throws ParseException {
        contrPatrAssign contrPatrAssign;
        ArrayList<contrPatrAssign> list0=new ArrayList<contrPatrAssign>();
        contrPatrAssign contrPatrAssign1;
        ArrayList<contrPatrAssign> contrPatrAssign1List = new ArrayList<contrPatrAssign>();
        Token firstToken=token;
    jj_consume_token(LEFT_CURLY);
    contrPatrAssign = contrPatrAssign();
                                              list0.add(contrPatrAssign);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_32;
      }
      jj_consume_token(COMMA);
      contrPatrAssign1 = contrPatrAssign();
                                                                                                                   list0.add(contrPatrAssign1);
    }
    jj_consume_token(RIGHT_CURLY);
         {if (true) return new contrPatrParam(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public contrPatrAssign contrPatrAssign() throws ParseException {
        var var;
        patr patr;
        Token firstToken=token;
    var = var();
    jj_consume_token(EQUALS);
    patr = patr();
         {if (true) return new contrPatrAssign(var, patr, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public type type() throws ParseException {
        naam naam;
        Token t;
        ASTStringNode variable_id;
        functiontypeList functiontypeList = null;
        functiontypeList functiontypeList1 = null;
        functiontype functiontype;
        Token firstToken=token;
    if (jj_2_40(2147483647)) {
      naam = naam();
         {if (true) return new type1(naam, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE_ID:
        t = jj_consume_token(VARIABLE_ID);
                        variable_id=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new type2(variable_id, firstToken.next,token);}
        break;
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          functiontypeList = functiontypeList();
          break;
        default:
          jj_la1[85] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PAREN);
         {if (true) return new type3(functiontypeList, firstToken.next,token);}
        break;
      case LEFT_HPAREN:
        jj_consume_token(LEFT_HPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          functiontypeList1 = functiontypeList();
          break;
        default:
          jj_la1[86] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_HPAREN);
         {if (true) return new type4(functiontypeList1, firstToken.next,token);}
        break;
      case LEFT_BRACKET:
        jj_consume_token(LEFT_BRACKET);
        functiontype = functiontype();
        jj_consume_token(RIGHT_BRACKET);
         {if (true) return new type5(functiontype, firstToken.next,token);}
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public functiontypeList functiontypeList() throws ParseException {
        functiontype functiontype;
        ArrayList<functiontype> list0=new ArrayList<functiontype>();
        functiontype functiontype1;
        ArrayList<functiontype> functiontype1List = new ArrayList<functiontype>();
        Token firstToken=token;
    functiontype = functiontype();
                                    list0.add(functiontype);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_33;
      }
      jj_consume_token(COMMA);
      functiontype1 = functiontype();
                                                                                                list0.add(functiontype1);
    }
         {if (true) return new functiontypeList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public functiontype functiontype() throws ParseException {
        paramtype paramtype;
        ArrayList<paramtype> list0=new ArrayList<paramtype>();
        paramtype paramtype1;
        ArrayList<paramtype> paramtype1List = new ArrayList<paramtype>();
        Token firstToken=token;
    paramtype = paramtype();
                              list0.add(paramtype);
    label_34:
    while (true) {
      if (jj_2_41(2147483647)) {
        ;
      } else {
        break label_34;
      }
      jj_consume_token(OTHER7);
      paramtype1 = paramtype();
                                                                                                              list0.add(paramtype1);
    }
         {if (true) return new functiontype(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public paramtype paramtype() throws ParseException {
        type type;
        ArrayList<type> typeList = new ArrayList<type>();
        Token firstToken=token;
    label_35:
    while (true) {
      type = type();
                                       typeList.add(type);
      if (jj_2_42(2147483647)) {
        ;
      } else {
        break label_35;
      }
    }
         {if (true) return new paramtype(typeList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public context context() throws ParseException {
        klasse klasse;
        klasse klasse1;
        ArrayList<klasse> list2=new ArrayList<klasse>();
        klasse klasse2;
        ArrayList<klasse> klasse2List = new ArrayList<klasse>();
        Token firstToken=token;
    if (jj_2_43(2147483647)) {
      klasse = klasse();
      jj_consume_token(CONTEXT_ARROW);
         {if (true) return new context1(klasse, firstToken.next,token);}
    } else if (jj_2_44(2)) {
      jj_consume_token(LEFT_PAREN);
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(CONTEXT_ARROW);
         {if (true) return new context2(firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        klasse1 = klasse();
                             list2.add(klasse1);
        label_36:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[89] = jj_gen;
            break label_36;
          }
          jj_consume_token(COMMA);
          klasse2 = klasse();
                                                                        list2.add(klasse2);
        }
        jj_consume_token(RIGHT_PAREN);
        jj_consume_token(CONTEXT_ARROW);
         {if (true) return new context3(list2, firstToken.next,token);}
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public klasse klasse() throws ParseException {
        naam naam;
        klasseTypeVar klasseTypeVar;
        ArrayList<klasseTypeVar> klasseTypeVarList = new ArrayList<klasseTypeVar>();
        Token firstToken=token;
    naam = naam();
    label_37:
    while (true) {
      klasseTypeVar = klasseTypeVar();
                                                   klasseTypeVarList.add(klasseTypeVar);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE_ID:
      case LEFT_PAREN:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_37;
      }
    }
         {if (true) return new klasse(naam, klasseTypeVarList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public klasseTypeVar klasseTypeVar() throws ParseException {
        Token t;
        ASTStringNode variable_id;
        type type;
        ArrayList<type> typeList = new ArrayList<type>();
        ASTStringNode variable_id1;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      t = jj_consume_token(VARIABLE_ID);
                            variable_id=new ASTStringNode(t.image,new WToken(t));
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
        case LEFT_HPAREN:
        case LEFT_PAREN:
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[92] = jj_gen;
          break label_38;
        }
        type = type();
                                                                                                typeList.add(type);
      }
      jj_consume_token(RIGHT_PAREN);
         {if (true) return new klasseTypeVar1(variable_id, typeList, firstToken.next,token);}
      break;
    case VARIABLE_ID:
      t = jj_consume_token(VARIABLE_ID);
                        variable_id1=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new klasseTypeVar2(variable_id1, firstToken.next,token);}
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public varList varList() throws ParseException {
        var var;
        ArrayList<var> list0=new ArrayList<var>();
        var var1;
        ArrayList<var> var1List = new ArrayList<var>();
        Token firstToken=token;
    var = var();
                  list0.add(var);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_39;
      }
      jj_consume_token(COMMA);
      var1 = var();
                                                   list0.add(var1);
    }
         {if (true) return new varList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public var var() throws ParseException {
        ModuleNaamPrefix moduleNaamPrefix = null;
        varMain varMain;
        Token firstToken=token;
    if (jj_2_45(2147483647)) {
      moduleNaamPrefix = ModuleNaamPrefix();
    } else {
      ;
    }
    varMain = varMain();
         {if (true) return new var(moduleNaamPrefix, varMain, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public varMain varMain() throws ParseException {
        Token t;
        ASTStringNode variable_id;
        varsym varsym;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE_ID:
      t = jj_consume_token(VARIABLE_ID);
                        variable_id=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new varMain1(variable_id, firstToken.next,token);}
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      varsym = varsym();
      jj_consume_token(RIGHT_PAREN);
         {if (true) return new varMain2(varsym, firstToken.next,token);}
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public naamList naamList() throws ParseException {
        naam naam;
        ArrayList<naam> list0=new ArrayList<naam>();
        naam naam1;
        ArrayList<naam> naam1List = new ArrayList<naam>();
        Token firstToken=token;
    naam = naam();
                    list0.add(naam);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[96] = jj_gen;
        break label_40;
      }
      jj_consume_token(COMMA);
      naam1 = naam();
                                                        list0.add(naam1);
    }
         {if (true) return new naamList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public naam naam() throws ParseException {
        qcon qcon;
        Token firstToken=token;
    qcon = qcon();
         {if (true) return new naam(qcon, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public qcon qcon() throws ParseException {
        qconid qconid;
        gconsym gconsym;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRUCTOR_ID:
      qconid = qconid();
         {if (true) return new qcon1(qconid, firstToken.next,token);}
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      gconsym = gconsym();
      jj_consume_token(RIGHT_PAREN);
         {if (true) return new qcon2(gconsym, firstToken.next,token);}
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public operatorList operatorList() throws ParseException {
        operator operator;
        ArrayList<operator> list0=new ArrayList<operator>();
        operator operator1;
        ArrayList<operator> operator1List = new ArrayList<operator>();
        Token firstToken=token;
    operator = operator();
                            list0.add(operator);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_41;
      }
      jj_consume_token(COMMA);
      operator1 = operator();
                                                                            list0.add(operator1);
    }
         {if (true) return new operatorList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public operator operator() throws ParseException {
        qop qop;
        Token firstToken=token;
    qop = qop();
         {if (true) return new operator(qop, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public op op() throws ParseException {
        varop varop;
        conop conop;
        otherOperators otherOperators;
        Token firstToken=token;
    if (jj_2_46(2147483647)) {
      varop = varop();
         {if (true) return new op1(varop, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INFIX_QUOTE:
      case CONSYM:
        conop = conop();
         {if (true) return new op2(conop, firstToken.next,token);}
        break;
      case OTHER1:
      case OTHER2:
      case OTHER4:
      case OTHER8:
        otherOperators = otherOperators();
         {if (true) return new op3(otherOperators, firstToken.next,token);}
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public qop qop() throws ParseException {
        qvarop qvarop;
        qconop qconop;
        ModuleNaamPrefix moduleNaamPrefix = null;
        otherOperators otherOperators;
        Token firstToken=token;
    if (jj_2_48(2147483647)) {
      qvarop = qvarop();
         {if (true) return new qop1(qvarop, firstToken.next,token);}
    } else if (jj_2_49(2147483647)) {
      qconop = qconop();
         {if (true) return new qop2(qconop, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER1:
      case OTHER2:
      case OTHER4:
      case OTHER8:
      case CONSTRUCTOR_ID:
        if (jj_2_47(2147483647)) {
          moduleNaamPrefix = ModuleNaamPrefix();
        } else {
          ;
        }
        otherOperators = otherOperators();
         {if (true) return new qop3(moduleNaamPrefix, otherOperators, firstToken.next,token);}
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public varop varop() throws ParseException {
        varsym varsym;
        Token t;
        ASTStringNode variable_id;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHER1:
    case OTHER2:
    case OTHER4:
    case OTHER8:
    case VARSYM:
      varsym = varsym();
         {if (true) return new varop1(varsym, firstToken.next,token);}
      break;
    case INFIX_QUOTE:
      jj_consume_token(INFIX_QUOTE);
      t = jj_consume_token(VARIABLE_ID);
                            variable_id=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(INFIX_QUOTE);
         {if (true) return new varop2(variable_id, firstToken.next,token);}
      break;
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public qvarop qvarop() throws ParseException {
        qvarid qvarid;
        qvarsym qvarsym;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INFIX_QUOTE:
      jj_consume_token(INFIX_QUOTE);
      qvarid = qvarid();
      jj_consume_token(INFIX_QUOTE);
         {if (true) return new qvarop1(qvarid, firstToken.next,token);}
      break;
    case OTHER1:
    case OTHER2:
    case OTHER4:
    case OTHER8:
    case CONSTRUCTOR_ID:
    case VARSYM:
      qvarsym = qvarsym();
         {if (true) return new qvarop2(qvarsym, firstToken.next,token);}
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public conop conop() throws ParseException {
        Token t;
        ASTStringNode consym;
        ASTStringNode constructor_id;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSYM:
      t = jj_consume_token(CONSYM);
                   consym=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new conop1(consym, firstToken.next,token);}
      break;
    case INFIX_QUOTE:
      jj_consume_token(INFIX_QUOTE);
      t = jj_consume_token(CONSTRUCTOR_ID);
                               constructor_id=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(INFIX_QUOTE);
         {if (true) return new conop2(constructor_id, firstToken.next,token);}
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public qconop qconop() throws ParseException {
        qconid qconid;
        gconsym gconsym;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INFIX_QUOTE:
      jj_consume_token(INFIX_QUOTE);
      qconid = qconid();
      jj_consume_token(INFIX_QUOTE);
         {if (true) return new qconop1(qconid, firstToken.next,token);}
      break;
    case OTHER6:
    case CONSTRUCTOR_ID:
    case CONSYM:
      gconsym = gconsym();
         {if (true) return new qconop2(gconsym, firstToken.next,token);}
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public qvarsym qvarsym() throws ParseException {
        ModuleNaamPrefix moduleNaamPrefix = null;
        varsym varsym;
        Token firstToken=token;
    if (jj_2_50(2147483647)) {
      moduleNaamPrefix = ModuleNaamPrefix();
    } else {
      ;
    }
    varsym = varsym();
         {if (true) return new qvarsym(moduleNaamPrefix, varsym, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public qvarid qvarid() throws ParseException {
        ModuleNaamPrefix moduleNaamPrefix = null;
        Token t;
        ASTStringNode variable_id;
        Token firstToken=token;
    if (jj_2_51(2147483647)) {
      moduleNaamPrefix = ModuleNaamPrefix();
    } else {
      ;
    }
    t = jj_consume_token(VARIABLE_ID);
                                                                                            variable_id=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new qvarid(moduleNaamPrefix, variable_id, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public qconsym qconsym() throws ParseException {
        ModuleNaamPrefix moduleNaamPrefix = null;
        Token t;
        ASTStringNode consym;
        Token firstToken=token;
    if (jj_2_52(2147483647)) {
      moduleNaamPrefix = ModuleNaamPrefix();
    } else {
      ;
    }
    t = jj_consume_token(CONSYM);
                                                                                       consym=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new qconsym(moduleNaamPrefix, consym, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public qconid qconid() throws ParseException {
        ModuleNaamPrefix moduleNaamPrefix = null;
        Token t;
        ASTStringNode constructor_id;
        Token firstToken=token;
    if (jj_2_53(2147483647)) {
      moduleNaamPrefix = ModuleNaamPrefix();
    } else {
      ;
    }
    t = jj_consume_token(CONSTRUCTOR_ID);
                                                                                               constructor_id=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new qconid(moduleNaamPrefix, constructor_id, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public gconsym gconsym() throws ParseException {
        qconsym qconsym;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHER6:
      jj_consume_token(OTHER6);
         {if (true) return new gconsym1(firstToken.next,token);}
      break;
    case CONSTRUCTOR_ID:
    case CONSYM:
      qconsym = qconsym();
         {if (true) return new gconsym2(qconsym, firstToken.next,token);}
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public varsym varsym() throws ParseException {
        Token t;
        ASTStringNode varsym;
        otherOperators otherOperators;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARSYM:
      t = jj_consume_token(VARSYM);
                   varsym=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new varsym1(varsym, firstToken.next,token);}
      break;
    case OTHER1:
    case OTHER2:
    case OTHER4:
    case OTHER8:
      otherOperators = otherOperators();
         {if (true) return new varsym2(otherOperators, firstToken.next,token);}
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ModuleNaamPrefix ModuleNaamPrefix() throws ParseException {
        Token t;
        ASTStringNode constructor_id;
        ASTStringNode constructor_id1;
        ArrayList<ASTStringNode> constructor_id1List = new ArrayList<ASTStringNode>();
        Token firstToken=token;
    t = jj_consume_token(CONSTRUCTOR_ID);
                           constructor_id=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(OTHER1);
    label_42:
    while (true) {
      if (jj_2_54(2147483647)) {
        ;
      } else {
        break label_42;
      }
      t = jj_consume_token(CONSTRUCTOR_ID);
                                                                                                                                             constructor_id1=new ASTStringNode(t.image,new WToken(t));
                                                                                                                                                                                                        constructor_id1List.add(constructor_id1);
      jj_consume_token(OTHER1);
    }
         {if (true) return new ModuleNaamPrefix(constructor_id, constructor_id1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public otherOperators otherOperators() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHER8:
      jj_consume_token(OTHER8);
         {if (true) return new otherOperators1(firstToken.next,token);}
      break;
    case OTHER1:
      jj_consume_token(OTHER1);
         {if (true) return new otherOperators2(firstToken.next,token);}
      break;
    case OTHER2:
      jj_consume_token(OTHER2);
         {if (true) return new otherOperators3(firstToken.next,token);}
      break;
    case OTHER4:
      jj_consume_token(OTHER4);
         {if (true) return new otherOperators4(firstToken.next,token);}
      break;
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public literal literal() throws ParseException {
        Token t;
        ASTStringNode integer;
        ASTStringNode float_kw;
        ASTStringNode character_literal;
        ASTStringNode string_literal;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
                    integer=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new literal1(integer, firstToken.next,token);}
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
                  float_kw=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new literal2(float_kw, firstToken.next,token);}
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                              character_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new literal3(character_literal, firstToken.next,token);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new literal4(string_literal, firstToken.next,token);}
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  final private boolean jj_3R_198() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(OTHER4)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(LEFT_CURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(OTHER4)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(OTHER2)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(OTHER1)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(OTHER8)) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(OTHER3)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(OTHER5)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(CONSTRUCTOR_ID)) return true;
    if (jj_scan_token(OTHER1)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(OTHER8)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(DERIVING)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_46()) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(VARSYM)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(OTHER8)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    return false;
  }

  final private boolean jj_3_12() {
    Token xsp;
    if (jj_3R_49()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_46()) return true;
    Token xsp;
    if (jj_3R_144()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(LEFT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(OTHER6)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    }
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) jj_scanpos = xsp;
    if (jj_scan_token(CONSTRUCTOR_ID)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_59()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) jj_scanpos = xsp;
    if (jj_scan_token(CONSYM)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(OTHER7)) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_scan_token(ALT)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(OTHER7)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE_ID)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_197()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_198()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(OTHER7)) return true;
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    return false;
  }

  final private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(OTHER10)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(INFIX_QUOTE)) return true;
    if (jj_3R_135()) return true;
    if (jj_scan_token(INFIX_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(OTHER10)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_3R_181()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_247()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(INFIX_QUOTE)) return true;
    if (jj_3R_139()) return true;
    if (jj_scan_token(INFIX_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_scan_token(OTHER12)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(INFIX_QUOTE)) return true;
    if (jj_scan_token(VARIABLE_ID)) return true;
    if (jj_scan_token(INFIX_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_181()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_182()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_55()) return true;
    if (jj_scan_token(ALT)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_244()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) jj_scanpos = xsp;
    if (jj_scan_token(OTHER12)) return true;
    xsp = jj_scanpos;
    if (jj_3R_243()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_55()) return true;
    if (jj_scan_token(ALT)) return true;
    if (jj_3R_241()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_226()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(OTHER12)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_50()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_224()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(LEFT_CURLY)) return true;
    if (jj_3R_156()) return true;
    if (jj_scan_token(RIGHT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(MODULE)) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_155()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_scan_token(LEFT_CURLY)) return true;
    if (jj_3R_153()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_154()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_246()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(OTHER9)) return true;
    Token xsp;
    if (jj_3R_152()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(OTHER7)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(OTHER2)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_177()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    Token xsp;
    if (jj_3R_151()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_151()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_136()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(IMPORT)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(OFTYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_138()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(VARIABLE_ID)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_213()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_213()) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(OTHER7)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(LEFT_CURLY)) return true;
    if (jj_3R_224()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_225()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_215()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_214()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(VARIABLE_ID)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_55()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_214()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(VARIABLE_ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_184()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(OTHER7)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(LEFT_HPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_HPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_50()) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_55()) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_146()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_3R_62()) return true;
    if (jj_scan_token(CONTEXT_ARROW)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_46()) return true;
    Token xsp;
    if (jj_3R_98()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_177() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_scan_token(CONTEXT_ARROW)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_scan_token(CONTEXT_ARROW)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_62()) return true;
    if (jj_scan_token(CONTEXT_ARROW)) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_45()) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_245()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_54()) return true;
    if (jj_3R_50()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_245()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    Token xsp;
    if (jj_3R_97()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    Token xsp;
    if (jj_3R_115()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_45()) return true;
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_scan_token(CONSTRUCTOR_ID)) return true;
    if (jj_scan_token(OTHER1)) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_166()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(ALT)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(ALT)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(LEFT_HPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_HPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(CONSTRUCTOR_ID)) return true;
    if (jj_scan_token(OTHER1)) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_scan_token(INFIXR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(OFTYPE)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(INFIXL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(ALT)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(VARIABLE_ID)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(INFIX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_53()) return true;
    Token xsp;
    if (jj_3R_235()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_235()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_236()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(OFTYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_51()) return true;
    Token xsp;
    if (jj_3R_231()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_231()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_232()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_211() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(LEFT_CURLY)) return true;
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_186()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_187()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_3R_211()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_212()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(LEFT_HPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_HPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(OTHER2)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    return false;
  }

  public HaskellParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[109];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2,0x0,0x41c03f00,0x8,0x0,0x2,0x0,0x10,0x40,0x80,0x80,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x4,0x4,0x41c03f00,0x0,0x8000000,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x41c00000,0x0,0x4,0x8000000,0x4,0x4,0x8000000,0x4,0x0,0x0,0x0,0x1c00000,0x40000000,0x40000000,0x40000000,0x0,0x0,0x400b4000,0x400b4000,0x400b4000,0x0,0x0,0x0,0x0,0x40000000,0x0,0x400b4000,0x0,0x0,0x400b4000,0x0,0x400b4000,0x0,0x0,0x4000,0x4,0x8000000,0x4,0x40000000,0x40000000,0x40000000,0x0,0x40000000,0x0,0x40000000,0x40000000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x60000000,0x60000000,0x60000000,0x0,0x0,0x0,0x60000000,0x60000000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0xc78003,0x0,0x0,0x18000,0x0,0x0,0x0,0x0,0x0,0x18000,0x0,0x8000,0x18000,0x0,0x0,0x18000,0x0,0x0,0x0,0x18000,0x0,0x0,0xc78003,0x18000,0x0,0x0,0x18000,0x18000,0x8000,0x0,0x18000,0x18000,0xc78003,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x20000,0x0,0xc78003,0xc78003,0xc78003,0x0,0x0,0xc78020,0xc78020,0xc78020,0xc60000,0x0,0x0,0xc78000,0xc78003,0x0,0xc78020,0x0,0x0,0xc78020,0x0,0xc78020,0x0,0x0,0x0,0x0,0x0,0x0,0xc78003,0xc78003,0xc78003,0x18002,0x0,0x0,0xc78003,0xc78003,0xc78003,0xc60001,0x0,0x0,0x0,0x18000,0x18000,0x10000,0x0,0x0,0x0,0x10000,0x18000,0x10000,0x0,0x10000,0x0,0x8000,0x0,0x11,0x8011,0x11,0x8011,0x0,0x8004,0x8004,0x11,0x11,0xc60000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x10,0x2a0,0x0,0x80,0x80,0x800,0x0,0x0,0x80,0x0,0x80,0x80,0x80,0x80,0x80,0x800,0x80,0x10,0x0,0x0,0x80,0x0,0x0,0x2a0,0x80,0x0,0x800,0x2a0,0x2a0,0x80,0x0,0x2a4,0x2a0,0x2a0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2a0,0x2a0,0x2a0,0x4,0x4,0x2a0,0x2a0,0x2a0,0x0,0x2a0,0x800,0x2a0,0x2a0,0x10,0x2a0,0x800,0x800,0x2a0,0x800,0x2a0,0x10,0x800,0x0,0x0,0x0,0x0,0x2a0,0x2a0,0x2a0,0x80,0x0,0x4,0x2a0,0x2a0,0x2a0,0x0,0x2a0,0x800,0x800,0x2a0,0x2a0,0x2a0,0x800,0x800,0x80,0x80,0x2a0,0x80,0x800,0x80,0x800,0x80,0x800,0x5000,0x0,0x3000,0x3000,0x5000,0x5000,0x4000,0x2000,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[54];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public HaskellParser(CharStream stream) {
    token_source = new HaskellParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public HaskellParser(HaskellParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(HaskellParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[82];
    for (int i = 0; i < 82; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 109; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 82; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 54; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
