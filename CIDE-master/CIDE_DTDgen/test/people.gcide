options{
  STATIC = false;
}
PARSER_BEGIN(PeopleParser)
package tmp.generated_people;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

public class PeopleParser{
}
PARSER_END(PeopleParser)




<*> TOKEN :
{
  <#ALPHA_CHAR: ["a"-"z", "A"-"Z"] >
| <#NUM_CHAR:   ["0"-"9"] >
| <#ALPHANUM_CHAR: [ "a"-"z", "A"-"Z", "0"-"9" ] >
| <#IDENTIFIER_CHAR: [ "a"-"z", "A"-"Z", "0"-"9", "_", "-", "." ] >
| <#IDENTIFIER: <ALPHA_CHAR> (<IDENTIFIER_CHAR>)* >
| <#QUOTED_STRING_NB: ( "'" ( ~["'", "\r", "\n"] )* "'" ) 
                    | ( "\"" ( ~["\"", "\r", "\n"] )* "\"" ) >
| <#QUOTED_STRING: ( "'" ( ~["'"] )* "'" ) | ( "\"" ( ~["\""] )* "\"" ) >
| <#WHITESPACE: ( " " | "\t" | "\n" | "\r" ) >
| <#NEWLINE:    ( "\r\n" | "\r" | "\n" ) >
| <#QUOTE:      ( "'" | "\"" )>
}

<DEFAULT> TOKEN : 
{
  <XMLOPEN:"<?xml">				: LexElement_Inside
| <SELEMENT_START:      "<"       > : LexElement_Start
| <EELEMENT_START:      "</"       > : LexElement_Start
| <PI_START:      "<?"       > : LexPI
| <COMMENT_START:  "<!--"    > : LexComment
| <CDSTART: 		"<![CDATA["> : LexCDATA
//| <DECL_START:     "<!"      > : LexDecl
| <PCDATA:         ( ~["<"] )+ >
}

<LexElement_Start> TOKEN :
{
  <E_people_list: "people_list" > : LexElement_Inside
| <E_person: "person" > : LexElement_Inside
| <E_name: "name" > : LexElement_Inside
| <E_birthdate: "birthdate" > : LexElement_Inside
| <E_gender: "gender" > : LexElement_Inside
| <E_socialsecuritynumber: "socialsecuritynumber" > : LexElement_Inside

}

<LexElement_Inside> SPECIAL_TOKEN :
{
  < (<WHITESPACE>)+ >
}

<LexElement_Inside> TOKEN :
{
  <ATTR_NAME: <IDENTIFIER> >		
| <ELEMENT_END: ">" >                       : DEFAULT
| <QEND: "?>" >                     		: DEFAULT
| <SLASHEND: "/>" >                       
| <ATTR_EQ: "=" >                       
| <ATTR_VAL: <QUOTED_STRING>>			
}


<LexComment> MORE : { <~[] > } 
<LexComment> TOKEN : 
{
  < COMMENT_END:  "-->" > : DEFAULT 
}

<LexPI> MORE : { <~[] > } 
<LexPI> TOKEN : 
{
  < PI_END:  "?>" > : DEFAULT 
}

<LexCDATA> MORE : { <~[] > } 
<LexCDATA> TOKEN : 
{
  < CDEND:  "]]>" > : DEFAULT 
}

//<LexDecl> MORE : { <~[] > } 
//<LexDecl> TOKEN : 
//{
//  < DECLEND:  ">" > : DEFAULT 
//}

GRAMMARSTART

//fixed
Document: Prolog RootElement (Misc)*;
Misc: Comment | Whitespace | PI;
PI: "<?" <PI_END>;
Prolog: XMLDecl (Misc)*;
XMLDecl	   : "<?xml" (Attribute)+ "!<QEND>?>";
CDSect	   :  	"<![CDATA[" <CDEND>;
Comment: "<!--"  <COMMENT_END>;
//Reference	   :   	EntityRef | <CHARREF>;
//EntityRef	   :  	"&" Name ";";
Attribute :	@~ <ATTR_NAME> "!<ATTR_EQ>=" <ATTR_VAL>;
Whitespace: LOOK_AHEAD("{getToken(1).image.trim().equals(\"\")}") <PCDATA>;
CMisc: PI | Comment | Whitespace;

RootElement: Element_people_list;

Element_people_list:
	  LL("EmptyTag_people_list()") EmptyTag_people_list (CMisc)*
	| STag_people_list (CMisc)* Content_people_list_Seq1  ETag_people_list (CMisc)*;
EmptyTag_people_list: "<" "!<E_people_list>people_list" (Attribute)* "!<SLASHEND>/>";
STag_people_list : "<" "!<E_people_list>people_list" (Attribute)* "!<ELEMENT_END>>";
ETag_people_list: "</" "!<E_people_list>people_list"<NONE> "!<ELEMENT_END>>";
Content_people_list_Seq1: ( LL(2) Element_person )*;


Element_person:
	  LL("EmptyTag_person()") EmptyTag_person (CMisc)*
	| STag_person (CMisc)* Content_person_Seq1  ETag_person (CMisc)*;
EmptyTag_person: "<" "!<E_person>person" (Attribute)* "!<SLASHEND>/>";
STag_person : "<" "!<E_person>person" (Attribute)* "!<ELEMENT_END>>";
ETag_person: "</" "!<E_person>person"<NONE> "!<ELEMENT_END>>";
Content_person_Seq1: Element_name [ LL(2) Element_birthdate ] [ LL(2) Element_gender ] [ LL(2) Element_socialsecuritynumber ];


Element_name:
	  LL("EmptyTag_name()") EmptyTag_name (CMisc)*
	| STag_name (CMisc)* Content_name_Seq1  ETag_name (CMisc)*;
EmptyTag_name: "<" "!<E_name>name" (Attribute)* "!<SLASHEND>/>";
STag_name : "<" "!<E_name>name" (Attribute)* "!<ELEMENT_END>>";
ETag_name: "</" "!<E_name>name"<NONE> "!<ELEMENT_END>>";
Content_name_Seq1: <PCDATA>;


Element_birthdate:
	  LL("EmptyTag_birthdate()") EmptyTag_birthdate (CMisc)*
	| STag_birthdate (CMisc)* Content_birthdate_Seq1  ETag_birthdate (CMisc)*;
EmptyTag_birthdate: "<" "!<E_birthdate>birthdate" (Attribute)* "!<SLASHEND>/>";
STag_birthdate : "<" "!<E_birthdate>birthdate" (Attribute)* "!<ELEMENT_END>>";
ETag_birthdate: "</" "!<E_birthdate>birthdate"<NONE> "!<ELEMENT_END>>";
Content_birthdate_Seq1: <PCDATA>;


Element_gender:
	  LL("EmptyTag_gender()") EmptyTag_gender (CMisc)*
	| STag_gender (CMisc)* Content_gender_Seq1  ETag_gender (CMisc)*;
EmptyTag_gender: "<" "!<E_gender>gender" (Attribute)* "!<SLASHEND>/>";
STag_gender : "<" "!<E_gender>gender" (Attribute)* "!<ELEMENT_END>>";
ETag_gender: "</" "!<E_gender>gender"<NONE> "!<ELEMENT_END>>";
Content_gender_Seq1: <PCDATA>;


Element_socialsecuritynumber:
	  LL("EmptyTag_socialsecuritynumber()") EmptyTag_socialsecuritynumber (CMisc)*
	| STag_socialsecuritynumber (CMisc)* Content_socialsecuritynumber_Seq1  ETag_socialsecuritynumber (CMisc)*;
EmptyTag_socialsecuritynumber: "<" "!<E_socialsecuritynumber>socialsecuritynumber" (Attribute)* "!<SLASHEND>/>";
STag_socialsecuritynumber : "<" "!<E_socialsecuritynumber>socialsecuritynumber" (Attribute)* "!<ELEMENT_END>>";
ETag_socialsecuritynumber: "</" "!<E_socialsecuritynumber>socialsecuritynumber"<NONE> "!<ELEMENT_END>>";
Content_socialsecuritynumber_Seq1: <PCDATA>;


Content_Any: LL(2) Element_people_list | LL(2) Element_person | LL(2) Element_name | LL(2) Element_birthdate | LL(2) Element_gender | LL(2) Element_socialsecuritynumber;



//Element	   :  	LOOK_AHEAD("EmptyElemTag()") EmptyElemTag 
//			| STag (Content)* ETag;
//			
//EmptyElemTag	   :   	"<" <ELEMENT_ID> (Attribute)* "!<SLASHEND>/>";
//STag : "<" <ELEMENT_ID> (Attribute)* "!<ELEMENT_END>>";
//Attribute :	@~ <ATTR_NAME> "!<ATTR_EQ>=" <ATTR_VAL>;
//ETag: "</" <ELEMENT_ID> "!<ELEMENT_END>>";
//
//Content:   
//	  Element 
////	| Reference 
//	| Comment 
//	| CDSect
//	| <PCDATA> 
//;

  
