/**
 * name:            DTDParser.jj
 * modified:        Apr 2, 2001
 * author:          John Gebbie
 * email:           j_gebbie@yahoo.com
 */

options {
	DEBUG_PARSER = false;
}

PARSER_BEGIN(DTDParser)
package tmp.generated_dtd;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

  public class DTDParser{

   
  }

PARSER_END(DTDParser)

TOKEN :
{
	<#LETTER:	[ "A"-"Z", "a"-"z" ]					>
|	<#DIGIT:		[ "0"-"9" ]						>
|	<#NAMECHAR:	( <LETTER> | <DIGIT> | "." | "-" | "_" | ":" )		>
|	<FIXED:		"#FIXED"						>
|	<IMPLIED:	"#IMPLIED"						>
|	<PCDATA:	"#PCDATA"						>
|	<REQUIRED:	"#REQUIRED"						>
|	<CDATA:		"CDATA"							>
|	<ANY:		"ANY"							>
|	<EMPTY:		"EMPTY"							>
|	<ID:		"ID"							>
|	<IDREF:		"IDREF"							>
|	<IDREFS:	"IDREFS"						>
|	<ENTITY:	"ENTITY"						>
|	<ENTITIES:	"ENTITIES"						>
|	<NMTOKEN:	"NMTOKEN"						>
|	<NMTOKENS:	"NMTOKENS"						>
|	<NOTATION:	"NOTATION"						>
|	<OB:	"("						>
|	<CB:	")"						>
|	<POB:	"<"						>
|	<PCB:	">"						>
|	<STAR:	"*"						>
|	<PLUS:	"+"						>
|	<Q:	"?"						>
|	<NAME:		( <LETTER> | "_" | ":" ) ( <NAMECHAR> )*		>
|	<QUOTEDSTR:	( "'" (~["'"])* "'" ) | (  "\"" (~["\""])* "\"")	>
}

SKIP :
{
	<	( " " | "\t" | "\n" | "\r" )+					>
		// comment decl updated by Gagandeep Bhatia [mailto:gagan@ebprovider.com]
|	<	"<!--" ( ~["-"] | ( "-" ~["-"] ) )* "-->"			>
|	<	"<?"   (~[">"])* ">"						>
}
DTD DTD() : { 
	DTDEntry dTDEntry;
	ArrayList<DTDEntry> dTDEntryList = new ArrayList<DTDEntry>();
	Token t;
	ASTStringNode eof;
	Token firstToken=token;
} { (
	(dTDEntry=DTDEntry(){dTDEntryList.add(dTDEntry);})* t=<EOF>{eof=new ASTStringNode(t.toString(),new WToken(token));} 
	{return new DTD(dTDEntryList, eof, firstToken.next,token);}
 ) }

DTDEntry DTDEntry() : { 
	ElementDecl elementDecl;
	AttListDecl attListDecl;
	Token firstToken=token;
} { (
	elementDecl=ElementDecl() 
	{return new DTDEntry1(elementDecl, firstToken.next,token);} |
	attListDecl=AttListDecl() 
	{return new DTDEntry2(attListDecl, firstToken.next,token);}
 ) }

ElementDecl ElementDecl() : { 
	Token t;
	ASTStringNode name;
	ContentSpec contentSpec;
	Token firstToken=token;
} { (
	"<!ELEMENT" t=<NAME>{name=new ASTStringNode(t.toString(),new WToken(token));} contentSpec=ContentSpec() ">" 
	{return new ElementDecl(name, contentSpec, firstToken.next,token);}
 ) }

ContentSpec ContentSpec() : { 
	Children children;
	Token firstToken=token;
} { (
	"EMPTY"  
	{return new ContentSpec1(firstToken.next,token);} |
	"ANY"  
	{return new ContentSpec2(firstToken.next,token);} |
	children=Children() 
	{return new ContentSpec3(children, firstToken.next,token);}
 ) }

Children Children() : { 
	SeqOrChoice seqOrChoice;
	Modifier modifier = null;
	Token firstToken=token;
} { (
	seqOrChoice=SeqOrChoice() [modifier=Modifier()] 
	{return new Children(seqOrChoice, modifier, firstToken.next,token);}
 ) }

SeqOrChoice SeqOrChoice() : { 
	Choice choice;
	Seq seq;
	Token firstToken=token;
} { (
	LOOKAHEAD(Choice()) choice=Choice() 
	{return new SeqOrChoice1(choice, firstToken.next,token);} |
	seq=Seq() 
	{return new SeqOrChoice2(seq, firstToken.next,token);}
 ) }

Choice Choice() : { 
	Cp cp;
	ArrayList<Cp> list0=new ArrayList<Cp>();
	Cp cp1;
	ArrayList<Cp> cp1List = new ArrayList<Cp>();
	Token firstToken=token;
} { (
	"(" cp=Cp(){list0.add(cp);} ("|" cp1=Cp(){list0.add(cp1);})+ ")" 
	{return new Choice(list0, firstToken.next,token);}
 ) }

Seq Seq() : { 
	Cp cp;
	ArrayList<Cp> list0=new ArrayList<Cp>();
	Cp cp1;
	ArrayList<Cp> cp1List = new ArrayList<Cp>();
	Token firstToken=token;
} { (
	"(" cp=Cp(){list0.add(cp);} ("," cp1=Cp(){list0.add(cp1);})* ")" 
	{return new Seq(list0, firstToken.next,token);}
 ) }

Cp Cp() : { 
	Token t;
	ASTStringNode name;
	Modifier modifier = null;
	SeqOrChoice seqOrChoice;
	Modifier modifier1 = null;
	Token firstToken=token;
} { (
	"#PCDATA"  
	{return new Cp1(firstToken.next,token);} |
	t=<NAME>{name=new ASTStringNode(t.toString(),new WToken(token));} [modifier=Modifier()] 
	{return new Cp2(name, modifier, firstToken.next,token);} |
	seqOrChoice=SeqOrChoice() [modifier1=Modifier()] 
	{return new Cp3(seqOrChoice, modifier1, firstToken.next,token);}
 ) }

Modifier Modifier() : { 
	Token firstToken=token;
} { (
	"*"  
	{return new Modifier1(firstToken.next,token);} |
	"+"  
	{return new Modifier2(firstToken.next,token);} |
	"?"  
	{return new Modifier3(firstToken.next,token);}
 ) }

AttListDecl AttListDecl() : { 
	Token t;
	ASTStringNode name;
	AttribDef attribDef;
	ArrayList<AttribDef> attribDefList = new ArrayList<AttribDef>();
	Token firstToken=token;
} { (
	"<!ATTLIST" t=<NAME>{name=new ASTStringNode(t.toString(),new WToken(token));} (attribDef=AttribDef(){attribDefList.add(attribDef);})* ">" 
	{return new AttListDecl(name, attribDefList, firstToken.next,token);}
 ) }

AttribDef AttribDef() : { 
	Token t;
	ASTStringNode name;
	AttribType attribType;
	DefaultDecl defaultDecl;
	Token firstToken=token;
} { (
	t=<NAME>{name=new ASTStringNode(t.toString(),new WToken(token));} attribType=AttribType() defaultDecl=DefaultDecl() 
	{return new AttribDef(name, attribType, defaultDecl, firstToken.next,token);}
 ) }

AttribType AttribType() : { 
	StringType stringType;
	TokenizedType tokenizedType;
	EnumeratedType enumeratedType;
	Token firstToken=token;
} { (
	stringType=StringType() 
	{return new AttribType1(stringType, firstToken.next,token);} |
	tokenizedType=TokenizedType() 
	{return new AttribType2(tokenizedType, firstToken.next,token);} |
	enumeratedType=EnumeratedType() 
	{return new AttribType3(enumeratedType, firstToken.next,token);}
 ) }

StringType StringType() : { 
	Token firstToken=token;
} { (
	"CDATA"  
	{return new StringType(firstToken.next,token);}
 ) }

TokenizedType TokenizedType() : { 
	Token firstToken=token;
} { (
	"ID"  
	{return new TokenizedType1(firstToken.next,token);} |
	"IDREF"  
	{return new TokenizedType2(firstToken.next,token);} |
	"IDREFS"  
	{return new TokenizedType3(firstToken.next,token);} |
	"ENTITY"  
	{return new TokenizedType4(firstToken.next,token);} |
	"ENTITIES"  
	{return new TokenizedType5(firstToken.next,token);} |
	"NMTOKEN"  
	{return new TokenizedType6(firstToken.next,token);} |
	"NMTOKENS"  
	{return new TokenizedType7(firstToken.next,token);}
 ) }

EnumeratedType EnumeratedType() : { 
	NotationType notationType;
	Enumeration enumeration;
	Token firstToken=token;
} { (
	notationType=NotationType() 
	{return new EnumeratedType1(notationType, firstToken.next,token);} |
	enumeration=Enumeration() 
	{return new EnumeratedType2(enumeration, firstToken.next,token);}
 ) }

NotationType NotationType() : { 
	Token t;
	ASTStringNode name;
	ASTStringNode name1;
	ArrayList<ASTStringNode> name1List = new ArrayList<ASTStringNode>();
	Token firstToken=token;
} { (
	"NOTATION" "(" t=<NAME>{name=new ASTStringNode(t.toString(),new WToken(token));} ("|" t=<NAME>{name1=new ASTStringNode(t.toString(),new WToken(token));}{name1List.add(name1);})* ")" 
	{return new NotationType(name, name1List, firstToken.next,token);}
 ) }

Enumeration Enumeration() : { 
	Token t;
	ASTStringNode name;
	ASTStringNode name1;
	ArrayList<ASTStringNode> name1List = new ArrayList<ASTStringNode>();
	Token firstToken=token;
} { (
	"(" t=<NAME>{name=new ASTStringNode(t.toString(),new WToken(token));} ("|" t=<NAME>{name1=new ASTStringNode(t.toString(),new WToken(token));}{name1List.add(name1);})* ")" 
	{return new Enumeration(name, name1List, firstToken.next,token);}
 ) }

DefaultDecl DefaultDecl() : { 
	ASTTextNode text17 = null;
	AttribValue attribValue;
	Token firstToken=token;
} { (
	"#REQUIRED"  
	{return new DefaultDecl1(firstToken.next,token);} |
	"#IMPLIED"  
	{return new DefaultDecl2(firstToken.next,token);} |
	["#FIXED" {text17=new ASTTextNode("#FIXED",new WToken(token));}] attribValue=AttribValue() 
	{return new DefaultDecl3(text17, attribValue, firstToken.next,token);}
 ) }

AttribValue AttribValue() : { 
	Token t;
	ASTStringNode quotedstr;
	Token firstToken=token;
} { (
	t=<QUOTEDSTR>{quotedstr=new ASTStringNode(t.toString(),new WToken(token));} 
	{return new AttribValue(quotedstr, firstToken.next,token);}
 ) }

