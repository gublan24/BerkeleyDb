/* Generated By:JavaCC: Do not edit this line. JavaCCParser.java */
package tmp.generated_javacc;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

public class JavaCCParser implements JavaCCParserConstants {


  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  private boolean notTailOfExpansionUnit() {
    Token t;
    t = getToken(1);
    if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET) return false;
    return true;
  }

  final public javacc_input javacc_input() throws ParseException {
        javacc_options javacc_options = null;
        Token t;
        ASTStringNode identifier;
        CompilationUnit compilationUnit;
        ASTStringNode identifier1;
        production production;
        ArrayList<production> productionList = new ArrayList<production>();
        ASTStringNode eof;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _OPTIONS:
      javacc_options = javacc_options();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(_PARSER_BEGIN);
    jj_consume_token(LPAREN);
    t = jj_consume_token(IDENTIFIER);
                                                                            identifier=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(RPAREN);
    compilationUnit = CompilationUnit();
    jj_consume_token(_PARSER_END);
    jj_consume_token(LPAREN);
    t = jj_consume_token(IDENTIFIER);
                                                                                                                                                                                                        identifier1=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(RPAREN);
    label_1:
    while (true) {
      production = production();
                                                                                                                                                                                                                                                                                            productionList.add(production);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case VOID:
      case LT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    t = jj_consume_token(0);
                                                                                                                                                                                                                                                                                                                                       eof=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new javacc_input(javacc_options, identifier, compilationUnit, identifier1, productionList, eof, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public javacc_options javacc_options() throws ParseException {
        option_binding option_binding;
        ArrayList<option_binding> option_bindingList = new ArrayList<option_binding>();
        Token firstToken=token;
    jj_consume_token(_OPTIONS);
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      option_binding = option_binding();
                                                       option_bindingList.add(option_binding);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case STATIC:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(RBRACE);
         {if (true) return new javacc_options(option_bindingList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public option_binding option_binding() throws ParseException {
        OptionName optionName;
        OptionValue optionValue;
        Token firstToken=token;
    optionName = OptionName();
    jj_consume_token(ASSIGN);
    optionValue = OptionValue();
    jj_consume_token(SEMICOLON);
         {if (true) return new option_binding(optionName, optionValue, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public OptionName OptionName() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new OptionName1(identifier, firstToken.next,token);}
      break;
    case _LOOKAHEAD:
      jj_consume_token(_LOOKAHEAD);
         {if (true) return new OptionName2(firstToken.next,token);}
      break;
    case _IGNORE_CASE:
      jj_consume_token(_IGNORE_CASE);
         {if (true) return new OptionName3(firstToken.next,token);}
      break;
    case STATIC:
      jj_consume_token(STATIC);
         {if (true) return new OptionName4(firstToken.next,token);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public OptionValue OptionValue() throws ParseException {
        Token t;
        ASTStringNode integer_literal;
        BooleanLiteral booleanLiteral;
        ASTStringNode string_literal;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                            integer_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new OptionValue1(integer_literal, firstToken.next,token);}
      break;
    case FALSE:
    case TRUE:
      booleanLiteral = BooleanLiteral();
         {if (true) return new OptionValue2(booleanLiteral, firstToken.next,token);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new OptionValue3(string_literal, firstToken.next,token);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public production production() throws ParseException {
        javacode_production javacode_production;
        regular_expr_production regular_expr_production;
        token_manager_decls token_manager_decls;
        bnf_production bnf_production;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _JAVACODE:
      javacode_production = javacode_production();
         {if (true) return new production1(javacode_production, firstToken.next,token);}
      break;
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case LT:
      regular_expr_production = regular_expr_production();
         {if (true) return new production2(regular_expr_production, firstToken.next,token);}
      break;
    case _TOKEN_MGR_DECLS:
      token_manager_decls = token_manager_decls();
         {if (true) return new production3(token_manager_decls, firstToken.next,token);}
      break;
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case VOID:
    case IDENTIFIER:
      bnf_production = bnf_production();
         {if (true) return new production4(bnf_production, firstToken.next,token);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public javacode_production javacode_production() throws ParseException {
        AccessModifier accessModifier = null;
        ResultType resultType;
        Token t;
        ASTStringNode identifier;
        FormalParameters formalParameters;
        ThrowsClause throwsClause = null;
        Block block;
        Token firstToken=token;
    jj_consume_token(_JAVACODE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      accessModifier = AccessModifier();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    resultType = ResultType();
    t = jj_consume_token(IDENTIFIER);
                                                                                            identifier=new ASTStringNode(t.image,new WToken(t));
    formalParameters = FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      throwsClause = ThrowsClause();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    block = Block();
         {if (true) return new javacode_production(accessModifier, resultType, identifier, formalParameters, throwsClause, block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ThrowsClause ThrowsClause() throws ParseException {
        Name name;
        ArrayList<Name> list0=new ArrayList<Name>();
        Name name1;
        ArrayList<Name> name1List = new ArrayList<Name>();
        Token firstToken=token;
    jj_consume_token(THROWS);
    name = Name();
                             list0.add(name);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      name1 = Name();
                                                                 list0.add(name1);
    }
         {if (true) return new ThrowsClause(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public bnf_production bnf_production() throws ParseException {
        AccessModifier accessModifier = null;
        ResultType resultType;
        Token t;
        ASTStringNode identifier;
        FormalParameters formalParameters;
        ThrowsClause throwsClause = null;
        Block block;
        expansion_choices expansion_choices;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      accessModifier = AccessModifier();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    resultType = ResultType();
    t = jj_consume_token(IDENTIFIER);
                                                                                 identifier=new ASTStringNode(t.image,new WToken(t));
    formalParameters = FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      throwsClause = ThrowsClause();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    block = Block();
    jj_consume_token(LBRACE);
    expansion_choices = expansion_choices();
    jj_consume_token(RBRACE);
         {if (true) return new bnf_production(accessModifier, resultType, identifier, formalParameters, throwsClause, block, expansion_choices, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AccessModifier AccessModifier() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
         {if (true) return new AccessModifier1(firstToken.next,token);}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
         {if (true) return new AccessModifier2(firstToken.next,token);}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
         {if (true) return new AccessModifier3(firstToken.next,token);}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public regular_expr_production regular_expr_production() throws ParseException {
        regular_expr_productionPrefix regular_expr_productionPrefix = null;
        regexpr_kind regexpr_kind;
        ASTTextNode text464 = null;
        regexpr_spec regexpr_spec;
        ArrayList<regexpr_spec> list0=new ArrayList<regexpr_spec>();
        regexpr_spec regexpr_spec1;
        ArrayList<regexpr_spec> regexpr_spec1List = new ArrayList<regexpr_spec>();
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      regular_expr_productionPrefix = regular_expr_productionPrefix();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    regexpr_kind = regexpr_kind();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      jj_consume_token(_IGNORE_CASE);
      jj_consume_token(RBRACKET);
                                                                                                                            text464=new ASTTextNode(new String[]{"[","IGNORE_CASE","]"},new WToken(token));
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    jj_consume_token(LBRACE);
    regexpr_spec = regexpr_spec();
                                                                                                                                                                                                                                                  list0.add(regexpr_spec);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      jj_consume_token(BIT_OR);
      regexpr_spec1 = regexpr_spec();
                                                                                                                                                                                                                                                                                                              list0.add(regexpr_spec1);
    }
    jj_consume_token(RBRACE);
         {if (true) return new regular_expr_production(list0, regular_expr_productionPrefix, regexpr_kind, text464, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public regular_expr_productionPrefix regular_expr_productionPrefix() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ArrayList<ASTStringNode> list1=new ArrayList<ASTStringNode>();
        ASTStringNode identifier1;
        ArrayList<ASTStringNode> identifier1List = new ArrayList<ASTStringNode>();
        Token firstToken=token;
    if (jj_2_1(2)) {
      jj_consume_token(LT);
      jj_consume_token(STAR);
      jj_consume_token(GT);
         {if (true) return new regular_expr_productionPrefix1(firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        t = jj_consume_token(IDENTIFIER);
                           identifier=new ASTStringNode(t.image,new WToken(t));
                                                                                 list1.add(identifier);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          t = jj_consume_token(IDENTIFIER);
                                                                                                                             identifier1=new ASTStringNode(t.image,new WToken(t));
                                                                                                                                                                                    list1.add(identifier1);
        }
        jj_consume_token(GT);
         {if (true) return new regular_expr_productionPrefix2(list1, firstToken.next,token);}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public token_manager_decls token_manager_decls() throws ParseException {
        ClassOrInterfaceBody classOrInterfaceBody;
        Token firstToken=token;
    jj_consume_token(_TOKEN_MGR_DECLS);
    jj_consume_token(COLON);
    classOrInterfaceBody = ClassOrInterfaceBody();
         {if (true) return new token_manager_decls(classOrInterfaceBody, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public regexpr_kind regexpr_kind() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _TOKEN:
      jj_consume_token(_TOKEN);
         {if (true) return new regexpr_kind1(firstToken.next,token);}
      break;
    case _SPECIAL_TOKEN:
      jj_consume_token(_SPECIAL_TOKEN);
         {if (true) return new regexpr_kind2(firstToken.next,token);}
      break;
    case _SKIP:
      jj_consume_token(_SKIP);
         {if (true) return new regexpr_kind3(firstToken.next,token);}
      break;
    case _MORE:
      jj_consume_token(_MORE);
         {if (true) return new regexpr_kind4(firstToken.next,token);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public regexpr_spec regexpr_spec() throws ParseException {
        regular_expression regular_expression;
        Block block = null;
        Token t;
        ASTStringNode identifier = null;
        Token firstToken=token;
    regular_expression = regular_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      block = Block();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      t = jj_consume_token(IDENTIFIER);
                                                                                    identifier=new ASTStringNode(t.image,new WToken(t));
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
         {if (true) return new regexpr_spec(regular_expression, block, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public expansion_choices expansion_choices() throws ParseException {
        expansion expansion;
        ArrayList<expansion> list0=new ArrayList<expansion>();
        expansion expansion1;
        ArrayList<expansion> expansion1List = new ArrayList<expansion>();
        Token firstToken=token;
    expansion = expansion();
                              list0.add(expansion);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_6;
      }
      jj_consume_token(BIT_OR);
      expansion1 = expansion();
                                                                                 list0.add(expansion1);
    }
         {if (true) return new expansion_choices(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public expansion expansion() throws ParseException {
        local_lookahead local_lookahead = null;
        expansion_unit expansion_unit;
        ArrayList<expansion_unit> expansion_unitList = new ArrayList<expansion_unit>();
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _LOOKAHEAD:
      jj_consume_token(_LOOKAHEAD);
      jj_consume_token(LPAREN);
      local_lookahead = local_lookahead();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    label_7:
    while (true) {
      expansion_unit = expansion_unit();
                                                                                                                                                          expansion_unitList.add(expansion_unit);
      if (notTailOfExpansionUnit()) {
        ;
      } else {
        break label_7;
      }
    }
         {if (true) return new expansion(local_lookahead, expansion_unitList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public local_lookahead local_lookahead() throws ParseException {
        Token t;
        ASTStringNode integer_literal = null;
        ASTTextNode text470 = null;
        expansion_choices expansion_choices = null;
        ASTTextNode text471 = null;
        Expression expression = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                                          integer_literal=new ASTStringNode(t.image,new WToken(t));
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
                                                                                                                         text470=new ASTTextNode(",",new WToken(token));
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    if (getToken(1).kind != RPAREN && getToken(1).kind != LBRACE) {
      expansion_choices = expansion_choices();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
                                                                                                                                                                                                                                                                                                                  text471=new ASTTextNode(",",new WToken(token));
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      expression = Expression();
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
         {if (true) return new local_lookahead(integer_literal, text470, expansion_choices, text471, expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public expansion_unit expansion_unit() throws ParseException {
        local_lookahead local_lookahead;
        Block block;
        expansion_choices expansion_choices;
        expansion_choices expansion_choices1;
        CatchPart catchPart;
        ArrayList<CatchPart> catchPartList = new ArrayList<CatchPart>();
        Block block1 = null;
        PrimaryExpression primaryExpression = null;
        expansion_unitMain expansion_unitMain;
        expansion_choices expansion_choices2;
        ExpModifier expModifier = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _LOOKAHEAD:
      jj_consume_token(_LOOKAHEAD);
      jj_consume_token(LPAREN);
      local_lookahead = local_lookahead();
      jj_consume_token(RPAREN);
         {if (true) return new expansion_unit1(local_lookahead, firstToken.next,token);}
      break;
    case LBRACE:
      block = Block();
         {if (true) return new expansion_unit2(block, firstToken.next,token);}
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      expansion_choices = expansion_choices();
      jj_consume_token(RBRACKET);
         {if (true) return new expansion_unit3(expansion_choices, firstToken.next,token);}
      break;
    case TRY:
      jj_consume_token(TRY);
      jj_consume_token(LBRACE);
      expansion_choices1 = expansion_choices();
      jj_consume_token(RBRACE);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_8;
        }
        catchPart = CatchPart();
                                                                                    catchPartList.add(catchPart);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        jj_consume_token(FINALLY);
        block1 = Block();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
         {if (true) return new expansion_unit4(expansion_choices1, catchPartList, block1, firstToken.next,token);}
      break;
    default:
      jj_la1[29] = jj_gen;
      if (jj_2_3(2147483647)) {
        if (jj_2_2(2147483647)) {
          primaryExpression = PrimaryExpression();
          jj_consume_token(ASSIGN);
        } else {
          ;
        }
        expansion_unitMain = expansion_unitMain();
         {if (true) return new expansion_unit5(primaryExpression, expansion_unitMain, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          expansion_choices2 = expansion_choices();
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HOOK:
          case PLUS:
          case STAR:
            expModifier = ExpModifier();
            break;
          default:
            jj_la1[28] = jj_gen;
            ;
          }
         {if (true) return new expansion_unit6(expansion_choices2, expModifier, firstToken.next,token);}
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public CatchPart CatchPart() throws ParseException {
        Name name;
        Token t;
        ASTStringNode identifier;
        Block block;
        Token firstToken=token;
    jj_consume_token(CATCH);
    jj_consume_token(LPAREN);
    name = Name();
    t = jj_consume_token(IDENTIFIER);
                                               identifier=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(RPAREN);
    block = Block();
         {if (true) return new CatchPart(name, identifier, block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public expansion_unitMain expansion_unitMain() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Arguments arguments;
        regular_expression regular_expression;
        ASTStringNode identifier1 = null;
        Token firstToken=token;
    if (jj_2_4(2147483647)) {
      t = jj_consume_token(IDENTIFIER);
                                                    identifier=new ASTStringNode(t.image,new WToken(t));
      arguments = Arguments();
         {if (true) return new expansion_unitMain1(identifier, arguments, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case LT:
        regular_expression = regular_expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          t = jj_consume_token(IDENTIFIER);
                                                                    identifier1=new ASTStringNode(t.image,new WToken(t));
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
         {if (true) return new expansion_unitMain2(regular_expression, identifier1, firstToken.next,token);}
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpModifier ExpModifier() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
         {if (true) return new ExpModifier1(firstToken.next,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new ExpModifier2(firstToken.next,token);}
      break;
    case HOOK:
      jj_consume_token(HOOK);
         {if (true) return new ExpModifier3(firstToken.next,token);}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public regular_expression regular_expression() throws ParseException {
        Token t;
        ASTStringNode string_literal;
        RegId regId = null;
        complex_regular_expression_choices complex_regular_expression_choices;
        ASTStringNode identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new regular_expression1(string_literal, firstToken.next,token);}
      break;
    default:
      jj_la1[35] = jj_gen;
      if (jj_2_5(3)) {
        jj_consume_token(LT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case 137:
          regId = RegId();
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        complex_regular_expression_choices = complex_regular_expression_choices();
        jj_consume_token(GT);
         {if (true) return new regular_expression2(regId, complex_regular_expression_choices, firstToken.next,token);}
      } else if (jj_2_6(2)) {
        jj_consume_token(LT);
        t = jj_consume_token(IDENTIFIER);
                                        identifier=new ASTStringNode(t.image,new WToken(t));
        jj_consume_token(GT);
         {if (true) return new regular_expression3(identifier, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          jj_consume_token(_EOF);
          jj_consume_token(GT);
         {if (true) return new EOFExpr(firstToken.next,token);}
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public RegId RegId() throws ParseException {
        ASTTextNode text476 = null;
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 137:
      jj_consume_token(137);
              text476=new ASTTextNode("#",new WToken(token));
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                                                                               identifier=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(COLON);
         {if (true) return new RegId(text476, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public complex_regular_expression_choices complex_regular_expression_choices() throws ParseException {
        complex_regular_expression complex_regular_expression;
        ArrayList<complex_regular_expression> list0=new ArrayList<complex_regular_expression>();
        complex_regular_expression complex_regular_expression1;
        ArrayList<complex_regular_expression> complex_regular_expression1List = new ArrayList<complex_regular_expression>();
        Token firstToken=token;
    complex_regular_expression = complex_regular_expression();
                                                                list0.add(complex_regular_expression);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_9;
      }
      jj_consume_token(BIT_OR);
      complex_regular_expression1 = complex_regular_expression();
                                                                                                                                                                      list0.add(complex_regular_expression1);
    }
         {if (true) return new complex_regular_expression_choices(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public complex_regular_expression complex_regular_expression() throws ParseException {
        complex_regular_expression_unit complex_regular_expression_unit;
        ArrayList<complex_regular_expression_unit> complex_regular_expression_unitList = new ArrayList<complex_regular_expression_unit>();
        Token firstToken=token;
    label_10:
    while (true) {
      complex_regular_expression_unit = complex_regular_expression_unit();
                                                                           complex_regular_expression_unitList.add(complex_regular_expression_unit);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case LPAREN:
      case LBRACKET:
      case LT:
      case TILDE:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_10;
      }
    }
         {if (true) return new complex_regular_expression(complex_regular_expression_unitList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public complex_regular_expression_unit complex_regular_expression_unit() throws ParseException {
        Token t;
        ASTStringNode string_literal;
        ASTStringNode identifier;
        character_list character_list;
        complex_regular_expression_choices complex_regular_expression_choices;
        CREUPostfix cREUPostfix = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new complex_regular_expression_unit1(string_literal, firstToken.next,token);}
      break;
    case LT:
      jj_consume_token(LT);
      t = jj_consume_token(IDENTIFIER);
                           identifier=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(GT);
         {if (true) return new complex_regular_expression_unit2(identifier, firstToken.next,token);}
      break;
    case LBRACKET:
    case TILDE:
      character_list = character_list();
         {if (true) return new complex_regular_expression_unit3(character_list, firstToken.next,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      complex_regular_expression_choices = complex_regular_expression_choices();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case HOOK:
      case PLUS:
      case STAR:
        cREUPostfix = CREUPostfix();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
         {if (true) return new complex_regular_expression_unit4(complex_regular_expression_choices, cREUPostfix, firstToken.next,token);}
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CREUPostfix CREUPostfix() throws ParseException {
        Token t;
        ASTStringNode integer_literal;
        CREUPostfixPP cREUPostfixPP = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
         {if (true) return new CREUPostfix1(firstToken.next,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new CREUPostfix2(firstToken.next,token);}
      break;
    case HOOK:
      jj_consume_token(HOOK);
         {if (true) return new CREUPostfix3(firstToken.next,token);}
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      t = jj_consume_token(INTEGER_LITERAL);
                                integer_literal=new ASTStringNode(t.image,new WToken(t));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        cREUPostfixPP = CREUPostfixPP();
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
         {if (true) return new CREUPostfix4(integer_literal, cREUPostfixPP, firstToken.next,token);}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CREUPostfixPP CREUPostfixPP() throws ParseException {
        Token t;
        ASTStringNode integer_literal = null;
        Token firstToken=token;
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                                 integer_literal=new ASTStringNode(t.image,new WToken(t));
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
         {if (true) return new CREUPostfixPP(integer_literal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public character_list character_list() throws ParseException {
        ASTTextNode text480 = null;
        character_descriptorList character_descriptorList = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
              text480=new ASTTextNode("~",new WToken(token));
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      character_descriptorList = character_descriptorList();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
         {if (true) return new character_list(text480, character_descriptorList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public character_descriptorList character_descriptorList() throws ParseException {
        character_descriptor character_descriptor;
        ArrayList<character_descriptor> list0=new ArrayList<character_descriptor>();
        character_descriptor character_descriptor1;
        ArrayList<character_descriptor> character_descriptor1List = new ArrayList<character_descriptor>();
        Token firstToken=token;
    character_descriptor = character_descriptor();
                                                    list0.add(character_descriptor);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      character_descriptor1 = character_descriptor();
                                                                                                                                        list0.add(character_descriptor1);
    }
         {if (true) return new character_descriptorList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public character_descriptor character_descriptor() throws ParseException {
        Token t;
        ASTStringNode string_literal;
        ASTStringNode string_literal1 = null;
        Token firstToken=token;
    t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      t = jj_consume_token(STRING_LITERAL);
                                                                                                             string_literal1=new ASTStringNode(t.image,new WToken(t));
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
         {if (true) return new character_descriptor(string_literal, string_literal1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CompilationUnit CompilationUnit() throws ParseException {
        PackageDeclaration packageDeclaration = null;
        ImportDeclaration importDeclaration;
        ArrayList<ImportDeclaration> importDeclarationList = new ArrayList<ImportDeclaration>();
        TypeDeclaration typeDeclaration;
        ArrayList<TypeDeclaration> typeDeclarationList = new ArrayList<TypeDeclaration>();
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      packageDeclaration = PackageDeclaration();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_12;
      }
      importDeclaration = ImportDeclaration();
                                                                                         importDeclarationList.add(importDeclaration);
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case 143:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_13;
      }
      typeDeclaration = TypeDeclaration();
                                                                                                                                                                             typeDeclarationList.add(typeDeclaration);
    }
         {if (true) return new CompilationUnit(packageDeclaration, importDeclarationList, typeDeclarationList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PackageDeclaration PackageDeclaration() throws ParseException {
        Name name;
        Token firstToken=token;
    jj_consume_token(PACKAGE);
    name = Name();
    jj_consume_token(SEMICOLON);
         {if (true) return new PackageDeclaration(name, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ImportDeclaration ImportDeclaration() throws ParseException {
        ASTTextNode text481 = null;
        Name name;
        ASTTextNode text482 = null;
        Token firstToken=token;
    jj_consume_token(IMPORT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
                            text481=new ASTTextNode("static",new WToken(token));
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
                                                                                                 text482=new ASTTextNode(new String[]{".","*"},new WToken(token));
      jj_consume_token(DOT);
      jj_consume_token(STAR);
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
         {if (true) return new ImportDeclaration(text481, name, text482, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Modifiers Modifiers() throws ParseException {
        Modifier modifier;
        ArrayList<Modifier> modifierList = new ArrayList<Modifier>();
        Token firstToken=token;
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case 143:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_14;
      }
      modifier = Modifier();
                                          modifierList.add(modifier);
    }
         {if (true) return new Modifiers(modifierList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Modifier Modifier() throws ParseException {
        Annotation annotation;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
         {if (true) return new Modifier1(firstToken.next,token);}
      break;
    case STATIC:
      jj_consume_token(STATIC);
         {if (true) return new Modifier2(firstToken.next,token);}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
         {if (true) return new Modifier3(firstToken.next,token);}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
         {if (true) return new Modifier4(firstToken.next,token);}
      break;
    case FINAL:
      jj_consume_token(FINAL);
         {if (true) return new Modifier5(firstToken.next,token);}
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
         {if (true) return new Modifier6(firstToken.next,token);}
      break;
    case SYNCHRONIZED:
      jj_consume_token(SYNCHRONIZED);
         {if (true) return new Modifier7(firstToken.next,token);}
      break;
    case NATIVE:
      jj_consume_token(NATIVE);
         {if (true) return new Modifier8(firstToken.next,token);}
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
         {if (true) return new Modifier9(firstToken.next,token);}
      break;
    case VOLATILE:
      jj_consume_token(VOLATILE);
         {if (true) return new Modifier10(firstToken.next,token);}
      break;
    case STRICTFP:
      jj_consume_token(STRICTFP);
         {if (true) return new Modifier11(firstToken.next,token);}
      break;
    case 143:
      annotation = Annotation();
         {if (true) return new Modifier12(annotation, firstToken.next,token);}
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypeDeclaration TypeDeclaration() throws ParseException {
        Modifiers modifiers;
        ClassOrInterfaceDeclaration classOrInterfaceDeclaration;
        Modifiers modifiers1;
        EnumDeclaration enumDeclaration;
        Modifiers modifiers2;
        AnnotationTypeDeclaration annotationTypeDeclaration;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
         {if (true) return new TypeDeclaration1(firstToken.next,token);}
      break;
    default:
      jj_la1[56] = jj_gen;
      if (jj_2_7(2)) {
        modifiers = Modifiers();
        classOrInterfaceDeclaration = ClassOrInterfaceDeclaration();
         {if (true) return new TypeDeclaration2(modifiers, classOrInterfaceDeclaration, firstToken.next,token);}
      } else if (jj_2_8(2)) {
        modifiers1 = Modifiers();
        enumDeclaration = EnumDeclaration();
         {if (true) return new TypeDeclaration3(modifiers1, enumDeclaration, firstToken.next,token);}
      } else if (jj_2_9(2)) {
        modifiers2 = Modifiers();
        annotationTypeDeclaration = AnnotationTypeDeclaration();
         {if (true) return new TypeDeclaration4(modifiers2, annotationTypeDeclaration, firstToken.next,token);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceDeclaration ClassOrInterfaceDeclaration() throws ParseException {
        ClassOrInterface classOrInterface;
        JavaIdentifier javaIdentifier;
        TypeParameters typeParameters = null;
        ExtendsList extendsList = null;
        ImplementsList implementsList = null;
        ClassOrInterfaceBody classOrInterfaceBody;
        Token firstToken=token;
    classOrInterface = ClassOrInterface();
    javaIdentifier = JavaIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      typeParameters = TypeParameters();
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      extendsList = ExtendsList();
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      implementsList = ImplementsList();
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    classOrInterfaceBody = ClassOrInterfaceBody();
         {if (true) return new ClassOrInterfaceDeclaration(classOrInterface, javaIdentifier, typeParameters, extendsList, implementsList, classOrInterfaceBody, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterface ClassOrInterface() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      jj_consume_token(CLASS);
         {if (true) return new ClassOrInterface1(firstToken.next,token);}
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
         {if (true) return new ClassOrInterface2(firstToken.next,token);}
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExtendsList ExtendsList() throws ParseException {
        ClassOrInterfaceType classOrInterfaceType;
        ArrayList<ClassOrInterfaceType> list0=new ArrayList<ClassOrInterfaceType>();
        ClassOrInterfaceType classOrInterfaceType1;
        ArrayList<ClassOrInterfaceType> classOrInterfaceType1List = new ArrayList<ClassOrInterfaceType>();
        Token firstToken=token;
    jj_consume_token(EXTENDS);
    classOrInterfaceType = ClassOrInterfaceType();
                                                              list0.add(classOrInterfaceType);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      classOrInterfaceType1 = ClassOrInterfaceType();
                                                                                                                                                  list0.add(classOrInterfaceType1);
    }
         {if (true) return new ExtendsList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ImplementsList ImplementsList() throws ParseException {
        ClassOrInterfaceType classOrInterfaceType;
        ArrayList<ClassOrInterfaceType> list0=new ArrayList<ClassOrInterfaceType>();
        ClassOrInterfaceType classOrInterfaceType1;
        ArrayList<ClassOrInterfaceType> classOrInterfaceType1List = new ArrayList<ClassOrInterfaceType>();
        Token firstToken=token;
    jj_consume_token(IMPLEMENTS);
    classOrInterfaceType = ClassOrInterfaceType();
                                                                 list0.add(classOrInterfaceType);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
      classOrInterfaceType1 = ClassOrInterfaceType();
                                                                                                                                                     list0.add(classOrInterfaceType1);
    }
         {if (true) return new ImplementsList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EnumDeclaration EnumDeclaration() throws ParseException {
        JavaIdentifier javaIdentifier;
        ImplementsList implementsList = null;
        EnumBody enumBody;
        Token firstToken=token;
    jj_consume_token(ENUM);
    javaIdentifier = JavaIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      implementsList = ImplementsList();
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    enumBody = EnumBody();
         {if (true) return new EnumDeclaration(javaIdentifier, implementsList, enumBody, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EnumBody EnumBody() throws ParseException {
        EnumConstant enumConstant;
        ArrayList<EnumConstant> list0=new ArrayList<EnumConstant>();
        EnumConstant enumConstant1;
        ArrayList<EnumConstant> enumConstant1List = new ArrayList<EnumConstant>();
        EnumBodyInternal enumBodyInternal = null;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    enumConstant = EnumConstant();
                                        list0.add(enumConstant);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_17;
      }
      jj_consume_token(COMMA);
      enumConstant1 = EnumConstant();
                                                                                                    list0.add(enumConstant1);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      enumBodyInternal = EnumBodyInternal();
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
         {if (true) return new EnumBody(list0, enumBodyInternal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EnumBodyInternal EnumBodyInternal() throws ParseException {
        ClassOrInterfaceBodyDeclaration classOrInterfaceBodyDeclaration;
        ArrayList<ClassOrInterfaceBodyDeclaration> classOrInterfaceBodyDeclarationList = new ArrayList<ClassOrInterfaceBodyDeclaration>();
        Token firstToken=token;
    jj_consume_token(SEMICOLON);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case LBRACE:
      case SEMICOLON:
      case LT:
      case IDENTIFIER:
      case 143:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_18;
      }
      classOrInterfaceBodyDeclaration = ClassOrInterfaceBodyDeclaration();
                                                                               classOrInterfaceBodyDeclarationList.add(classOrInterfaceBodyDeclaration);
    }
         {if (true) return new EnumBodyInternal(classOrInterfaceBodyDeclarationList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EnumConstant EnumConstant() throws ParseException {
        JavaIdentifier javaIdentifier;
        Arguments arguments = null;
        ClassOrInterfaceBody classOrInterfaceBody = null;
        Token firstToken=token;
    javaIdentifier = JavaIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      arguments = Arguments();
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      classOrInterfaceBody = ClassOrInterfaceBody();
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
         {if (true) return new EnumConstant(javaIdentifier, arguments, classOrInterfaceBody, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TypeParameters TypeParameters() throws ParseException {
        TypeParameter typeParameter;
        ArrayList<TypeParameter> list0=new ArrayList<TypeParameter>();
        TypeParameter typeParameter1;
        ArrayList<TypeParameter> typeParameter1List = new ArrayList<TypeParameter>();
        Token firstToken=token;
    jj_consume_token(LT);
    typeParameter = TypeParameter();
                                          list0.add(typeParameter);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      typeParameter1 = TypeParameter();
                                                                                                         list0.add(typeParameter1);
    }
    jj_consume_token(GT);
         {if (true) return new TypeParameters(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TypeParameter TypeParameter() throws ParseException {
        JavaIdentifier javaIdentifier;
        TypeBound typeBound = null;
        Token firstToken=token;
    javaIdentifier = JavaIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      typeBound = TypeBound();
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
         {if (true) return new TypeParameter(javaIdentifier, typeBound, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TypeBound TypeBound() throws ParseException {
        ClassOrInterfaceType classOrInterfaceType;
        ClassOrInterfaceType classOrInterfaceType1;
        ArrayList<ClassOrInterfaceType> classOrInterfaceType1List = new ArrayList<ClassOrInterfaceType>();
        Token firstToken=token;
    jj_consume_token(EXTENDS);
    classOrInterfaceType = ClassOrInterfaceType();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_20;
      }
      jj_consume_token(BIT_AND);
      classOrInterfaceType1 = ClassOrInterfaceType();
                                                                                                                classOrInterfaceType1List.add(classOrInterfaceType1);
    }
         {if (true) return new TypeBound(classOrInterfaceType, classOrInterfaceType1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceBody ClassOrInterfaceBody() throws ParseException {
        ClassOrInterfaceBodyDeclaration classOrInterfaceBodyDeclaration;
        ArrayList<ClassOrInterfaceBodyDeclaration> classOrInterfaceBodyDeclarationList = new ArrayList<ClassOrInterfaceBodyDeclaration>();
        Token firstToken=token;
    jj_consume_token(LBRACE);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case LBRACE:
      case SEMICOLON:
      case LT:
      case IDENTIFIER:
      case 143:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_21;
      }
      classOrInterfaceBodyDeclaration = ClassOrInterfaceBodyDeclaration();
                                                                               classOrInterfaceBodyDeclarationList.add(classOrInterfaceBodyDeclaration);
    }
    jj_consume_token(RBRACE);
         {if (true) return new ClassOrInterfaceBody(classOrInterfaceBodyDeclarationList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceBodyDeclaration ClassOrInterfaceBodyDeclaration() throws ParseException {
        Initializer initializer;
        Modifiers modifiers;
        ClassOrInterfaceDeclaration classOrInterfaceDeclaration;
        Modifiers modifiers1;
        EnumDeclaration enumDeclaration;
        Modifiers modifiers2;
        ConstructorDeclaration constructorDeclaration;
        Modifiers modifiers3;
        FieldDeclaration fieldDeclaration;
        Modifiers modifiers4;
        MethodDeclaration methodDeclaration;
        Token firstToken=token;
    if (jj_2_10(2)) {
      initializer = Initializer();
         {if (true) return new ClassOrInterfaceBodyDeclaration1(initializer, firstToken.next,token);}
    } else if (jj_2_11(2147483647)) {
      modifiers = Modifiers();
      classOrInterfaceDeclaration = ClassOrInterfaceDeclaration();
         {if (true) return new ClassOrInterfaceBodyDeclaration2(modifiers, classOrInterfaceDeclaration, firstToken.next,token);}
    } else if (jj_2_12(2147483647)) {
      modifiers1 = Modifiers();
      enumDeclaration = EnumDeclaration();
         {if (true) return new ClassOrInterfaceBodyDeclaration3(modifiers1, enumDeclaration, firstToken.next,token);}
    } else if (jj_2_13(2147483647)) {
      modifiers2 = Modifiers();
      constructorDeclaration = ConstructorDeclaration();
         {if (true) return new ClassOrInterfaceBodyDeclaration4(modifiers2, constructorDeclaration, firstToken.next,token);}
    } else if (jj_2_14(2147483647)) {
      modifiers3 = Modifiers();
      fieldDeclaration = FieldDeclaration();
         {if (true) return new ClassOrInterfaceBodyDeclaration5(modifiers3, fieldDeclaration, firstToken.next,token);}
    } else if (jj_2_15(2)) {
      modifiers4 = Modifiers();
      methodDeclaration = MethodDeclaration();
         {if (true) return new ClassOrInterfaceBodyDeclaration6(modifiers4, methodDeclaration, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
         {if (true) return new ClassOrInterfaceBodyDeclaration7(firstToken.next,token);}
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FieldDeclaration FieldDeclaration() throws ParseException {
        Type type;
        VariableDeclarator variableDeclarator;
        VariableDeclarator variableDeclarator1;
        ArrayList<VariableDeclarator> variableDeclarator1List = new ArrayList<VariableDeclarator>();
        Token firstToken=token;
    type = Type();
    variableDeclarator = VariableDeclarator();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[74] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      variableDeclarator1 = VariableDeclarator();
                                                                                                          variableDeclarator1List.add(variableDeclarator1);
    }
    jj_consume_token(SEMICOLON);
         {if (true) return new FieldDeclaration(type, variableDeclarator, variableDeclarator1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarator VariableDeclarator() throws ParseException {
        VariableDeclaratorId variableDeclaratorId;
        VariableInitializer variableInitializer = null;
        Token firstToken=token;
    variableDeclaratorId = VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      variableInitializer = VariableInitializer();
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
         {if (true) return new VariableDeclarator(variableDeclaratorId, variableInitializer, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclaratorId VariableDeclaratorId() throws ParseException {
        JavaIdentifier javaIdentifier;
        ASTTextNode text498;
        ArrayList<ASTTextNode> text498List = new ArrayList<ASTTextNode>();
        Token firstToken=token;
    javaIdentifier = JavaIdentifier();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_23;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                                  text498=new ASTTextNode(new String[]{"[","]"},new WToken(token));
                                                                                                                     text498List.add(text498);
    }
         {if (true) return new VariableDeclaratorId(javaIdentifier, text498List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public VariableInitializer VariableInitializer() throws ParseException {
        ArrayInitializer arrayInitializer;
        Expression expression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      arrayInitializer = ArrayInitializer();
         {if (true) return new VariableInitializer1(arrayInitializer, firstToken.next,token);}
      break;
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
      expression = Expression();
         {if (true) return new VariableInitializer2(expression, firstToken.next,token);}
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayInitializer ArrayInitializer() throws ParseException {
        ArrayInitializerInternal arrayInitializerInternal = null;
        ASTTextNode text499 = null;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
      arrayInitializerInternal = ArrayInitializerInternal();
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
                                                                        text499=new ASTTextNode(",",new WToken(token));
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
         {if (true) return new ArrayInitializer(arrayInitializerInternal, text499, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayInitializerInternal ArrayInitializerInternal() throws ParseException {
        VariableInitializer variableInitializer;
        VariableInitializer variableInitializer1;
        ArrayList<VariableInitializer> variableInitializer1List = new ArrayList<VariableInitializer>();
        Token firstToken=token;
    variableInitializer = VariableInitializer();
    label_24:
    while (true) {
      if (jj_2_16(2)) {
        ;
      } else {
        break label_24;
      }
      jj_consume_token(COMMA);
      variableInitializer1 = VariableInitializer();
                                                                                                               variableInitializer1List.add(variableInitializer1);
    }
         {if (true) return new ArrayInitializerInternal(variableInitializer, variableInitializer1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration MethodDeclaration() throws ParseException {
        TypeParameters typeParameters = null;
        ResultType resultType;
        MethodDeclarator methodDeclarator;
        NameList nameList = null;
        MethodDeclarationBody methodDeclarationBody;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      typeParameters = TypeParameters();
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    resultType = ResultType();
    methodDeclarator = MethodDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      nameList = NameList();
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    methodDeclarationBody = MethodDeclarationBody();
         {if (true) return new MethodDeclaration(typeParameters, resultType, methodDeclarator, nameList, methodDeclarationBody, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclarationBody MethodDeclarationBody() throws ParseException {
        Block block;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      block = Block();
         {if (true) return new MethodDeclarationBody1(block, firstToken.next,token);}
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
         {if (true) return new MethodDeclarationBody2(firstToken.next,token);}
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclarator MethodDeclarator() throws ParseException {
        JavaIdentifier javaIdentifier;
        FormalParameters formalParameters;
        ASTTextNode text501;
        ArrayList<ASTTextNode> text501List = new ArrayList<ASTTextNode>();
        Token firstToken=token;
    javaIdentifier = JavaIdentifier();
    formalParameters = FormalParameters();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_25;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                                                                      text501=new ASTTextNode(new String[]{"[","]"},new WToken(token));
                                                                                                                                                         text501List.add(text501);
    }
         {if (true) return new MethodDeclarator(javaIdentifier, formalParameters, text501List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameters FormalParameters() throws ParseException {
        FormalParametersInternal formalParametersInternal = null;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      formalParametersInternal = FormalParametersInternal();
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
         {if (true) return new FormalParameters(formalParametersInternal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParametersInternal FormalParametersInternal() throws ParseException {
        FormalParameter formalParameter;
        ArrayList<FormalParameter> list0=new ArrayList<FormalParameter>();
        FormalParameter formalParameter1;
        ArrayList<FormalParameter> formalParameter1List = new ArrayList<FormalParameter>();
        Token firstToken=token;
    formalParameter = FormalParameter();
                                          list0.add(formalParameter);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_26;
      }
      jj_consume_token(COMMA);
      formalParameter1 = FormalParameter();
                                                                                                               list0.add(formalParameter1);
    }
         {if (true) return new FormalParametersInternal(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameter FormalParameter() throws ParseException {
        ASTTextNode text502 = null;
        Type type;
        ASTTextNode text503 = null;
        VariableDeclaratorId variableDeclaratorId;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
                  text502=new ASTTextNode("final",new WToken(token));
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
    type = Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 138:
      jj_consume_token(138);
                                                                                            text503=new ASTTextNode("...",new WToken(token));
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    variableDeclaratorId = VariableDeclaratorId();
         {if (true) return new FormalParameter(text502, type, text503, variableDeclaratorId, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorDeclaration ConstructorDeclaration() throws ParseException {
        TypeParameters typeParameters = null;
        JavaIdentifier javaIdentifier;
        FormalParameters formalParameters;
        NameList nameList = null;
        ExplicitConstructorInvocation explicitConstructorInvocation = null;
        BlockStatement blockStatement;
        ArrayList<BlockStatement> blockStatementList = new ArrayList<BlockStatement>();
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      typeParameters = TypeParameters();
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    javaIdentifier = JavaIdentifier();
    formalParameters = FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      nameList = NameList();
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    if (jj_2_17(2147483647)) {
      explicitConstructorInvocation = ExplicitConstructorInvocation();
    } else {
      ;
    }
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_27;
      }
      blockStatement = BlockStatement();
                                                                                                                                                                                                                                                                                             blockStatementList.add(blockStatement);
    }
    jj_consume_token(RBRACE);
         {if (true) return new ConstructorDeclaration(typeParameters, javaIdentifier, formalParameters, nameList, explicitConstructorInvocation, blockStatementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ExplicitConstructorInvocation ExplicitConstructorInvocation() throws ParseException {
        Arguments arguments;
        PrimaryExpression primaryExpression = null;
        Arguments arguments1;
        Token firstToken=token;
    if (jj_2_19(2147483647)) {
      jj_consume_token(THIS);
      arguments = Arguments();
      jj_consume_token(SEMICOLON);
         {if (true) return new ExplicitConstructorInvocation1(arguments, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case IDENTIFIER:
        if (jj_2_18(2)) {
          primaryExpression = PrimaryExpression();
          jj_consume_token(DOT);
        } else {
          ;
        }
        jj_consume_token(SUPER);
        arguments1 = Arguments();
        jj_consume_token(SEMICOLON);
         {if (true) return new ExplicitConstructorInvocation2(primaryExpression, arguments1, firstToken.next,token);}
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Initializer Initializer() throws ParseException {
        ASTTextNode text504 = null;
        Block block;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
                   text504=new ASTTextNode("static",new WToken(token));
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
    block = Block();
         {if (true) return new Initializer(text504, block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
        ReferenceTypeP referenceTypeP;
        PrimitiveType primitiveType;
        Token firstToken=token;
    if (jj_2_20(2)) {
      referenceTypeP = ReferenceTypeP();
         {if (true) return new Type1(referenceTypeP, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        primitiveType = PrimitiveType();
         {if (true) return new Type2(primitiveType, firstToken.next,token);}
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ReferenceTypeP ReferenceTypeP() throws ParseException {
        PrimitiveType primitiveType;
        ASTTextNode text505;
        ArrayList<ASTTextNode> text505List = new ArrayList<ASTTextNode>();
        ClassOrInterfaceType classOrInterfaceType;
        ASTTextNode text506;
        ArrayList<ASTTextNode> text506List = new ArrayList<ASTTextNode>();
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      primitiveType = PrimitiveType();
      label_28:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                                             text505=new ASTTextNode(new String[]{"[","]"},new WToken(token));
                                                                                                                                text505List.add(text505);
        if (jj_2_21(2)) {
          ;
        } else {
          break label_28;
        }
      }
         {if (true) return new ReferenceTypeP1(primitiveType, text505List, firstToken.next,token);}
      break;
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case IDENTIFIER:
      classOrInterfaceType = ClassOrInterfaceType();
      label_29:
      while (true) {
        if (jj_2_22(2)) {
          ;
        } else {
          break label_29;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                                                           text506=new ASTTextNode(new String[]{"[","]"},new WToken(token));
                                                                                                                                              text506List.add(text506);
      }
         {if (true) return new ReferenceTypeP2(classOrInterfaceType, text506List, firstToken.next,token);}
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceType ClassOrInterfaceType() throws ParseException {
        JavaIdentifier javaIdentifier;
        TypeArguments typeArguments = null;
        ClassOrInterfaceTypeIntern classOrInterfaceTypeIntern;
        ArrayList<ClassOrInterfaceTypeIntern> classOrInterfaceTypeInternList = new ArrayList<ClassOrInterfaceTypeIntern>();
        Token firstToken=token;
    javaIdentifier = JavaIdentifier();
    if (jj_2_23(2)) {
      typeArguments = TypeArguments();
    } else {
      ;
    }
    label_30:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_30;
      }
      classOrInterfaceTypeIntern = ClassOrInterfaceTypeIntern();
                                                                                                                                                           classOrInterfaceTypeInternList.add(classOrInterfaceTypeIntern);
    }
         {if (true) return new ClassOrInterfaceType(javaIdentifier, typeArguments, classOrInterfaceTypeInternList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceTypeIntern ClassOrInterfaceTypeIntern() throws ParseException {
        JavaIdentifier javaIdentifier;
        TypeArguments typeArguments = null;
        Token firstToken=token;
    jj_consume_token(DOT);
    javaIdentifier = JavaIdentifier();
    if (jj_2_25(2)) {
      typeArguments = TypeArguments();
    } else {
      ;
    }
         {if (true) return new ClassOrInterfaceTypeIntern(javaIdentifier, typeArguments, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TypeArguments TypeArguments() throws ParseException {
        TypeArgument typeArgument;
        TypeArgument typeArgument1;
        ArrayList<TypeArgument> typeArgument1List = new ArrayList<TypeArgument>();
        Token firstToken=token;
    jj_consume_token(LT);
    typeArgument = TypeArgument();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_31;
      }
      jj_consume_token(COMMA);
      typeArgument1 = TypeArgument();
                                                                          typeArgument1List.add(typeArgument1);
    }
    jj_consume_token(GT);
         {if (true) return new TypeArguments(typeArgument, typeArgument1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TypeArgument TypeArgument() throws ParseException {
        ReferenceTypeP referenceTypeP;
        WildcardBounds wildcardBounds = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      referenceTypeP = ReferenceTypeP();
         {if (true) return new TypeArgument1(referenceTypeP, firstToken.next,token);}
      break;
    case HOOK:
      jj_consume_token(HOOK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
      case SUPER:
        wildcardBounds = WildcardBounds();
        break;
      default:
        jj_la1[96] = jj_gen;
        ;
      }
         {if (true) return new TypeArgument2(wildcardBounds, firstToken.next,token);}
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public WildcardBounds WildcardBounds() throws ParseException {
        ReferenceTypeP referenceTypeP;
        ReferenceTypeP referenceTypeP1;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      referenceTypeP = ReferenceTypeP();
         {if (true) return new WildcardBounds1(referenceTypeP, firstToken.next,token);}
      break;
    case SUPER:
      jj_consume_token(SUPER);
      referenceTypeP1 = ReferenceTypeP();
         {if (true) return new WildcardBounds2(referenceTypeP1, firstToken.next,token);}
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PrimitiveType PrimitiveType() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
         {if (true) return new PrimitiveType1(firstToken.next,token);}
      break;
    case CHAR:
      jj_consume_token(CHAR);
         {if (true) return new PrimitiveType2(firstToken.next,token);}
      break;
    case BYTE:
      jj_consume_token(BYTE);
         {if (true) return new PrimitiveType3(firstToken.next,token);}
      break;
    case SHORT:
      jj_consume_token(SHORT);
         {if (true) return new PrimitiveType4(firstToken.next,token);}
      break;
    case INT:
      jj_consume_token(INT);
         {if (true) return new PrimitiveType5(firstToken.next,token);}
      break;
    case LONG:
      jj_consume_token(LONG);
         {if (true) return new PrimitiveType6(firstToken.next,token);}
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
         {if (true) return new PrimitiveType7(firstToken.next,token);}
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
         {if (true) return new PrimitiveType8(firstToken.next,token);}
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ResultType ResultType() throws ParseException {
        Type type;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
         {if (true) return new ResultType1(firstToken.next,token);}
      break;
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      type = Type();
         {if (true) return new ResultType2(type, firstToken.next,token);}
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Name Name() throws ParseException {
        JavaIdentifier javaIdentifier;
        JavaIdentifier javaIdentifier1;
        ArrayList<JavaIdentifier> javaIdentifier1List = new ArrayList<JavaIdentifier>();
        Token firstToken=token;
    javaIdentifier = JavaIdentifier();
    label_32:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_32;
      }
      jj_consume_token(DOT);
      javaIdentifier1 = JavaIdentifier();
                                                                                           javaIdentifier1List.add(javaIdentifier1);
    }
         {if (true) return new Name(javaIdentifier, javaIdentifier1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public NameList NameList() throws ParseException {
        Name name;
        ArrayList<Name> list0=new ArrayList<Name>();
        Name name1;
        ArrayList<Name> name1List = new ArrayList<Name>();
        Token firstToken=token;
    name = Name();
                    list0.add(name);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_33;
      }
      jj_consume_token(COMMA);
      name1 = Name();
                                                        list0.add(name1);
    }
         {if (true) return new NameList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
        ConditionalExpression conditionalExpression;
        AssignExp assignExp = null;
        Token firstToken=token;
    conditionalExpression = ConditionalExpression();
    if (jj_2_27(2)) {
      assignExp = AssignExp();
    } else {
      ;
    }
         {if (true) return new Expression(conditionalExpression, assignExp, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AssignExp AssignExp() throws ParseException {
        AssignmentOperator assignmentOperator;
        Expression expression;
        Token firstToken=token;
    assignmentOperator = AssignmentOperator();
    expression = Expression();
         {if (true) return new AssignExp(assignmentOperator, expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentOperator AssignmentOperator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
         {if (true) return new AssignmentOperator1(firstToken.next,token);}
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
         {if (true) return new AssignmentOperator2(firstToken.next,token);}
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
         {if (true) return new AssignmentOperator3(firstToken.next,token);}
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
         {if (true) return new AssignmentOperator4(firstToken.next,token);}
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
         {if (true) return new AssignmentOperator5(firstToken.next,token);}
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
         {if (true) return new AssignmentOperator6(firstToken.next,token);}
      break;
    case 139:
      jj_consume_token(139);
         {if (true) return new AssignmentOperator7(firstToken.next,token);}
      break;
    case 140:
      jj_consume_token(140);
         {if (true) return new AssignmentOperator8(firstToken.next,token);}
      break;
    case 141:
      jj_consume_token(141);
         {if (true) return new AssignmentOperator9(firstToken.next,token);}
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
         {if (true) return new AssignmentOperator10(firstToken.next,token);}
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
         {if (true) return new AssignmentOperator11(firstToken.next,token);}
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
         {if (true) return new AssignmentOperator12(firstToken.next,token);}
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpression ConditionalExpression() throws ParseException {
        IASTNode conditionalExpressionFull;
        ConditionalOrExpression conditionalOrExpression;
        Token firstToken=token;
    if (jj_2_28(2147483647)) {
      conditionalExpressionFull = ConditionalExpressionFull();
         {if (true) return new ConditionalExpression1(conditionalExpressionFull, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case IDENTIFIER:
        conditionalOrExpression = ConditionalOrExpression();
         {if (true) return new ConditionalExpression2(conditionalOrExpression, firstToken.next,token);}
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpressionFull ConditionalExpressionFull() throws ParseException {
        ConditionalOrExpression conditionalOrExpression;
        Expression expression;
        Expression expression1;
        Token firstToken=token;
    conditionalOrExpression = ConditionalOrExpression();
    jj_consume_token(HOOK);
    expression = Expression();
    jj_consume_token(COLON);
    expression1 = Expression();
         {if (true) return new ConditionalExpressionFull(conditionalOrExpression, expression, expression1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalOrExpression ConditionalOrExpression() throws ParseException {
        ConditionalAndExpression conditionalAndExpression;
        ConditionalAndExpression conditionalAndExpression1;
        ArrayList<ConditionalAndExpression> conditionalAndExpression1List = new ArrayList<ConditionalAndExpression>();
        Token firstToken=token;
    conditionalAndExpression = ConditionalAndExpression();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[104] = jj_gen;
        break label_34;
      }
      jj_consume_token(SC_OR);
      conditionalAndExpression1 = ConditionalAndExpression();
                                                                                                                       conditionalAndExpression1List.add(conditionalAndExpression1);
    }
         {if (true) return new ConditionalOrExpression(conditionalAndExpression, conditionalAndExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalAndExpression ConditionalAndExpression() throws ParseException {
        InclusiveOrExpression inclusiveOrExpression;
        InclusiveOrExpression inclusiveOrExpression1;
        ArrayList<InclusiveOrExpression> inclusiveOrExpression1List = new ArrayList<InclusiveOrExpression>();
        Token firstToken=token;
    inclusiveOrExpression = InclusiveOrExpression();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[105] = jj_gen;
        break label_35;
      }
      jj_consume_token(SC_AND);
      inclusiveOrExpression1 = InclusiveOrExpression();
                                                                                                           inclusiveOrExpression1List.add(inclusiveOrExpression1);
    }
         {if (true) return new ConditionalAndExpression(inclusiveOrExpression, inclusiveOrExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public InclusiveOrExpression InclusiveOrExpression() throws ParseException {
        ExclusiveOrExpression exclusiveOrExpression;
        ExclusiveOrExpression exclusiveOrExpression1;
        ArrayList<ExclusiveOrExpression> exclusiveOrExpression1List = new ArrayList<ExclusiveOrExpression>();
        Token firstToken=token;
    exclusiveOrExpression = ExclusiveOrExpression();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[106] = jj_gen;
        break label_36;
      }
      jj_consume_token(BIT_OR);
      exclusiveOrExpression1 = ExclusiveOrExpression();
                                                                                                          exclusiveOrExpression1List.add(exclusiveOrExpression1);
    }
         {if (true) return new InclusiveOrExpression(exclusiveOrExpression, exclusiveOrExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ExclusiveOrExpression ExclusiveOrExpression() throws ParseException {
        AndExpression andExpression;
        AndExpression andExpression1;
        ArrayList<AndExpression> andExpression1List = new ArrayList<AndExpression>();
        Token firstToken=token;
    andExpression = AndExpression();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[107] = jj_gen;
        break label_37;
      }
      jj_consume_token(XOR);
      andExpression1 = AndExpression();
                                                                          andExpression1List.add(andExpression1);
    }
         {if (true) return new ExclusiveOrExpression(andExpression, andExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AndExpression AndExpression() throws ParseException {
        EqualityExpression equalityExpression;
        EqualityExpression equalityExpression1;
        ArrayList<EqualityExpression> equalityExpression1List = new ArrayList<EqualityExpression>();
        Token firstToken=token;
    equalityExpression = EqualityExpression();
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[108] = jj_gen;
        break label_38;
      }
      jj_consume_token(BIT_AND);
      equalityExpression1 = EqualityExpression();
                                                                                              equalityExpression1List.add(equalityExpression1);
    }
         {if (true) return new AndExpression(equalityExpression, equalityExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpression EqualityExpression() throws ParseException {
        InstanceOfExpression instanceOfExpression;
        EqualityExpressionIntern equalityExpressionIntern;
        ArrayList<EqualityExpressionIntern> equalityExpressionInternList = new ArrayList<EqualityExpressionIntern>();
        Token firstToken=token;
    instanceOfExpression = InstanceOfExpression();
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[109] = jj_gen;
        break label_39;
      }
      equalityExpressionIntern = EqualityExpressionIntern();
                                                                                                         equalityExpressionInternList.add(equalityExpressionIntern);
    }
         {if (true) return new EqualityExpression(instanceOfExpression, equalityExpressionInternList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpressionIntern EqualityExpressionIntern() throws ParseException {
        EqualityOp equalityOp;
        InstanceOfExpression instanceOfExpression;
        Token firstToken=token;
    equalityOp = EqualityOp();
    instanceOfExpression = InstanceOfExpression();
         {if (true) return new EqualityExpressionIntern(equalityOp, instanceOfExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityOp EqualityOp() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
         {if (true) return new EqualityOp1(firstToken.next,token);}
      break;
    case NE:
      jj_consume_token(NE);
         {if (true) return new EqualityOp2(firstToken.next,token);}
      break;
    default:
      jj_la1[110] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public InstanceOfExpression InstanceOfExpression() throws ParseException {
        RelationalExpression relationalExpression;
        Type type = null;
        Token firstToken=token;
    relationalExpression = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      type = Type();
      break;
    default:
      jj_la1[111] = jj_gen;
      ;
    }
         {if (true) return new InstanceOfExpression(relationalExpression, type, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpression RelationalExpression() throws ParseException {
        ShiftExpression shiftExpression;
        RelationalExpressionIntern relationalExpressionIntern;
        ArrayList<RelationalExpressionIntern> relationalExpressionInternList = new ArrayList<RelationalExpressionIntern>();
        Token firstToken=token;
    shiftExpression = ShiftExpression();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LE:
      case GE:
      case GT:
        ;
        break;
      default:
        jj_la1[112] = jj_gen;
        break label_40;
      }
      relationalExpressionIntern = RelationalExpressionIntern();
                                                                                                   relationalExpressionInternList.add(relationalExpressionIntern);
    }
         {if (true) return new RelationalExpression(shiftExpression, relationalExpressionInternList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpressionIntern RelationalExpressionIntern() throws ParseException {
        RelationalOp relationalOp;
        ShiftExpression shiftExpression;
        Token firstToken=token;
    relationalOp = RelationalOp();
    shiftExpression = ShiftExpression();
         {if (true) return new RelationalExpressionIntern(relationalOp, shiftExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalOp RelationalOp() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
         {if (true) return new RelationalOp1(firstToken.next,token);}
      break;
    case GT:
      jj_consume_token(GT);
         {if (true) return new RelationalOp2(firstToken.next,token);}
      break;
    case LE:
      jj_consume_token(LE);
         {if (true) return new RelationalOp3(firstToken.next,token);}
      break;
    case GE:
      jj_consume_token(GE);
         {if (true) return new RelationalOp4(firstToken.next,token);}
      break;
    default:
      jj_la1[113] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ShiftExpression ShiftExpression() throws ParseException {
        AdditiveExpression additiveExpression;
        ShiftExpressionRight shiftExpressionRight;
        ArrayList<ShiftExpressionRight> shiftExpressionRightList = new ArrayList<ShiftExpressionRight>();
        Token firstToken=token;
    additiveExpression = AdditiveExpression();
    label_41:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_41;
      }
      shiftExpressionRight = ShiftExpressionRight();
                                                                                                          shiftExpressionRightList.add(shiftExpressionRight);
    }
         {if (true) return new ShiftExpression(additiveExpression, shiftExpressionRightList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ShiftExpressionRight ShiftExpressionRight() throws ParseException {
        ShiftOp shiftOp;
        AdditiveExpression additiveExpression;
        Token firstToken=token;
    shiftOp = ShiftOp();
    additiveExpression = AdditiveExpression();
         {if (true) return new ShiftExpressionRight(shiftOp, additiveExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ShiftOp ShiftOp() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 142:
      jj_consume_token(142);
         {if (true) return new ShiftOp1(firstToken.next,token);}
      break;
    default:
      jj_la1[114] = jj_gen;
      if (jj_2_30(3)) {
        jj_consume_token(GT);
        jj_consume_token(GT);
        jj_consume_token(GT);
         {if (true) return new ShiftOp2(firstToken.next,token);}
      } else if (jj_2_31(2)) {
        jj_consume_token(GT);
        jj_consume_token(GT);
         {if (true) return new ShiftOp3(firstToken.next,token);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpression AdditiveExpression() throws ParseException {
        MultiplicativeExpression multiplicativeExpression;
        AdditiveExpressionIntern additiveExpressionIntern;
        ArrayList<AdditiveExpressionIntern> additiveExpressionInternList = new ArrayList<AdditiveExpressionIntern>();
        Token firstToken=token;
    multiplicativeExpression = MultiplicativeExpression();
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[115] = jj_gen;
        break label_42;
      }
      additiveExpressionIntern = AdditiveExpressionIntern();
                                                                                                                 additiveExpressionInternList.add(additiveExpressionIntern);
    }
         {if (true) return new AdditiveExpression(multiplicativeExpression, additiveExpressionInternList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpressionIntern AdditiveExpressionIntern() throws ParseException {
        AdditiveOp additiveOp;
        MultiplicativeExpression multiplicativeExpression;
        Token firstToken=token;
    additiveOp = AdditiveOp();
    multiplicativeExpression = MultiplicativeExpression();
         {if (true) return new AdditiveExpressionIntern(additiveOp, multiplicativeExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AdditiveOp AdditiveOp() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
         {if (true) return new AdditiveOp1(firstToken.next,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
         {if (true) return new AdditiveOp2(firstToken.next,token);}
      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
        UnaryExpression unaryExpression;
        MultiplicativeExpressionIntern multiplicativeExpressionIntern;
        ArrayList<MultiplicativeExpressionIntern> multiplicativeExpressionInternList = new ArrayList<MultiplicativeExpressionIntern>();
        Token firstToken=token;
    unaryExpression = UnaryExpression();
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_43;
      }
      multiplicativeExpressionIntern = MultiplicativeExpressionIntern();
                                                                                                           multiplicativeExpressionInternList.add(multiplicativeExpressionIntern);
    }
         {if (true) return new MultiplicativeExpression(unaryExpression, multiplicativeExpressionInternList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpressionIntern MultiplicativeExpressionIntern() throws ParseException {
        MultiplicativeOp multiplicativeOp;
        UnaryExpression unaryExpression;
        Token firstToken=token;
    multiplicativeOp = MultiplicativeOp();
    unaryExpression = UnaryExpression();
         {if (true) return new MultiplicativeExpressionIntern(multiplicativeOp, unaryExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeOp MultiplicativeOp() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new MultiplicativeOp1(firstToken.next,token);}
      break;
    case SLASH:
      jj_consume_token(SLASH);
         {if (true) return new MultiplicativeOp2(firstToken.next,token);}
      break;
    case REM:
      jj_consume_token(REM);
         {if (true) return new MultiplicativeOp3(firstToken.next,token);}
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpression UnaryExpression() throws ParseException {
        AdditiveOp additiveOp;
        UnaryExpression unaryExpression;
        PreIncrementExpression preIncrementExpression;
        PreDecrementExpression preDecrementExpression;
        UnaryExpressionNotPlusMinus unaryExpressionNotPlusMinus;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      additiveOp = AdditiveOp();
      unaryExpression = UnaryExpression();
         {if (true) return new UnaryExpression1(additiveOp, unaryExpression, firstToken.next,token);}
      break;
    case INCR:
      preIncrementExpression = PreIncrementExpression();
         {if (true) return new UnaryExpression2(preIncrementExpression, firstToken.next,token);}
      break;
    case DECR:
      preDecrementExpression = PreDecrementExpression();
         {if (true) return new UnaryExpression3(preDecrementExpression, firstToken.next,token);}
      break;
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case IDENTIFIER:
      unaryExpressionNotPlusMinus = UnaryExpressionNotPlusMinus();
         {if (true) return new UnaryExpression4(unaryExpressionNotPlusMinus, firstToken.next,token);}
      break;
    default:
      jj_la1[119] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PreIncrementExpression PreIncrementExpression() throws ParseException {
        PrimaryExpression primaryExpression;
        Token firstToken=token;
    jj_consume_token(INCR);
    primaryExpression = PrimaryExpression();
         {if (true) return new PreIncrementExpression(primaryExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PreDecrementExpression PreDecrementExpression() throws ParseException {
        PrimaryExpression primaryExpression;
        Token firstToken=token;
    jj_consume_token(DECR);
    primaryExpression = PrimaryExpression();
         {if (true) return new PreDecrementExpression(primaryExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() throws ParseException {
        UnaryOp unaryOp;
        UnaryExpression unaryExpression;
        CastExpression castExpression;
        PostfixExpression postfixExpression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      unaryOp = UnaryOp();
      unaryExpression = UnaryExpression();
         {if (true) return new UnaryExpressionNotPlusMinus1(unaryOp, unaryExpression, firstToken.next,token);}
      break;
    default:
      jj_la1[120] = jj_gen;
      if (jj_2_32(2147483647)) {
        castExpression = CastExpression();
         {if (true) return new UnaryExpressionNotPlusMinus2(castExpression, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _OPTIONS:
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _JAVACODE:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case IDENTIFIER:
          postfixExpression = PostfixExpression();
         {if (true) return new UnaryExpressionNotPlusMinus3(postfixExpression, firstToken.next,token);}
          break;
        default:
          jj_la1[121] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public UnaryOp UnaryOp() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
         {if (true) return new UnaryOp1(firstToken.next,token);}
      break;
    case BANG:
      jj_consume_token(BANG);
         {if (true) return new UnaryOp2(firstToken.next,token);}
      break;
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CastLookahead CastLookahead() throws ParseException {
        PrimitiveType primitiveType;
        Type type;
        Type type1;
        CastLAOp castLAOp;
        Token firstToken=token;
    if (jj_2_33(2)) {
      jj_consume_token(LPAREN);
      primitiveType = PrimitiveType();
         {if (true) return new CastLookahead1(primitiveType, firstToken.next,token);}
    } else if (jj_2_34(2147483647)) {
      jj_consume_token(LPAREN);
      type = Type();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
         {if (true) return new CastLookahead2(type, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        type1 = Type();
        jj_consume_token(RPAREN);
        castLAOp = CastLAOp();
         {if (true) return new CastLookahead3(type1, castLAOp, firstToken.next,token);}
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public CastLAOp CastLAOp() throws ParseException {
        JavaIdentifier javaIdentifier;
        Literal literal;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
         {if (true) return new CastLAOp1(firstToken.next,token);}
      break;
    case BANG:
      jj_consume_token(BANG);
         {if (true) return new CastLAOp2(firstToken.next,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
         {if (true) return new CastLAOp3(firstToken.next,token);}
      break;
    case THIS:
      jj_consume_token(THIS);
         {if (true) return new CastLAOp4(firstToken.next,token);}
      break;
    case SUPER:
      jj_consume_token(SUPER);
         {if (true) return new CastLAOp5(firstToken.next,token);}
      break;
    case NEW:
      jj_consume_token(NEW);
         {if (true) return new CastLAOp6(firstToken.next,token);}
      break;
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case IDENTIFIER:
      javaIdentifier = JavaIdentifier();
         {if (true) return new CastLAOp7(javaIdentifier, firstToken.next,token);}
      break;
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      literal = Literal();
         {if (true) return new CastLAOp8(literal, firstToken.next,token);}
      break;
    default:
      jj_la1[124] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PostfixExpression PostfixExpression() throws ParseException {
        PrimaryExpression primaryExpression;
        PostfixOp postfixOp = null;
        Token firstToken=token;
    primaryExpression = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      postfixOp = PostfixOp();
      break;
    default:
      jj_la1[125] = jj_gen;
      ;
    }
         {if (true) return new PostfixExpression(primaryExpression, postfixOp, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PostfixOp PostfixOp() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      jj_consume_token(INCR);
         {if (true) return new PostfixOp1(firstToken.next,token);}
      break;
    case DECR:
      jj_consume_token(DECR);
         {if (true) return new PostfixOp2(firstToken.next,token);}
      break;
    default:
      jj_la1[126] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CastExpression CastExpression() throws ParseException {
        Type type;
        UnaryExpression unaryExpression;
        Type type1;
        UnaryExpressionNotPlusMinus unaryExpressionNotPlusMinus;
        Token firstToken=token;
    if (jj_2_35(2147483647)) {
      jj_consume_token(LPAREN);
      type = Type();
      jj_consume_token(RPAREN);
      unaryExpression = UnaryExpression();
         {if (true) return new CastExpression1(type, unaryExpression, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        type1 = Type();
        jj_consume_token(RPAREN);
        unaryExpressionNotPlusMinus = UnaryExpressionNotPlusMinus();
         {if (true) return new CastExpression2(type1, unaryExpressionNotPlusMinus, firstToken.next,token);}
        break;
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
        PrimaryPrefix primaryPrefix;
        PrimarySuffix primarySuffix;
        ArrayList<PrimarySuffix> primarySuffixList = new ArrayList<PrimarySuffix>();
        Token firstToken=token;
    primaryPrefix = PrimaryPrefix();
    label_44:
    while (true) {
      if (jj_2_36(2)) {
        ;
      } else {
        break label_44;
      }
      primarySuffix = PrimarySuffix();
                                                                                  primarySuffixList.add(primarySuffix);
    }
         {if (true) return new PrimaryExpression(primaryPrefix, primarySuffixList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MemberSelector MemberSelector() throws ParseException {
        TypeArguments typeArguments;
        JavaIdentifier javaIdentifier;
        Token firstToken=token;
    jj_consume_token(DOT);
    typeArguments = TypeArguments();
    javaIdentifier = JavaIdentifier();
         {if (true) return new MemberSelector(typeArguments, javaIdentifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryPrefix PrimaryPrefix() throws ParseException {
        Literal literal;
        JavaIdentifier javaIdentifier;
        Expression expression;
        AllocationExpression allocationExpression;
        ResultType resultType;
        Name name;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      literal = Literal();
         {if (true) return new PrimaryPrefix1(literal, firstToken.next,token);}
      break;
    case THIS:
      jj_consume_token(THIS);
         {if (true) return new PrimaryPrefix2(firstToken.next,token);}
      break;
    case SUPER:
      jj_consume_token(SUPER);
      jj_consume_token(DOT);
      javaIdentifier = JavaIdentifier();
         {if (true) return new PrimaryPrefix3(javaIdentifier, firstToken.next,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      expression = Expression();
      jj_consume_token(RPAREN);
         {if (true) return new PrimaryPrefix4(expression, firstToken.next,token);}
      break;
    case NEW:
      allocationExpression = AllocationExpression();
         {if (true) return new PrimaryPrefix5(allocationExpression, firstToken.next,token);}
      break;
    default:
      jj_la1[128] = jj_gen;
      if (jj_2_37(2147483647)) {
        resultType = ResultType();
        jj_consume_token(DOT);
        jj_consume_token(CLASS);
         {if (true) return new PrimaryPrefix6(resultType, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _OPTIONS:
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _JAVACODE:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case IDENTIFIER:
          name = Name();
         {if (true) return new PrimaryPrefix7(name, firstToken.next,token);}
          break;
        default:
          jj_la1[129] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public PrimarySuffix PrimarySuffix() throws ParseException {
        AllocationExpression allocationExpression;
        MemberSelector memberSelector;
        Expression expression;
        JavaIdentifier javaIdentifier;
        Arguments arguments;
        Token firstToken=token;
    if (jj_2_38(2)) {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
         {if (true) return new PrimarySuffix1(firstToken.next,token);}
    } else if (jj_2_39(2)) {
      jj_consume_token(DOT);
      allocationExpression = AllocationExpression();
         {if (true) return new PrimarySuffix2(allocationExpression, firstToken.next,token);}
    } else if (jj_2_40(3)) {
      memberSelector = MemberSelector();
         {if (true) return new PrimarySuffix3(memberSelector, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        expression = Expression();
        jj_consume_token(RBRACKET);
         {if (true) return new PrimarySuffix4(expression, firstToken.next,token);}
        break;
      case DOT:
        jj_consume_token(DOT);
        javaIdentifier = JavaIdentifier();
         {if (true) return new PrimarySuffix5(javaIdentifier, firstToken.next,token);}
        break;
      case LPAREN:
        arguments = Arguments();
         {if (true) return new PrimarySuffix6(arguments, firstToken.next,token);}
        break;
      default:
        jj_la1[130] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
        Token t;
        ASTStringNode integer_literal;
        ASTStringNode floating_point_literal;
        ASTStringNode character_literal;
        ASTStringNode string_literal;
        BooleanLiteral booleanLiteral;
        NullLiteral nullLiteral;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                            integer_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Literal1(integer_literal, firstToken.next,token);}
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                   floating_point_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Literal2(floating_point_literal, firstToken.next,token);}
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                              character_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Literal3(character_literal, firstToken.next,token);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Literal4(string_literal, firstToken.next,token);}
      break;
    case FALSE:
    case TRUE:
      booleanLiteral = BooleanLiteral();
         {if (true) return new Literal5(booleanLiteral, firstToken.next,token);}
      break;
    case NULL:
      nullLiteral = NullLiteral();
         {if (true) return new Literal6(nullLiteral, firstToken.next,token);}
      break;
    default:
      jj_la1[131] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BooleanLiteral BooleanLiteral() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
         {if (true) return new BooleanLiteral1(firstToken.next,token);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
         {if (true) return new BooleanLiteral2(firstToken.next,token);}
      break;
    default:
      jj_la1[132] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NullLiteral NullLiteral() throws ParseException {
        Token firstToken=token;
    jj_consume_token(NULL);
         {if (true) return new NullLiteral(firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Arguments Arguments() throws ParseException {
        ArgumentList argumentList = null;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
      argumentList = ArgumentList();
      break;
    default:
      jj_la1[133] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
         {if (true) return new Arguments(argumentList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ArgumentList ArgumentList() throws ParseException {
        Expression expression;
        Expression expression1;
        ArrayList<Expression> expression1List = new ArrayList<Expression>();
        Token firstToken=token;
    expression = Expression();
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[134] = jj_gen;
        break label_45;
      }
      jj_consume_token(COMMA);
      expression1 = Expression();
                                                              expression1List.add(expression1);
    }
         {if (true) return new ArgumentList(expression, expression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AllocationExpression AllocationExpression() throws ParseException {
        PrimitiveType primitiveType;
        ArrayDimsAndInits arrayDimsAndInits;
        ClassOrInterfaceType classOrInterfaceType;
        TypeArguments typeArguments = null;
        AllocationExpressionInit allocationExpressionInit;
        Token firstToken=token;
    if (jj_2_41(2)) {
      jj_consume_token(NEW);
      primitiveType = PrimitiveType();
      arrayDimsAndInits = ArrayDimsAndInits();
         {if (true) return new AllocationExpression1(primitiveType, arrayDimsAndInits, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        classOrInterfaceType = ClassOrInterfaceType();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          typeArguments = TypeArguments();
          break;
        default:
          jj_la1[135] = jj_gen;
          ;
        }
        allocationExpressionInit = AllocationExpressionInit();
         {if (true) return new AllocationExpression2(classOrInterfaceType, typeArguments, allocationExpressionInit, firstToken.next,token);}
        break;
      default:
        jj_la1[136] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public AllocationExpressionInit AllocationExpressionInit() throws ParseException {
        ArrayDimsAndInits arrayDimsAndInits;
        Arguments arguments;
        ClassOrInterfaceBody classOrInterfaceBody = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      arrayDimsAndInits = ArrayDimsAndInits();
         {if (true) return new AllocationExpressionInit1(arrayDimsAndInits, firstToken.next,token);}
      break;
    case LPAREN:
      arguments = Arguments();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        classOrInterfaceBody = ClassOrInterfaceBody();
        break;
      default:
        jj_la1[137] = jj_gen;
        ;
      }
         {if (true) return new AllocationExpressionInit2(arguments, classOrInterfaceBody, firstToken.next,token);}
      break;
    default:
      jj_la1[138] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayDimsAndInits ArrayDimsAndInits() throws ParseException {
        Expression expression;
        Expression expression1;
        ArrayList<Expression> expression1List = new ArrayList<Expression>();
        ASTTextNode text557;
        ArrayList<ASTTextNode> text557List = new ArrayList<ASTTextNode>();
        ASTTextNode text558;
        ArrayList<ASTTextNode> text558List = new ArrayList<ASTTextNode>();
        ArrayInitializer arrayInitializer;
        Token firstToken=token;
    if (jj_2_44(2)) {
      jj_consume_token(LBRACKET);
      expression = Expression();
      jj_consume_token(RBRACKET);
      label_46:
      while (true) {
        if (jj_2_42(2)) {
          ;
        } else {
          break label_46;
        }
        jj_consume_token(LBRACKET);
        expression1 = Expression();
                                                                                                expression1List.add(expression1);
        jj_consume_token(RBRACKET);
      }
      label_47:
      while (true) {
        if (jj_2_43(2)) {
          ;
        } else {
          break label_47;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                                                                                                                                                text557=new ASTTextNode(new String[]{"[","]"},new WToken(token));
                                                                                                                                                                                                                                   text557List.add(text557);
      }
         {if (true) return new ArrayDimsAndInits1(expression, expression1List, text557List, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        label_48:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                  text558=new ASTTextNode(new String[]{"[","]"},new WToken(token));
                                                                                     text558List.add(text558);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[139] = jj_gen;
            break label_48;
          }
        }
        arrayInitializer = ArrayInitializer();
         {if (true) return new ArrayDimsAndInits2(text558List, arrayInitializer, firstToken.next,token);}
        break;
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
        LabeledStatement labeledStatement;
        AssertStatement assertStatement;
        Block block;
        EmptyStatement emptyStatement;
        StatementExpression statementExpression;
        SwitchStatement switchStatement;
        IASTNode ifStatement;
        IASTNode whileStatement;
        IASTNode doStatement;
        IASTNode forStatement;
        BreakStatement breakStatement;
        ContinueStatement continueStatement;
        ReturnStatement returnStatement;
        ThrowStatement throwStatement;
        IASTNode synchronizedStatement;
        IASTNode tryStatement;
        Token firstToken=token;
    if (jj_2_45(2)) {
      labeledStatement = LabeledStatement();
         {if (true) return new Statement1(labeledStatement, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
        assertStatement = AssertStatement();
         {if (true) return new Statement2(assertStatement, firstToken.next,token);}
        break;
      case LBRACE:
        block = Block();
         {if (true) return new Statement3(block, firstToken.next,token);}
        break;
      case SEMICOLON:
        emptyStatement = EmptyStatement();
         {if (true) return new Statement4(emptyStatement, firstToken.next,token);}
        break;
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case INCR:
      case DECR:
      case IDENTIFIER:
        statementExpression = StatementExpression();
        jj_consume_token(SEMICOLON);
         {if (true) return new Statement5(statementExpression, firstToken.next,token);}
        break;
      case SWITCH:
        switchStatement = SwitchStatement();
         {if (true) return new Statement6(switchStatement, firstToken.next,token);}
        break;
      case IF:
        ifStatement = IfStatement();
         {if (true) return new Statement7(ifStatement, firstToken.next,token);}
        break;
      case WHILE:
        whileStatement = WhileStatement();
         {if (true) return new Statement8(whileStatement, firstToken.next,token);}
        break;
      case DO:
        doStatement = DoStatement();
         {if (true) return new Statement9(doStatement, firstToken.next,token);}
        break;
      case FOR:
        forStatement = ForStatement();
         {if (true) return new Statement10(forStatement, firstToken.next,token);}
        break;
      case BREAK:
        breakStatement = BreakStatement();
         {if (true) return new Statement11(breakStatement, firstToken.next,token);}
        break;
      case CONTINUE:
        continueStatement = ContinueStatement();
         {if (true) return new Statement12(continueStatement, firstToken.next,token);}
        break;
      case RETURN:
        returnStatement = ReturnStatement();
         {if (true) return new Statement13(returnStatement, firstToken.next,token);}
        break;
      case THROW:
        throwStatement = ThrowStatement();
         {if (true) return new Statement14(throwStatement, firstToken.next,token);}
        break;
      case SYNCHRONIZED:
        synchronizedStatement = SynchronizedStatement();
         {if (true) return new Statement15(synchronizedStatement, firstToken.next,token);}
        break;
      case TRY:
        tryStatement = TryStatement();
         {if (true) return new Statement16(tryStatement, firstToken.next,token);}
        break;
      default:
        jj_la1[141] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public AssertStatement AssertStatement() throws ParseException {
        Expression expression;
        Expression expression1 = null;
        Token firstToken=token;
    jj_consume_token(ASSERT);
    expression = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      expression1 = Expression();
      break;
    default:
      jj_la1[142] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
         {if (true) return new AssertStatement(expression, expression1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public LabeledStatement LabeledStatement() throws ParseException {
        JavaIdentifier javaIdentifier;
        Statement statement;
        Token firstToken=token;
    javaIdentifier = JavaIdentifier();
    jj_consume_token(COLON);
    statement = Statement();
         {if (true) return new LabeledStatement(javaIdentifier, statement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
        BlockStatement blockStatement;
        ArrayList<BlockStatement> blockStatementList = new ArrayList<BlockStatement>();
        Token firstToken=token;
    jj_consume_token(LBRACE);
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[143] = jj_gen;
        break label_49;
      }
      blockStatement = BlockStatement();
                                             blockStatementList.add(blockStatement);
    }
    jj_consume_token(RBRACE);
         {if (true) return new Block(blockStatementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public BlockStatement BlockStatement() throws ParseException {
        LocalVariableDeclaration localVariableDeclaration;
        Statement statement;
        ClassOrInterfaceDeclaration classOrInterfaceDeclaration;
        Token firstToken=token;
    if (jj_2_46(2147483647)) {
      localVariableDeclaration = LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
         {if (true) return new BlockStatement1(localVariableDeclaration, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case IDENTIFIER:
        statement = Statement();
         {if (true) return new BlockStatement2(statement, firstToken.next,token);}
        break;
      case CLASS:
      case INTERFACE:
        classOrInterfaceDeclaration = ClassOrInterfaceDeclaration();
         {if (true) return new BlockStatement3(classOrInterfaceDeclaration, firstToken.next,token);}
        break;
      default:
        jj_la1[144] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public LocalVariableDeclaration LocalVariableDeclaration() throws ParseException {
        ASTTextNode text559 = null;
        Type type;
        VariableDeclarator variableDeclarator;
        VariableDeclarator variableDeclarator1;
        ArrayList<VariableDeclarator> variableDeclarator1List = new ArrayList<VariableDeclarator>();
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
                  text559=new ASTTextNode("final",new WToken(token));
      break;
    default:
      jj_la1[145] = jj_gen;
      ;
    }
    type = Type();
    variableDeclarator = VariableDeclarator();
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[146] = jj_gen;
        break label_50;
      }
      jj_consume_token(COMMA);
      variableDeclarator1 = VariableDeclarator();
                                                                                                                                                                          variableDeclarator1List.add(variableDeclarator1);
    }
         {if (true) return new LocalVariableDeclaration(text559, type, variableDeclarator, variableDeclarator1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public EmptyStatement EmptyStatement() throws ParseException {
        Token firstToken=token;
    jj_consume_token(SEMICOLON);
         {if (true) return new EmptyStatement(firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public StatementExpression StatementExpression() throws ParseException {
        PreIncrementExpression preIncrementExpression;
        PreDecrementExpression preDecrementExpression;
        PrimaryExpression primaryExpression;
        StatementExpressionAssignment statementExpressionAssignment = null;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      preIncrementExpression = PreIncrementExpression();
         {if (true) return new StatementExpression1(preIncrementExpression, firstToken.next,token);}
      break;
    case DECR:
      preDecrementExpression = PreDecrementExpression();
         {if (true) return new StatementExpression2(preDecrementExpression, firstToken.next,token);}
      break;
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case IDENTIFIER:
      primaryExpression = PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case 139:
      case 140:
      case 141:
        statementExpressionAssignment = StatementExpressionAssignment();
        break;
      default:
        jj_la1[147] = jj_gen;
        ;
      }
         {if (true) return new StatementExpression3(primaryExpression, statementExpressionAssignment, firstToken.next,token);}
      break;
    default:
      jj_la1[148] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StatementExpressionAssignment StatementExpressionAssignment() throws ParseException {
        AssignmentOperator assignmentOperator;
        Expression expression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      jj_consume_token(INCR);
         {if (true) return new StatementExpressionAssignment1(firstToken.next,token);}
      break;
    case DECR:
      jj_consume_token(DECR);
         {if (true) return new StatementExpressionAssignment2(firstToken.next,token);}
      break;
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case 139:
    case 140:
    case 141:
      assignmentOperator = AssignmentOperator();
      expression = Expression();
         {if (true) return new StatementExpressionAssignment3(assignmentOperator, expression, firstToken.next,token);}
      break;
    default:
      jj_la1[149] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SwitchStatement SwitchStatement() throws ParseException {
        Expression expression;
        SwitchStatementLabel switchStatementLabel;
        ArrayList<SwitchStatementLabel> switchStatementLabelList = new ArrayList<SwitchStatementLabel>();
        Token firstToken=token;
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[150] = jj_gen;
        break label_51;
      }
      switchStatementLabel = SwitchStatementLabel();
                                                                                                  switchStatementLabelList.add(switchStatementLabel);
    }
    jj_consume_token(RBRACE);
         {if (true) return new SwitchStatement(expression, switchStatementLabelList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchStatementLabel SwitchStatementLabel() throws ParseException {
        SwitchLabel switchLabel;
        BlockStatement blockStatement;
        ArrayList<BlockStatement> blockStatementList = new ArrayList<BlockStatement>();
        Token firstToken=token;
    switchLabel = SwitchLabel();
    label_52:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[151] = jj_gen;
        break label_52;
      }
      blockStatement = BlockStatement();
                                                                   blockStatementList.add(blockStatement);
    }
         {if (true) return new SwitchStatementLabel(switchLabel, blockStatementList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchLabel SwitchLabel() throws ParseException {
        Expression expression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      expression = Expression();
      jj_consume_token(COLON);
         {if (true) return new SwitchLabel1(expression, firstToken.next,token);}
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
         {if (true) return new SwitchLabel2(firstToken.next,token);}
      break;
    default:
      jj_la1[152] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IfStatement IfStatement() throws ParseException {
        Expression expression;
        Statement statement;
        Statement statement1 = null;
        Token firstToken=token;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    statement = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      statement1 = Statement();
      break;
    default:
      jj_la1[153] = jj_gen;
      ;
    }
         {if (true) return new IfStatement(expression, statement, statement1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public WhileStatement WhileStatement() throws ParseException {
        Expression expression;
        Statement statement;
        Token firstToken=token;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    statement = Statement();
         {if (true) return new WhileStatement(expression, statement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public DoStatement DoStatement() throws ParseException {
        Statement statement;
        Expression expression;
        Token firstToken=token;
    jj_consume_token(DO);
    statement = Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
         {if (true) return new DoStatement(statement, expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ForStatement ForStatement() throws ParseException {
        ForStatementInternal forStatementInternal;
        Statement statement;
        Token firstToken=token;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    forStatementInternal = ForStatementInternal();
    jj_consume_token(RPAREN);
    statement = Statement();
         {if (true) return new ForStatement(forStatementInternal, statement, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ForStatementInternal ForStatementInternal() throws ParseException {
        Type type;
        JavaIdentifier javaIdentifier;
        Expression expression;
        ForInit forInit = null;
        Expression expression1 = null;
        ForUpdate forUpdate = null;
        Token firstToken=token;
    if (jj_2_47(2147483647)) {
      type = Type();
      javaIdentifier = JavaIdentifier();
      jj_consume_token(COLON);
      expression = Expression();
         {if (true) return new ForStatementInternal1(type, javaIdentifier, expression, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case SEMICOLON:
      case INCR:
      case DECR:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _OPTIONS:
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _JAVACODE:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case INCR:
        case DECR:
        case IDENTIFIER:
          forInit = ForInit();
          break;
        default:
          jj_la1[154] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _OPTIONS:
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _JAVACODE:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case IDENTIFIER:
          expression1 = Expression();
          break;
        default:
          jj_la1[155] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _OPTIONS:
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _JAVACODE:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case INCR:
        case DECR:
        case IDENTIFIER:
          forUpdate = ForUpdate();
          break;
        default:
          jj_la1[156] = jj_gen;
          ;
        }
         {if (true) return new ForStatementInternal2(forInit, expression1, forUpdate, firstToken.next,token);}
        break;
      default:
        jj_la1[157] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ForInit ForInit() throws ParseException {
        LocalVariableDeclaration localVariableDeclaration;
        StatementExpressionList statementExpressionList;
        Token firstToken=token;
    if (jj_2_48(2147483647)) {
      localVariableDeclaration = LocalVariableDeclaration();
         {if (true) return new ForInit1(localVariableDeclaration, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case INCR:
      case DECR:
      case IDENTIFIER:
        statementExpressionList = StatementExpressionList();
         {if (true) return new ForInit2(statementExpressionList, firstToken.next,token);}
        break;
      default:
        jj_la1[158] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public StatementExpressionList StatementExpressionList() throws ParseException {
        StatementExpression statementExpression;
        StatementExpression statementExpression1;
        ArrayList<StatementExpression> statementExpression1List = new ArrayList<StatementExpression>();
        Token firstToken=token;
    statementExpression = StatementExpression();
    label_53:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[159] = jj_gen;
        break label_53;
      }
      jj_consume_token(COMMA);
      statementExpression1 = StatementExpression();
                                                                                                  statementExpression1List.add(statementExpression1);
    }
         {if (true) return new StatementExpressionList(statementExpression, statementExpression1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ForUpdate ForUpdate() throws ParseException {
        StatementExpressionList statementExpressionList;
        Token firstToken=token;
    statementExpressionList = StatementExpressionList();
         {if (true) return new ForUpdate(statementExpressionList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public BreakStatement BreakStatement() throws ParseException {
        JavaIdentifier javaIdentifier = null;
        Token firstToken=token;
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case IDENTIFIER:
      javaIdentifier = JavaIdentifier();
      break;
    default:
      jj_la1[160] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
         {if (true) return new BreakStatement(javaIdentifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ContinueStatement ContinueStatement() throws ParseException {
        JavaIdentifier javaIdentifier = null;
        Token firstToken=token;
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case IDENTIFIER:
      javaIdentifier = JavaIdentifier();
      break;
    default:
      jj_la1[161] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
         {if (true) return new ContinueStatement(javaIdentifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStatement ReturnStatement() throws ParseException {
        Expression expression = null;
        Token firstToken=token;
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
      expression = Expression();
      break;
    default:
      jj_la1[162] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
         {if (true) return new ReturnStatement(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ThrowStatement ThrowStatement() throws ParseException {
        Expression expression;
        Token firstToken=token;
    jj_consume_token(THROW);
    expression = Expression();
    jj_consume_token(SEMICOLON);
         {if (true) return new ThrowStatement(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizedStatement SynchronizedStatement() throws ParseException {
        Expression expression;
        Block block;
        Token firstToken=token;
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    block = Block();
         {if (true) return new SynchronizedStatement(expression, block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TryStatement TryStatement() throws ParseException {
        Block block;
        TryStatementEnd tryStatementEnd;
        Token firstToken=token;
    jj_consume_token(TRY);
    block = Block();
    tryStatementEnd = TryStatementEnd();
         {if (true) return new TryStatement(block, tryStatementEnd, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TryStatementEnd TryStatementEnd() throws ParseException {
        CatchBlock catchBlock;
        ArrayList<CatchBlock> catchBlockList = new ArrayList<CatchBlock>();
        Block block;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CATCH:
      label_54:
      while (true) {
        catchBlock = CatchBlock();
                                 catchBlockList.add(catchBlock);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[163] = jj_gen;
          break label_54;
        }
      }
         {if (true) return new TryStatementEnd1(catchBlockList, firstToken.next,token);}
      break;
    case FINALLY:
      jj_consume_token(FINALLY);
      block = Block();
         {if (true) return new FinallyBlock(block, firstToken.next,token);}
      break;
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CatchBlock CatchBlock() throws ParseException {
        FormalParameter formalParameter;
        Block block;
        Token firstToken=token;
    jj_consume_token(CATCH);
    jj_consume_token(LPAREN);
    formalParameter = FormalParameter();
    jj_consume_token(RPAREN);
    block = Block();
         {if (true) return new CatchBlock(formalParameter, block, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Annotation Annotation() throws ParseException {
        NormalAnnotation normalAnnotation;
        SingleMemberAnnotation singleMemberAnnotation;
        MarkerAnnotation markerAnnotation;
        Token firstToken=token;
    if (jj_2_49(2147483647)) {
      normalAnnotation = NormalAnnotation();
         {if (true) return new Annotation1(normalAnnotation, firstToken.next,token);}
    } else if (jj_2_50(2147483647)) {
      singleMemberAnnotation = SingleMemberAnnotation();
         {if (true) return new Annotation2(singleMemberAnnotation, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 143:
        markerAnnotation = MarkerAnnotation();
         {if (true) return new Annotation3(markerAnnotation, firstToken.next,token);}
        break;
      default:
        jj_la1[165] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public NormalAnnotation NormalAnnotation() throws ParseException {
        Name name;
        MemberValuePairs memberValuePairs = null;
        Token firstToken=token;
    jj_consume_token(143);
    name = Name();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case IDENTIFIER:
      memberValuePairs = MemberValuePairs();
      break;
    default:
      jj_la1[166] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
         {if (true) return new NormalAnnotation(name, memberValuePairs, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MarkerAnnotation MarkerAnnotation() throws ParseException {
        Name name;
        Token firstToken=token;
    jj_consume_token(143);
    name = Name();
         {if (true) return new MarkerAnnotation(name, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public SingleMemberAnnotation SingleMemberAnnotation() throws ParseException {
        Name name;
        MemberValue memberValue;
        Token firstToken=token;
    jj_consume_token(143);
    name = Name();
    jj_consume_token(LPAREN);
    memberValue = MemberValue();
    jj_consume_token(RPAREN);
         {if (true) return new SingleMemberAnnotation(name, memberValue, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MemberValuePairs MemberValuePairs() throws ParseException {
        MemberValuePair memberValuePair;
        MemberValuePair memberValuePair1;
        ArrayList<MemberValuePair> memberValuePair1List = new ArrayList<MemberValuePair>();
        Token firstToken=token;
    memberValuePair = MemberValuePair();
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[167] = jj_gen;
        break label_55;
      }
      jj_consume_token(COMMA);
      memberValuePair1 = MemberValuePair();
                                                                                  memberValuePair1List.add(memberValuePair1);
    }
         {if (true) return new MemberValuePairs(memberValuePair, memberValuePair1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MemberValuePair MemberValuePair() throws ParseException {
        JavaIdentifier javaIdentifier;
        MemberValue memberValue;
        Token firstToken=token;
    javaIdentifier = JavaIdentifier();
    jj_consume_token(ASSIGN);
    memberValue = MemberValue();
         {if (true) return new MemberValuePair(javaIdentifier, memberValue, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MemberValue MemberValue() throws ParseException {
        Annotation annotation;
        MemberValueArrayInitializer memberValueArrayInitializer;
        ConditionalExpression conditionalExpression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 143:
      annotation = Annotation();
         {if (true) return new MemberValue1(annotation, firstToken.next,token);}
      break;
    case LBRACE:
      memberValueArrayInitializer = MemberValueArrayInitializer();
         {if (true) return new MemberValue2(memberValueArrayInitializer, firstToken.next,token);}
      break;
    case _OPTIONS:
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
      conditionalExpression = ConditionalExpression();
         {if (true) return new MemberValue3(conditionalExpression, firstToken.next,token);}
      break;
    default:
      jj_la1[168] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MemberValueArrayInitializer MemberValueArrayInitializer() throws ParseException {
        MemberValue memberValue;
        MemberValue memberValue1;
        ArrayList<MemberValue> memberValue1List = new ArrayList<MemberValue>();
        ASTTextNode text564 = null;
        Token firstToken=token;
    jj_consume_token(LBRACE);
    memberValue = MemberValue();
    label_56:
    while (true) {
      if (jj_2_51(2)) {
        ;
      } else {
        break label_56;
      }
      jj_consume_token(COMMA);
      memberValue1 = MemberValue();
                                                                                   memberValue1List.add(memberValue1);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
                                                                                                                                text564=new ASTTextNode(",",new WToken(token));
      break;
    default:
      jj_la1[169] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
         {if (true) return new MemberValueArrayInitializer(memberValue, memberValue1List, text564, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationTypeDeclaration AnnotationTypeDeclaration() throws ParseException {
        JavaIdentifier javaIdentifier;
        AnnotationTypeBody annotationTypeBody;
        Token firstToken=token;
    jj_consume_token(143);
    jj_consume_token(INTERFACE);
    javaIdentifier = JavaIdentifier();
    annotationTypeBody = AnnotationTypeBody();
         {if (true) return new AnnotationTypeDeclaration(javaIdentifier, annotationTypeBody, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationTypeBody AnnotationTypeBody() throws ParseException {
        AnnotationTypeMemberDeclaration annotationTypeMemberDeclaration;
        ArrayList<AnnotationTypeMemberDeclaration> annotationTypeMemberDeclarationList = new ArrayList<AnnotationTypeMemberDeclaration>();
        Token firstToken=token;
    jj_consume_token(LBRACE);
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _OPTIONS:
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case IDENTIFIER:
      case 143:
        ;
        break;
      default:
        jj_la1[170] = jj_gen;
        break label_57;
      }
      annotationTypeMemberDeclaration = AnnotationTypeMemberDeclaration();
                                                                               annotationTypeMemberDeclarationList.add(annotationTypeMemberDeclaration);
    }
    jj_consume_token(RBRACE);
         {if (true) return new AnnotationTypeBody(annotationTypeMemberDeclarationList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationTypeMemberDeclaration AnnotationTypeMemberDeclaration() throws ParseException {
        Modifiers modifiers;
        Type type;
        JavaIdentifier javaIdentifier;
        DefaultValue defaultValue = null;
        Modifiers modifiers1;
        ClassOrInterfaceDeclaration classOrInterfaceDeclaration;
        Modifiers modifiers2;
        EnumDeclaration enumDeclaration;
        Modifiers modifiers3;
        AnnotationTypeDeclaration annotationTypeDeclaration;
        Modifiers modifiers4;
        FieldDeclaration fieldDeclaration;
        Token firstToken=token;
    if (jj_2_52(2147483647)) {
      modifiers = Modifiers();
      type = Type();
      javaIdentifier = JavaIdentifier();
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _DEFAULT:
        defaultValue = DefaultValue();
        break;
      default:
        jj_la1[171] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
         {if (true) return new AnnotationTypeMemberDeclaration1(modifiers, type, javaIdentifier, defaultValue, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case 143:
        modifiers1 = Modifiers();
        classOrInterfaceDeclaration = ClassOrInterfaceDeclaration();
         {if (true) return new AnnotationTypeMemberDeclaration2(modifiers1, classOrInterfaceDeclaration, firstToken.next,token);}
        break;
      default:
        jj_la1[172] = jj_gen;
        if (jj_2_53(2)) {
          modifiers2 = Modifiers();
          enumDeclaration = EnumDeclaration();
         {if (true) return new AnnotationTypeMemberDeclaration3(modifiers2, enumDeclaration, firstToken.next,token);}
        } else if (jj_2_54(2)) {
          modifiers3 = Modifiers();
          annotationTypeDeclaration = AnnotationTypeDeclaration();
         {if (true) return new AnnotationTypeMemberDeclaration4(modifiers3, annotationTypeDeclaration, firstToken.next,token);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case _OPTIONS:
          case _LOOKAHEAD:
          case _IGNORE_CASE:
          case _PARSER_BEGIN:
          case _PARSER_END:
          case _JAVACODE:
          case _TOKEN:
          case _SPECIAL_TOKEN:
          case _MORE:
          case _SKIP:
          case _TOKEN_MGR_DECLS:
          case _EOF:
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FINAL:
          case FLOAT:
          case INT:
          case LONG:
          case NATIVE:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SYNCHRONIZED:
          case TRANSIENT:
          case VOLATILE:
          case IDENTIFIER:
          case 143:
            modifiers4 = Modifiers();
            fieldDeclaration = FieldDeclaration();
         {if (true) return new AnnotationTypeMemberDeclaration5(modifiers4, fieldDeclaration, firstToken.next,token);}
            break;
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
         {if (true) return new AnnotationTypeMemberDeclaration6(firstToken.next,token);}
            break;
          default:
            jj_la1[173] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public DefaultValue DefaultValue() throws ParseException {
        MemberValue memberValue;
        Token firstToken=token;
    jj_consume_token(_DEFAULT);
    memberValue = MemberValue();
         {if (true) return new DefaultValue(memberValue, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public JavaIdentifier JavaIdentifier() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new JavaIdentifier1(identifier, firstToken.next,token);}
      break;
    case _OPTIONS:
      jj_consume_token(_OPTIONS);
         {if (true) return new JavaIdentifier2(firstToken.next,token);}
      break;
    case _LOOKAHEAD:
      jj_consume_token(_LOOKAHEAD);
         {if (true) return new JavaIdentifier3(firstToken.next,token);}
      break;
    case _IGNORE_CASE:
      jj_consume_token(_IGNORE_CASE);
         {if (true) return new JavaIdentifier4(firstToken.next,token);}
      break;
    case _PARSER_BEGIN:
      jj_consume_token(_PARSER_BEGIN);
         {if (true) return new JavaIdentifier5(firstToken.next,token);}
      break;
    case _PARSER_END:
      jj_consume_token(_PARSER_END);
         {if (true) return new JavaIdentifier6(firstToken.next,token);}
      break;
    case _JAVACODE:
      jj_consume_token(_JAVACODE);
         {if (true) return new JavaIdentifier7(firstToken.next,token);}
      break;
    case _TOKEN:
      jj_consume_token(_TOKEN);
         {if (true) return new JavaIdentifier8(firstToken.next,token);}
      break;
    case _SPECIAL_TOKEN:
      jj_consume_token(_SPECIAL_TOKEN);
         {if (true) return new JavaIdentifier9(firstToken.next,token);}
      break;
    case _MORE:
      jj_consume_token(_MORE);
         {if (true) return new JavaIdentifier10(firstToken.next,token);}
      break;
    case _SKIP:
      jj_consume_token(_SKIP);
         {if (true) return new JavaIdentifier11(firstToken.next,token);}
      break;
    case _TOKEN_MGR_DECLS:
      jj_consume_token(_TOKEN_MGR_DECLS);
         {if (true) return new JavaIdentifier12(firstToken.next,token);}
      break;
    case _EOF:
      jj_consume_token(_EOF);
         {if (true) return new JavaIdentifier13(firstToken.next,token);}
      break;
    default:
      jj_la1[174] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  final private boolean jj_3R_394() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_398()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_314() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_330()) {
    jj_scanpos = xsp;
    if (jj_3R_331()) return true;
    }
    return false;
  }

  final private boolean jj_3R_407() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_406() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_364() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_377()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_378()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_379()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_405() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_406()) {
    jj_scanpos = xsp;
    if (jj_3R_407()) return true;
    }
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_401()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_363()) jj_scanpos = xsp;
    if (jj_3R_364()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_376() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_391()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_375() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_390()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_329() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_67()) return true;
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_360()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_362()) jj_scanpos = xsp;
    if (jj_3R_318()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_328() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_313() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_328()) {
    jj_scanpos = xsp;
    if (jj_3R_329()) return true;
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_62()) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_343() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_3R_315()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_62()) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_3R_314()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_62()) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_3R_313()) return true;
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(_EOF)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(_TOKEN_MGR_DECLS)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(_SKIP)) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(_MORE)) return true;
    return false;
  }

  final private boolean jj_3R_351() {
    if (jj_3R_359()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_3R_258()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(_SPECIAL_TOKEN)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_3R_257()) return true;
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(_TOKEN)) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(_JAVACODE)) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(_PARSER_END)) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(_PARSER_BEGIN)) return true;
    return false;
  }

  final private boolean jj_3R_344() {
    if (jj_3R_352()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(_IGNORE_CASE)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_3R_294()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(_LOOKAHEAD)) return true;
    return false;
  }

  final private boolean jj_3R_389() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(_OPTIONS)) return true;
    return false;
  }

  final private boolean jj_3R_388() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_387() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_374() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_387()) {
    jj_scanpos = xsp;
    if (jj_3R_388()) {
    jj_scanpos = xsp;
    if (jj_3R_389()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_3R_374()) return true;
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_3R_62()) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_3R_62()) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_210()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_351()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_3R_62()) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) return true;
    }
    return false;
  }

  final private boolean jj_3R_320() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_352() {
    if (jj_3R_257()) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_3R_320()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_344()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(142)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(143)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACKET)) return true;
    xsp = jj_scanpos;
    if (jj_3R_268()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_336() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_335()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_343()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_130()) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_326() {
    if (jj_3R_337()) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_190()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_325() {
    if (jj_3R_131()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_356() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_355() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_251()) return true;
    return false;
  }

  final private boolean jj_3R_335() {
    if (jj_3R_69()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_3R_312()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_324() {
    if (jj_3R_335()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_337() {
    if (jj_3R_345()) return true;
    if (jj_3R_325()) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_3R_324()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_192()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_69()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_3R_325()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_326()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(143)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    Token xsp;
    if (jj_3R_160()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_160()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(143)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_3R_310()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_scan_token(143)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_339() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_scan_token(143)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    return false;
  }

  final private boolean jj_3R_338() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(137)) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(143)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_309()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) return true;
    }
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_237()) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_3R_245()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_3R_244()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_3R_327()) return true;
    if (jj_3R_285()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_3R_285()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_286()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_436() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_399()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_421() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_428() {
    if (jj_3R_436()) return true;
    return false;
  }

  final private boolean jj_3R_420() {
    Token xsp;
    if (jj_3R_428()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_428()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_3R_255()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_256()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_415() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_420()) {
    jj_scanpos = xsp;
    if (jj_3R_421()) return true;
    }
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_237()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_99()) return true;
    if (jj_3R_415()) return true;
    return false;
  }

  final private boolean jj_3R_369() {
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_208()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_209()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_440() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_297()) return true;
    return false;
  }

  final private boolean jj_3R_414() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_182()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_413() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_427() {
    if (jj_3R_435()) return true;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_414()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_128()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_129()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_412() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_80()) return true;
    if (jj_scan_token(HOOK)) return true;
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_413()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_80()) return true;
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_412()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_3R_219()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    return false;
  }

  final private boolean jj_3R_426() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_435() {
    if (jj_3R_439()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_410() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_439() {
    if (jj_3R_297()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_440()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(141)) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(140)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(139)) return true;
    return false;
  }

  final private boolean jj_3R_438() {
    if (jj_3R_439()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_437() {
    if (jj_3R_252()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_3R_70()) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_396() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_434() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_437()) {
    jj_scanpos = xsp;
    if (jj_3R_438()) return true;
    }
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_425() {
    if (jj_3R_434()) return true;
    return false;
  }

  final private boolean jj_3R_419() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_425()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_426()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_427()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_404() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_370()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_418() {
    if (jj_3R_70()) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_411() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_418()) {
    jj_scanpos = xsp;
    if (jj_3R_419()) return true;
    }
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_127()) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_411()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_148()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_409() {
    if (jj_3R_417()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_253()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_381() {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_396()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_424() {
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3R_368() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_253()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_410()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_433() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    return false;
  }

  final private boolean jj_3R_432() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_416() {
    if (jj_3R_422()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_423() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_432()) {
    jj_scanpos = xsp;
    if (jj_3R_433()) return true;
    }
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_417() {
    if (jj_3R_423()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_424()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_367() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_381()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_342() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_409()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_431() {
    if (jj_3R_127()) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_3R_334()) return true;
    return false;
  }

  final private boolean jj_3R_430() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_334() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_341()) {
    jj_scanpos = xsp;
    if (jj_3R_342()) return true;
    }
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_429() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_319()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_422() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_429()) {
    jj_scanpos = xsp;
    if (jj_3R_430()) {
    jj_scanpos = xsp;
    if (jj_3R_431()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_416()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_322() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_321() {
    if (jj_3R_258()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_297() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) {
    jj_scanpos = xsp;
    if (jj_3R_323()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_126()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_266()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_403() {
    if (jj_scan_token(138)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    if (jj_3R_370()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_404()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_408() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_83()) return true;
    Token xsp;
    if (jj_3_21()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_252()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    return false;
  }

  final private boolean jj_3R_400() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_399()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_372() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_381()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_384() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_69()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_88()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_408()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_3R_308()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_3R_307()) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_3R_306()) return true;
    return false;
  }

  final private boolean jj_3R_365() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_3R_305()) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_3R_304()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_3R_303()) return true;
    return false;
  }

  final private boolean jj_3R_357() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    if (jj_3R_366()) return true;
    xsp = jj_scanpos;
    if (jj_3R_367()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_368()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_369()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_3R_302()) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_3R_301()) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_3R_300()) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_3R_299()) return true;
    return false;
  }

  final private boolean jj_3R_402() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_3R_298()) return true;
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_3R_297()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_3R_296()) return true;
    return false;
  }

  final private boolean jj_3R_399() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_402()) jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    xsp = jj_scanpos;
    if (jj_3R_403()) jj_scanpos = xsp;
    if (jj_3R_382()) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_3R_295()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_317() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) {
    jj_scanpos = xsp;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_395() {
    if (jj_3R_399()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_400()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_380() {
    if (jj_3R_395()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_366() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_380()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_3R_318()) return true;
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    Token xsp;
    if (jj_3R_292()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_292()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_69()) return true;
    if (jj_3R_366()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_384()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_248() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    return false;
  }

  final private boolean jj_3R_386() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_385() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_373() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_385()) {
    jj_scanpos = xsp;
    if (jj_3R_386()) return true;
    }
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_3R_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_3R_248()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    if (jj_3R_118()) return true;
    xsp = jj_scanpos;
    if (jj_3R_372()) jj_scanpos = xsp;
    if (jj_3R_373()) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) return true;
    }
    return false;
  }

  final private boolean jj_3R_383() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_371() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_370()) return true;
    return false;
  }

  final private boolean jj_3R_397() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_167()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) jj_scanpos = xsp;
    if (jj_3R_250()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_83()) return true;
    if (jj_3R_248()) return true;
    return false;
  }

  final private boolean jj_3R_332() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_316()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_317()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_207()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_379() {
    if (jj_3R_394()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_382() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_397()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3R_370() {
    if (jj_3R_382()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_383()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_246() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) return true;
    }
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_3R_247()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_246()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_3R_70()) return true;
    if (jj_3R_370()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_371()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_62()) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_62()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_62()) return true;
    if (jj_scan_token(ENUM)) return true;
    return false;
  }

  final private boolean jj_3R_350() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_62()) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_62()) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_349() {
    if (jj_3R_62()) return true;
    if (jj_3R_358()) return true;
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_3R_62()) return true;
    if (jj_3R_357()) return true;
    return false;
  }

  final private boolean jj_3R_347() {
    if (jj_3R_62()) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_362() {
    if (jj_3R_376()) return true;
    return false;
  }

  final private boolean jj_3R_346() {
    if (jj_3R_62()) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_393() {
    if (jj_3R_318()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_236()) return true;
    return false;
  }

  final private boolean jj_3R_340() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) {
    jj_scanpos = xsp;
    if (jj_3R_348()) {
    jj_scanpos = xsp;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_391() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_85()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_3R_340()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_378() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_377()) return true;
    return false;
  }

  final private boolean jj_3R_390() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_318() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_333()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_3R_85()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_392() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_361() {
    if (jj_3R_375()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_254()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_401() {
    if (jj_3R_405()) return true;
    return false;
  }

  final private boolean jj_3R_363() {
    if (jj_3R_376()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_163()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_398() {
    if (jj_3R_340()) return true;
    return false;
  }

  final private boolean jj_3R_377() {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_393()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_331() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_330() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_210()) return true;
    return false;
  }

  public JavaCCParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[175];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2,0x40001ffe,0xc,0xc,0x0,0x40001ffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x780,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x50001ffe,0x0,0x0,0x0,0x0,0x0,0x50001ffe,0x0,0x0,0x0,0x0,0x40001ffe,0x40001ffe,0x0,0x0,0x0,0x0,0x0,0x40001ffe,0x0,0x0,0x0,0x0,0x0,0xe0001ffe,0x40001ffe,0x0,0x40000000,0x40001ffe,0x0,0x0,0x40001ffe,0x0,0x40000000,0x40001ffe,0x0,0x0,0x40001ffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40001ffe,0x0,0x40001ffe,0x0,0x0,0x1ffe,0x0,0x0,0x0,0x0,0x1ffe,0x0,0x0,0x0,0x40001ffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0001ffe,0x0,0xe0001ffe,0xe0001ffe,0x0,0x0,0x0,0x40001ffe,0x0,0x0,0xe0001ffe,0x0,0x0,0x40001ffe,0x40001ffe,0x40001ffe,0x40001ffe,0x40001ffe,0x0,0x1ffe,0x1ffe,0x40001ffe,0x0,0x0,0x0,0x1ffe,0x0,0x40001ffe,0x0,0x50001ffe,0x0,0x10000000,0x50001ffe,0x1ffe,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0xc2810209,0x0,0x0,0x2000,0xc2810209,0xc0000000,0x0,0x0,0xc0000000,0x0,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x200000,0xc5004810,0x0,0x0,0xc4004000,0xc4004000,0x0,0x0,0x1000,0x100000,0x1000010,0x0,0x0,0x100000,0x0,0x0,0xc7814a19,0x0,0x0,0x0,0x1000,0x0,0xc7814a19,0x0,0x0,0x0,0x0,0x1a812209,0x1a812209,0x0,0x0,0x0,0x0,0x0,0x2814209,0x0,0x4000,0x0,0x0,0x0,0x1b8b6359,0x1a812209,0x0,0x2810209,0x2810209,0x0,0x1000,0x2810209,0x1000,0x2810209,0x2810209,0x0,0x0,0x1a812209,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1a812209,0x0,0x1a812209,0x0,0x0,0x18002000,0x0,0x0,0x0,0x18002000,0x0,0x0,0x10002000,0x2000,0x1a812209,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x1a8b2349,0x0,0x1b8b6359,0x1b8b2359,0x4000,0x0,0x0,0x1a812209,0x0,0x82,0x1b8b6359,0x82,0x400,0x1a816209,0x1a812209,0x1a812209,0x1a816209,0x1a812209,0x0,0x0,0x0,0x1a812209,0x4,0x8004,0x0,0x0,0x0,0x1a812209,0x0,0xc7814a19,0x80,0xc5004010,0xc6814209,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x4005,0x8,0x8,0x8021000,0x4005,0x1,0x400,0x0,0x1,0x400,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x20000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x40002000,0x10000000,0x0,0x8000000,0x0,0x0,0x8000000,0x0,0x0,0x0,0x18000000,0x40000000,0x18000000,0x0,0x40000000,0x20000,0x0,0x8000000,0x0,0x0,0x0,0x0,0x8899,0x8,0x0,0x8899,0x8899,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000c89d,0x10000000,0x40000000,0x0,0x0,0x0,0x4000c89d,0x0,0x0,0x0,0x0,0x5c225124,0x5c225124,0x0,0x0,0x400,0x40000000,0x0,0x4,0x0,0x0,0x0,0x0,0x400,0x5c2373e6,0x1c225124,0x8,0x4,0x4,0x0,0x20,0x4,0x20,0x4,0x4004,0x0,0x0,0x1c225124,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1c225124,0x0,0x1c225124,0x0,0x10000000,0x1c221120,0x0,0x0,0x10000000,0x1c221120,0x0,0x10000000,0xc221000,0x1000,0x1c225124,0x0,0x0,0x0,0x40000000,0x10000000,0x0,0x0,0x5c2373e6,0x0,0x5c2373e6,0x5c2373e6,0x0,0x0,0x0,0x1c225124,0x0,0x0,0x5c2373e6,0x0,0x0,0x1c225124,0x1c225124,0x1c225124,0x1c225124,0x1c225124,0x0,0x0,0x0,0x1c225124,0x0,0x0,0x0,0x0,0x0,0x5c225124,0x0,0x889d,0x0,0x8899,0x889d,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x40,0x0,0x0,0x0,0x40,0x0,0x0,0x8,0x0,0x0,0x0,0x40,0x1,0x1000000,0x8,0x40,0x0,0x0,0x400,0x1000000,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x280200,0x1,0x0,0x10,0x40,0x280200,0x0,0x0,0x40,0x0,0x1000000,0x141,0x280200,0x141,0x8,0x280200,0x0,0x100,0x0,0x8,0x100000,0x0,0x0,0x4,0x0,0x10,0x0,0x0,0x4,0x40,0x0,0x0,0x0,0x8,0x8,0x0,0x8,0x4,0x44,0x0,0x0,0x8,0x0,0x800000,0x44,0x4,0x8,0x20,0x1,0x1e0180,0x1e0180,0x8,0x40,0x0,0x4,0x1,0x0,0x8,0x0,0x0,0x40,0x0,0x60004,0x0,0x0,0x0,0x0,0x8,0x0,0x200,0x0,0x0,0x0,0x8,0xf8000020,0x1e0180,0x8000,0x10000,0x1000000,0x2000000,0x800000,0x4800,0x4800,0x0,0x3040,0x3040,0x0,0x180000,0x180000,0x4600000,0x4600000,0x1e0180,0x180,0x0,0x180,0x0,0x180,0x60000,0x60000,0x0,0x0,0x0,0x11,0x0,0x0,0x1e0180,0x8,0x40,0x0,0x0,0x1,0x1,0x1,0x60004,0x400,0x60004,0x60004,0x0,0x8,0xf8060020,0x60000,0xf8060020,0x0,0x60004,0x0,0x0,0x60000,0x1e0180,0x60000,0x60004,0x60000,0x8,0x0,0x0,0x1e0180,0x0,0x0,0x0,0x0,0x8,0x1e0180,0x8,0x4,0x0,0x0,0x4,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x40,0x40,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x240,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x8000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8040,0x0,0x0,0x0,0x0,0x0,0x8040,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x400,0x0,0x0,0x40,0x40,0x0,0x0,0x40,0x0,0x0,0x40,0x0,0x0,0x40,0x0,0x3807,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x4000,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x40,0x0,0x0,0x3807,0x40,0x3807,0x0,0x40,0x0,0x0,0x40,0x40,0x40,0x40,0x40,0x0,0x40,0x40,0x40,0x0,0x0,0x8000,0x40,0x0,0x8040,0x0,0x8040,0x0,0x8000,0x8040,0x40,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[54];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public JavaCCParser(CharStream stream) {
    token_source = new JavaCCParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 175; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 175; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JavaCCParser(JavaCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 175; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JavaCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 175; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[144];
    for (int i = 0; i < 144; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 175; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 144; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 54; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
