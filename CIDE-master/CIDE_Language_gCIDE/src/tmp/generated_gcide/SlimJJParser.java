/* Generated By:JavaCC: Do not edit this line. SlimJJParser.java */
package tmp.generated_gcide;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

public class SlimJJParser implements SlimJJParserConstants {
/**
	 * Accumulate {@link Token} objects from the token stream until a token
	 * matching <code>tokenKind</code> is consumed from the stream. The tokens
	 * are accumulated in <code>buffer</code>, including the terminating
	 * token.
	 * 
	 * @return a {@link Token} formed by concatenating all intervening tokens
	 *         and special tokens.
	 */
        final private Token accumulateUntilToken(int tokenKind)
                        throws ParseException {

                StringBuffer buffer = new StringBuffer();
                Token token = getNextToken();

                // Initialize result with known information (starting position, etc.):
                //
                Token result = Token.newToken(OTHER);
                result.specialToken = null;

                Token startToken = firstSpecial(token);
                result.beginColumn = startToken.beginColumn;
                result.beginLine = startToken.beginLine;

                // Accumulate tokens until a <code>tokenKind</code> token is found:
                //
                while (token.kind != tokenKind) {

                        // Update information in result:
                        //
                        result.endColumn = token.endColumn;
                        result.endLine = token.endLine;
                        result.next = token.next;

                        if (token.kind == EOF)
                                throw new ParseException("from line " + result.beginLine
                                                + " at column " + result.beginColumn
                                                + ": EOF reached before " + tokenImage[tokenKind]
                                                + " found");

                        accumulate(token, buffer);
                        token = getNextToken();
                }

                accumulate(token, buffer);

                result.image = buffer.toString();
                return result;
        }

        /**
	 * Append the given {@link Token} and any preceding special tokens to a
	 * given {@link StringBuffer}.
	 * 
	 * @param token
	 *            the given JavaCC {@link Token} object
	 * @param buffer
	 *            the buffer to which to append <code>token</code>
	 */
        final private static void accumulate(Token token, StringBuffer buffer) {

                // Append preceding special tokens to <code>buffer</code>:
                //
                Token special = firstSpecial(token);
                if (special != token)
                        while (special != null) {
                                buffer.append(" "+special.toString());
                                special = special.next;
                        }

                // Finally, append the token itself:
                //
                buffer.append(" "+token.toString());
        }

        /**
	 * Finds the first token, special or otherwise, in the list of special
	 * tokens preceding this {@link Token}. If this list is non-empty, the
	 * result will be a special token. Otherwise, it will be the starting token.
	 * 
	 * @param token
	 *            the given {@link Token}.
	 * @return the first special token preceding <code>token</code>.
	 */
        final private static Token firstSpecial(Token token) {

                while (token.specialToken != null)
                        token = token.specialToken;

                return token;
        }

  Token findIntroductionBlock() throws ParseException {
    return accumulateUntilToken (_GRAMMARSTART) ;
  }

  final public Grammar Grammar() throws ParseException {
        Token t;
        ASTStringNode findintroductionblock;
        Production production;
        ArrayList<Production> productionList = new ArrayList<Production>();
        ASTStringNode eof;
        Token firstToken=token;
    t = findIntroductionBlock();
                                  findintroductionblock=new ASTStringNode(t.image,new WToken(t));
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      production = Production();
                                                                                                                            productionList.add(production);
    }
    t = jj_consume_token(0);
                                                                                                                                                                       eof=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Grammar(findintroductionblock, productionList, eof, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Production Production() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Choice choice;
        ArrayList<Choice> list0=new ArrayList<Choice>();
        Choice choice1;
        ArrayList<Choice> choice1List = new ArrayList<Choice>();
        Token firstToken=token;
    t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(COLON);
    choice = Choice();
                                                                                                 list0.add(choice);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(BIT_OR);
      choice1 = Choice();
                                                                                                                                           list0.add(choice1);
    }
    jj_consume_token(SEMICOLON);
         {if (true) return new Production(list0, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Choice Choice() throws ParseException {
        Text text;
        ArrayList<Text> textList = new ArrayList<Text>();
        MultAndText multAndText;
        ArrayList<MultAndText> multAndTextList = new ArrayList<MultAndText>();
        Token t;
        ASTStringNode identifier = null;
        Token firstToken=token;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _LOOK_AHEAD:
      case _JAVA:
      case STRING_LITERAL:
      case AT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      text = Text();
                     textList.add(text);
    }
    label_4:
    while (true) {
      multAndText = MultAndText();
                                                                       multAndTextList.add(multAndText);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPTIONAL:
      case _JAVATOKEN:
      case LPAREN:
      case LBRACKET:
      case LT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 129:
      jj_consume_token(129);
      t = jj_consume_token(IDENTIFIER);
                                                                                                                                 identifier=new ASTStringNode(t.image,new WToken(t));
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
         {if (true) return new Choice(textList, multAndTextList, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MultAndText MultAndText() throws ParseException {
        Mult mult;
        Text text;
        ArrayList<Text> textList = new ArrayList<Text>();
        Token firstToken=token;
    mult = Mult();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _LOOK_AHEAD:
      case _JAVA:
      case STRING_LITERAL:
      case AT:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      text = Text();
                                 textList.add(text);
    }
         {if (true) return new MultAndText(mult, textList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Mult Mult() throws ParseException {
        OneOrMore oneOrMore;
        ZeroOrMore zeroOrMore;
        Wrappee wrappee;
        OneOrZero oneOrZero;
        Unit unit;
        OptionalWithDefault optionalWithDefault;
        Token firstToken=token;
    if (jj_2_1(2147483647)) {
      oneOrMore = OneOrMore();
         {if (true) return new Mult1(oneOrMore, firstToken.next,token);}
    } else if (jj_2_2(2147483647)) {
      zeroOrMore = ZeroOrMore();
         {if (true) return new Mult2(zeroOrMore, firstToken.next,token);}
    } else if (jj_2_3(2147483647)) {
      wrappee = Wrappee();
         {if (true) return new Mult3(wrappee, firstToken.next,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        oneOrZero = OneOrZero();
         {if (true) return new Mult4(oneOrZero, firstToken.next,token);}
        break;
      case _JAVATOKEN:
      case LT:
      case IDENTIFIER:
        unit = Unit();
         {if (true) return new Mult5(unit, firstToken.next,token);}
        break;
      case OPTIONAL:
        optionalWithDefault = OptionalWithDefault();
         {if (true) return new Mult6(optionalWithDefault, firstToken.next,token);}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public OneOrMore OneOrMore() throws ParseException {
        Text text;
        ArrayList<Text> textList = new ArrayList<Text>();
        Unit unit;
        Text text1;
        ArrayList<Text> text1List = new ArrayList<Text>();
        Token firstToken=token;
    jj_consume_token(LPAREN);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _LOOK_AHEAD:
      case _JAVA:
      case STRING_LITERAL:
      case AT:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      text = Text();
                         textList.add(text);
    }
    unit = Unit();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _LOOK_AHEAD:
      case _JAVA:
      case STRING_LITERAL:
      case AT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_7;
      }
      text1 = Text();
                                                                          text1List.add(text1);
    }
    jj_consume_token(RPAREN);
    jj_consume_token(PLUS);
         {if (true) return new OneOrMore(textList, unit, text1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ZeroOrMore ZeroOrMore() throws ParseException {
        Text text;
        ArrayList<Text> textList = new ArrayList<Text>();
        Unit unit;
        Text text1;
        ArrayList<Text> text1List = new ArrayList<Text>();
        Token firstToken=token;
    jj_consume_token(LPAREN);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _LOOK_AHEAD:
      case _JAVA:
      case STRING_LITERAL:
      case AT:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_8;
      }
      text = Text();
                         textList.add(text);
    }
    unit = Unit();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _LOOK_AHEAD:
      case _JAVA:
      case STRING_LITERAL:
      case AT:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_9;
      }
      text1 = Text();
                                                                          text1List.add(text1);
    }
    jj_consume_token(RPAREN);
    jj_consume_token(STAR);
         {if (true) return new ZeroOrMore(textList, unit, text1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public OneOrZero OneOrZero() throws ParseException {
        Text text;
        ArrayList<Text> textList = new ArrayList<Text>();
        Unit unit;
        Text text1;
        ArrayList<Text> text1List = new ArrayList<Text>();
        Token firstToken=token;
    jj_consume_token(LBRACKET);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _LOOK_AHEAD:
      case _JAVA:
      case STRING_LITERAL:
      case AT:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_10;
      }
      text = Text();
                         textList.add(text);
    }
    unit = Unit();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _LOOK_AHEAD:
      case _JAVA:
      case STRING_LITERAL:
      case AT:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_11;
      }
      text1 = Text();
                                                                          text1List.add(text1);
    }
    jj_consume_token(RBRACKET);
         {if (true) return new OneOrZero(textList, unit, text1List, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public OptionalWithDefault OptionalWithDefault() throws ParseException {
        Unit unit;
        Token t;
        ASTStringNode string_literal;
        Token firstToken=token;
    jj_consume_token(OPTIONAL);
    jj_consume_token(LPAREN);
    unit = Unit();
    jj_consume_token(COMMA);
    t = jj_consume_token(STRING_LITERAL);
                                                          string_literal=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(RPAREN);
         {if (true) return new OptionalWithDefault(unit, string_literal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Wrappee Wrappee() throws ParseException {
        Unit unit;
        Token firstToken=token;
    unit = Unit();
    jj_consume_token(BANG);
         {if (true) return new Wrappee(unit, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Unit Unit() throws ParseException {
        NonTerminal nonTerminal;
        Ident ident;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      nonTerminal = NonTerminal();
         {if (true) return new Unit1(nonTerminal, firstToken.next,token);}
      break;
    case _JAVATOKEN:
    case LT:
      ident = Ident();
         {if (true) return new Unit2(ident, firstToken.next,token);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NonTerminal NonTerminal() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ASTStringNode identifier1 = null;
        Token firstToken=token;
    t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.image,new WToken(t));
    if (jj_2_4(3)) {
      jj_consume_token(LBRACE);
      t = jj_consume_token(IDENTIFIER);
                                                                                                              identifier1=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(RBRACE);
    } else {
      ;
    }
         {if (true) return new NonTerminal(identifier, identifier1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Ident Ident() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ASTStringNode identifier1;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _JAVATOKEN:
      jj_consume_token(_JAVATOKEN);
      jj_consume_token(LPAREN);
      t = jj_consume_token(IDENTIFIER);
                                       identifier=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(RPAREN);
         {if (true) return new Ident1(identifier, firstToken.next,token);}
      break;
    case LT:
      jj_consume_token(LT);
      t = jj_consume_token(IDENTIFIER);
                           identifier1=new ASTStringNode(t.image,new WToken(t));
      jj_consume_token(GT);
         {if (true) return new Ident2(identifier1, firstToken.next,token);}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Text Text() throws ParseException {
        Lookahead lookahead;
        Java java;
        Token t;
        ASTStringNode string_literal;
        LayoutHint layoutHint;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _LOOK_AHEAD:
      lookahead = Lookahead();
         {if (true) return new Text1(lookahead, firstToken.next,token);}
      break;
    case _JAVA:
      java = Java();
         {if (true) return new Text2(java, firstToken.next,token);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Text3(string_literal, firstToken.next,token);}
      break;
    case AT:
      layoutHint = LayoutHint();
         {if (true) return new Text4(layoutHint, firstToken.next,token);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LayoutHint LayoutHint() throws ParseException {
        ASTTextNode text348 = null;
        ASTTextNode text349 = null;
        ASTTextNode text350 = null;
        Token firstToken=token;
    jj_consume_token(AT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                  text348=new ASTTextNode("+",new WToken(token));
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
                                                                          text349=new ASTTextNode("-",new WToken(token));
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      jj_consume_token(BANG);
                                                                                                                                  text350=new ASTTextNode("!",new WToken(token));
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
         {if (true) return new LayoutHint(text348, text349, text350, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Lookahead Lookahead() throws ParseException {
        LookaheadBody lookaheadBody;
        Token firstToken=token;
    jj_consume_token(_LOOK_AHEAD);
    jj_consume_token(LPAREN);
    lookaheadBody = LookaheadBody();
    jj_consume_token(RPAREN);
         {if (true) return new Lookahead(lookaheadBody, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public LookaheadBody LookaheadBody() throws ParseException {
        Token t;
        ASTStringNode integer_literal;
        ASTStringNode string_literal;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                            integer_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new LookaheadBody1(integer_literal, firstToken.next,token);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new LookaheadBody2(string_literal, firstToken.next,token);}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Java Java() throws ParseException {
        Token t;
        ASTStringNode string_literal;
        Token firstToken=token;
    jj_consume_token(_JAVA);
    jj_consume_token(LPAREN);
    t = jj_consume_token(STRING_LITERAL);
                                      string_literal=new ASTStringNode(t.image,new WToken(t));
    jj_consume_token(RPAREN);
         {if (true) return new Java(string_literal, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(_JAVA)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(_JAVATOKEN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(_LOOK_AHEAD)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_18()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_16()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(AT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_15()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_16()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_17()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  public SlimJJParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x1004028,0x4088050,0x0,0x1004028,0x4080050,0x1004028,0x1004028,0x1004028,0x1004028,0x1004028,0x1004028,0x4000040,0x4000040,0x1004028,0x0,0x0,0x10000000,0x4080,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x20000000,0x2000,0x0,0x20000000,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x100,0x200,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public SlimJJParser(CharStream stream) {
    token_source = new SlimJJParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SlimJJParser(SlimJJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(SlimJJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[130];
    for (int i = 0; i < 130; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 130; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
