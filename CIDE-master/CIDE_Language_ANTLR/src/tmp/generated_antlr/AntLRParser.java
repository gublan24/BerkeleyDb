/* Generated By:JavaCC: Do not edit this line. AntLRParser.java */
package tmp.generated_antlr;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

public class AntLRParser implements AntLRParserConstants {

  final public Grammar Grammar() throws ParseException {
        RuleId ruleId;
        Rule rule;
        ArrayList<Rule> ruleList = new ArrayList<Rule>();
        Token t;
        ASTStringNode eof;
        Token firstToken=token;
    jj_consume_token(GR);
    ruleId = RuleId();
    jj_consume_token(SEMI);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case M1:
      case M2:
      case M3:
      case M4:
      case TOKEN_REF:
      case RULE_REF:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      rule = Rule();
                                                   ruleList.add(rule);
    }
    t = jj_consume_token(0);
                                                                                  eof=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new Grammar(ruleId, ruleList, eof, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Modifier Modifier() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case M3:
      jj_consume_token(M3);
         {if (true) return new Modifier1(firstToken.next,token);}
      break;
    case M2:
      jj_consume_token(M2);
         {if (true) return new Modifier2(firstToken.next,token);}
      break;
    case M1:
      jj_consume_token(M1);
         {if (true) return new Modifier3(firstToken.next,token);}
      break;
    case M4:
      jj_consume_token(M4);
         {if (true) return new Modifier4(firstToken.next,token);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Rule Rule() throws ParseException {
        Modifier modifier = null;
        RuleId ruleId;
        ASTTextNode text5 = null;
        altList altList;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case M1:
    case M2:
    case M3:
    case M4:
      modifier = Modifier();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    ruleId = RuleId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
                                                    text5=new ASTTextNode("!",new WToken(token));
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(32);
    altList = altList();
    jj_consume_token(SEMI);
         {if (true) return new Rule(modifier, ruleId, text5, altList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public block block() throws ParseException {
        altList altList;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    altList = altList();
    jj_consume_token(RPAREN);
         {if (true) return new block(altList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public altList altList() throws ParseException {
        altRewrite altRewrite;
        ArrayList<altRewrite> list0=new ArrayList<altRewrite>();
        altRewrite altRewrite1;
        ArrayList<altRewrite> altRewrite1List = new ArrayList<altRewrite>();
        Token firstToken=token;
    altRewrite = altRewrite();
                                list0.add(altRewrite);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(BIT_OR);
      altRewrite1 = altRewrite();
                                                                                      list0.add(altRewrite1);
    }
         {if (true) return new altList(list0, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public altRewrite altRewrite() throws ParseException {
        elementNoOptionSpec elementNoOptionSpec;
        ArrayList<elementNoOptionSpec> elementNoOptionSpecList = new ArrayList<elementNoOptionSpec>();
        Token firstToken=token;
    label_3:
    while (true) {
      elementNoOptionSpec = elementNoOptionSpec();
                                                   elementNoOptionSpecList.add(elementNoOptionSpec);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case DOT:
      case TOKEN_REF:
      case RULE_REF:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case 31:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
    }
         {if (true) return new altRewrite(elementNoOptionSpecList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public elementNoOptionSpec elementNoOptionSpec() throws ParseException {
        atom atom;
        ebnfSuffix ebnfSuffix = null;
        ebnf ebnf;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case TOKEN_REF:
    case RULE_REF:
    case CHAR_LITERAL:
    case STRING_LITERAL:
    case 31:
      atom = atom();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case STAR:
      case 33:
        ebnfSuffix = ebnfSuffix();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
         {if (true) return new elementNoOptionSpec1(atom, ebnfSuffix, firstToken.next,token);}
      break;
    case LPAREN:
      ebnf = ebnf();
         {if (true) return new elementNoOptionSpec2(ebnf, firstToken.next,token);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public atom atom() throws ParseException {
        terminal terminal;
        Token t;
        ASTStringNode rule_ref;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case TOKEN_REF:
    case CHAR_LITERAL:
    case STRING_LITERAL:
    case 31:
      terminal = terminal();
         {if (true) return new atom1(terminal, firstToken.next,token);}
      break;
    case RULE_REF:
      t = jj_consume_token(RULE_REF);
                     rule_ref=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new atom2(rule_ref, firstToken.next,token);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ebnf ebnf() throws ParseException {
        block block;
        blockModifier blockModifier = null;
        Token firstToken=token;
    block = block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case STAR:
    case XOR:
    case 31:
    case 33:
      blockModifier = blockModifier();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
         {if (true) return new ebnf(block, blockModifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public blockModifier blockModifier() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
         {if (true) return new blockModifier1(firstToken.next,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new blockModifier2(firstToken.next,token);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
         {if (true) return new blockModifier3(firstToken.next,token);}
      break;
    case XOR:
      jj_consume_token(XOR);
         {if (true) return new blockModifier4(firstToken.next,token);}
      break;
    case 31:
      jj_consume_token(31);
         {if (true) return new blockModifier5(firstToken.next,token);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public terminal terminal() throws ParseException {
        Token t;
        ASTStringNode char_literal;
        ASTStringNode token_ref;
        ASTStringNode string_literal;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR_LITERAL:
      t = jj_consume_token(CHAR_LITERAL);
                         char_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new terminal1(char_literal, firstToken.next,token);}
      break;
    case TOKEN_REF:
      t = jj_consume_token(TOKEN_REF);
                      token_ref=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new terminal2(token_ref, firstToken.next,token);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new terminal3(string_literal, firstToken.next,token);}
      break;
    case DOT:
      jj_consume_token(DOT);
         {if (true) return new terminal4(firstToken.next,token);}
      break;
    case 31:
      jj_consume_token(31);
         {if (true) return new terminal5(firstToken.next,token);}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public notTerminal notTerminal() throws ParseException {
        Token t;
        ASTStringNode char_literal;
        ASTStringNode token_ref;
        ASTStringNode string_literal;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR_LITERAL:
      t = jj_consume_token(CHAR_LITERAL);
                         char_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new notTerminal1(char_literal, firstToken.next,token);}
      break;
    case TOKEN_REF:
      t = jj_consume_token(TOKEN_REF);
                      token_ref=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new notTerminal2(token_ref, firstToken.next,token);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           string_literal=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new notTerminal3(string_literal, firstToken.next,token);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ebnfSuffix ebnfSuffix() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
         {if (true) return new ebnfSuffix1(firstToken.next,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new ebnfSuffix2(firstToken.next,token);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
         {if (true) return new ebnfSuffix3(firstToken.next,token);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public RuleId RuleId() throws ParseException {
        Token t;
        ASTStringNode token_ref;
        ASTStringNode rule_ref;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOKEN_REF:
      t = jj_consume_token(TOKEN_REF);
                      token_ref=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new RuleId1(token_ref, firstToken.next,token);}
      break;
    case RULE_REF:
      t = jj_consume_token(RULE_REF);
                     rule_ref=new ASTStringNode(t.image,new WToken(t));
         {if (true) return new RuleId2(rule_ref, firstToken.next,token);}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  public AntLRParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x18078000,0x78000,0x78000,0x80000000,0x2000000,0xf8402000,0x1800000,0xf8402000,0xf8400000,0x85800000,0x85800000,0xe8400000,0x68000000,0x1800000,0x18000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x2,0x0,};
   }

  public AntLRParser(CharStream stream) {
    token_source = new AntLRParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public AntLRParser(AntLRParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public void ReInit(AntLRParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[34];
    for (int i = 0; i < 34; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
