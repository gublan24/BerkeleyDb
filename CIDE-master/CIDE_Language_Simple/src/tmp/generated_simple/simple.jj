
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = false;
  STATIC = false;
  OUTPUT_DIRECTORY="generated_simple";
}

PARSER_BEGIN(JavaParser)
package tmp.generated_simple;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class JavaParser
{
	    public ISourceFile getRoot() throws ParseException {
                return CompilationUnit();
        }

}

PARSER_END(JavaParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
}
CompilationUnit CompilationUnit() : { 
	TypeDeclaration typeDeclaration;
	ArrayList<TypeDeclaration> typeDeclarationList = new ArrayList<TypeDeclaration>();
	Token t;
	ASTStringNode eof;
	Token firstToken=token;
} { (
	(typeDeclaration=TypeDeclaration(){typeDeclarationList.add(typeDeclaration);})* t=<EOF>{eof=new ASTStringNode(t.image,new WToken(t));} 
	{return new CompilationUnit(typeDeclarationList, eof, firstToken.next,token);}
 ) }

TypeDeclaration TypeDeclaration() : { 
	Name name;
	Name name1 = null;
	ClassBody classBody;
	Token firstToken=token;
} { (
	"class" name=Name() ["extends" name1=Name()] classBody=ClassBody() 
	{return new TypeDeclaration(name, name1, classBody, firstToken.next,token);}
 ) }

Name Name() : { 
	Token t;
	ASTStringNode identifier;
	Token firstToken=token;
} { (
	t=<IDENTIFIER>{identifier=new ASTStringNode(t.image,new WToken(t));} 
	{return new Name(identifier, firstToken.next,token);}
 ) }

ClassBody ClassBody() : { 
	Member member;
	ArrayList<Member> memberList = new ArrayList<Member>();
	Token firstToken=token;
} { (
	"{" (member=Member(){memberList.add(member);})* "}" 
	{return new ClassBody(memberList, firstToken.next,token);}
 ) }

Member Member() : { 
	Method method;
	Field field;
	Token firstToken=token;
} { (
	method=Method() 
	{return new Member1(method, firstToken.next,token);} |
	field=Field() 
	{return new Member2(field, firstToken.next,token);}
 ) }

Method Method() : { 
	Name name;
	Block block;
	Token firstToken=token;
} { (
	"void" name=Name() "(" ")" block=Block() 
	{return new Method(name, block, firstToken.next,token);}
 ) }

Field Field() : { 
	Name name;
	Token firstToken=token;
} { (
	name=Name() ";" 
	{return new Field(name, firstToken.next,token);}
 ) }

Block Block() : { 
	Statement statement;
	ArrayList<Statement> statementList = new ArrayList<Statement>();
	Token firstToken=token;
} { (
	"{" (statement=Statement(){statementList.add(statement);})* "}" 
	{return new Block(statementList, firstToken.next,token);}
 ) }

Statement Statement() : { 
	MethodInvocation methodInvocation;
	IASTNode ifStatement;
	Assignment assignment;
	Block block;
	Token firstToken=token;
} { (
	LOOKAHEAD(2) methodInvocation=MethodInvocation() ";" 
	{return new Statement1(methodInvocation, firstToken.next,token);} |
	ifStatement=IfStatement() 
	{return new Statement2(ifStatement, firstToken.next,token);} |
	assignment=Assignment() ";" 
	{return new Statement3(assignment, firstToken.next,token);} |
	block=Block() 
	{return new Statement4(block, firstToken.next,token);}
 ) }

MethodInvocation MethodInvocation() : { 
	Name name;
	Token firstToken=token;
} { (
	name=Name() "(" ")" 
	{return new MethodInvocation(name, firstToken.next,token);}
 ) }

Assignment Assignment() : { 
	Name name;
	Expression expression;
	Token firstToken=token;
} { (
	name=Name() "=" expression=Expression() 
	{return new Assignment(name, expression, firstToken.next,token);}
 ) }

IfStatement IfStatement() : { 
	Expression expression;
	Block block;
	Block block1 = null;
	Token firstToken=token;
} { (
	"if" "(" expression=Expression() ")" block=Block() ["else" block1=Block()] 
	{return new IfStatement(expression, block, block1, firstToken.next,token);}
 ) }

Expression Expression() : { 
	BinaryExpression binaryExpression;
	UnaryExpression unaryExpression;
	Token firstToken=token;
} { (
	LOOKAHEAD(2) binaryExpression=BinaryExpression() 
	{return new Expression1(binaryExpression, firstToken.next,token);} |
	unaryExpression=UnaryExpression() 
	{return new Expression2(unaryExpression, firstToken.next,token);}
 ) }

UnaryExpression UnaryExpression() : { 
	Token t;
	ASTStringNode integer_literal;
	Token firstToken=token;
} { (
	t=<INTEGER_LITERAL>{integer_literal=new ASTStringNode(t.image,new WToken(t));} 
	{return new UnaryExpression(integer_literal, firstToken.next,token);}
 ) }

BinaryExpression BinaryExpression() : { 
	UnaryExpression unaryExpression;
	Expression expression;
	Token firstToken=token;
} { (
	unaryExpression=UnaryExpression() "+" expression=Expression() 
	{return new BinaryExpression(unaryExpression, expression, firstToken.next,token);}
 ) }

