module Arith where
{  
  data Env a = Env [(String, a)]
             deriving Show;
   
  lookupEnv :: Env a -> String -> Maybe a;
  lookupEnv (Env env) name = lookup name env;
   
  emptyEnv :: Env a;
  emptyEnv = Env [];
   
  addToEnv :: Env a -> String -> a -> Env a;
  addToEnv (Env env) name val = Env ((name, val) : env);
   
  addToEnvN :: Env a -> [(String, a)] -> Env a;
  addToEnvN (Env env) newdefs = Env (newdefs ++ env);
   
  data Exp a = Const a
             | Var String
             | Binary BinOp (Exp a) (Exp a)
             | Unary UnOp (Exp a)
             | Let [(String, Exp a)] (Exp a)
             | ITE (Exp a) (Exp a) (Exp a)
             deriving Show;
   
  data BinOp = Add
             | Sub
             | Mul
             | Div
             deriving Show;
   
  data UnOp = Neg
            | Recip
            deriving Show;
   
  data Result a err = Result a
                    | Fail err
                    deriving Show;
   
  mapResult :: (a -> Result b err) -> Result a err -> Result b err;
  mapResult f (Result x) = f x;
  mapResult f (Fail e) = Fail e;
   
  zipResult ::
              (a -> b -> Result c err) ->
                Result a err -> Result b err -> Result c err;
  zipResult f (Result x) (Result y) = f x y;
  zipResult _ (Fail e) _ = Fail e;
  zipResult _ _ (Fail e) = Fail e;
   
  liftResult :: [Result a err] -> Result [a] err;
  liftResult [] = Result [];
  liftResult (Result x : rest)
    = case liftResult rest of
          { Result xs -> Result (x : xs);
            Fail e -> Fail e};
  liftResult (Fail e : _) = Fail e;
   
  data EvalError = DivByZero
                 | Overflow
                 | TypeError
                 | UndefVarError
                 deriving Show;
   
  data TypedVal = TVString String
                | TVDouble Double;
   
  instance Show TypedVal where
          { show (TVString s) = show s;
            show (TVDouble d) = show d};
   
  eval ::
         Env (Result TypedVal EvalError) ->
           Exp TypedVal -> Result TypedVal EvalError;
  eval _ (Const x) = Result x;
  eval env (Var name)
    = case lookupEnv env name of
          { Just x -> x;
            Nothing -> Fail UndefVarError};
  eval env (Binary op exp1 exp2)
    = zipResult (tvBinOp op) (eval env exp1) (eval env exp2);
  eval env (Unary op exp) = mapResult (tvUnOp op) (eval env exp);
  eval env (Let defs exp) = eval newEnv exp
    where { (names, exps) = unzip defs;
            vals = map (eval env) exps;
            newEnv = addToEnvN env (zip names vals)};
  eval env (ITE exp1 exp2 exp3)
    = case eval env exp1 of
          { Result (TVDouble x)
              | x >= 0 -> eval env exp2
              | otherwise -> eval env exp3;
            Result _ -> Fail TypeError;
            Fail err -> Fail err};
   
  tvBinOp ::
            BinOp -> TypedVal -> TypedVal -> Result TypedVal EvalError;
  tvBinOp (Add) (TVString s) (TVString t)
    = Result (TVString (s ++ t));
  tvBinOp (Add) (TVString s) (TVDouble y)
    = Result (TVString (s ++ show y));
  tvBinOp (Add) (TVDouble x) (TVString t)
    = Result (TVString (show x ++ t));
  tvBinOp (Add) (TVDouble x) (TVDouble y)
    = Result (TVDouble (x + y));
  tvBinOp (Sub) (TVDouble x) (TVDouble y)
    = Result (TVDouble (x - y));
  tvBinOp (Mul) (TVDouble x) (TVDouble y)
    = Result (TVDouble (x * y));
  tvBinOp (Div) (TVDouble x) (TVDouble 0) = Fail DivByZero;
  tvBinOp (Div) (TVDouble x) (TVDouble y)
    = Result (TVDouble (x / y));
  tvBinOp _ _ _ = Fail TypeError;
   
  tvUnOp :: UnOp -> TypedVal -> Result TypedVal EvalError;
  tvUnOp (Neg) (TVDouble x) = Result (TVDouble (negate x));
  tvUnOp (Recip) (TVDouble 0) = Fail DivByZero;
  tvUnOp (Recip) (TVDouble x) = Result (TVDouble (recip x));
  tvUnOp _ _ = Fail TypeError;
   
  evalExp :: Exp TypedVal -> Result TypedVal EvalError;
  evalExp exp = eval emptyEnv exp}
