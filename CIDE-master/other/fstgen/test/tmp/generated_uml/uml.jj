options{
  STATIC = false;
}
PARSER_BEGIN(UMLParser)
package tmp.generated_uml;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.AbstractFSTParser;

public class UMLParser extends AbstractFSTParser{
}
PARSER_END(UMLParser)




<*> TOKEN :
{
  <#ALPHA_CHAR: ["a"-"z", "A"-"Z"] >
| <#NUM_CHAR:   ["0"-"9"] >
| <#ALPHANUM_CHAR: [ "a"-"z", "A"-"Z", "0"-"9" ] >
| <#IDENTIFIER_CHAR: [ "a"-"z", "A"-"Z", "0"-"9", "_", "-", "." ] >
| <#IDENTIFIER_PART: <ALPHA_CHAR> (<IDENTIFIER_CHAR>)* >
| <#IDENTIFIER: <IDENTIFIER_PART> (":" <IDENTIFIER_PART>)? >
| <#QUOTED_STRING_NB: ( "'" ( ~["'", "\r", "\n"] )* "'" ) 
                    | ( "\"" ( ~["\"", "\r", "\n"] )* "\"" ) >
| <#QUOTED_STRING: ( "'" ( ~["'"] )* "'" ) | ( "\"" ( ~["\""] )* "\"" ) >
| <#WHITESPACE: ( " " | "\t" | "\n" | "\r" ) >
| <#NEWLINE:    ( "\r\n" | "\r" | "\n" ) >
| <#QUOTE:      ( "'" | "\"" )>
| <#CPB:		">">
}

<DEFAULT> TOKEN : 
{
  <XMLOPEN:"<?xml">				: LexElement_Inside
| <SELEMENT_START:      "<"       > : LexElement_Start
| <EELEMENT_START:      "</"       > : LexElement_Start
| <PI_START:      "<?"       > : LexPI
| <COMMENT_START:  "<!--"    > : LexComment
| <CDSTART: 		"<![CDATA["> : LexCDATA
//| <DECL_START:     "<!DOCTYPE"      > : LexDecl
| <PCDATA:         ( ~["<"] )+ >
}

<LexElement_Start> TOKEN :
{
  <ELEMENT_ID: <IDENTIFIER> > : LexElement_Inside
}

<LexElement_Inside> SPECIAL_TOKEN :
{
  < (<WHITESPACE>)+ >
}

<LexElement_Inside> TOKEN :
{
  <ATTR_NAME: <IDENTIFIER> >		
| <ELEMENT_END: <CPB> >                       : DEFAULT
| <QEND: "?>" >                     		: DEFAULT
| <SLASHEND: "/>" >                       : DEFAULT
| <ATTR_EQ: "=" >                       
| <ATTR_VAL: <QUOTED_STRING>>			
}


<LexComment> MORE : { <~[] > } 
<LexComment> TOKEN : 
{
  < COMMENT_END:  "-->" > : DEFAULT 
}

<LexPI> MORE : { <~[] > } 
<LexPI> TOKEN : 
{
  < PI_END:  "?>" > : DEFAULT 
}

<LexCDATA> MORE : { <~[] > } 
<LexCDATA> TOKEN : 
{
  < CDEND:  "]]>" > : DEFAULT 
}
FSTInfo Document(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Prolog(inTerminal){ replaceName(n);} n=Element(inTerminal){ replaceName(n);} (n=Misc(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("Document","-","-");}

 )  }

FSTInfo Misc(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Comment(true){ replaceName(n);} {return productionEndTerminal("Misc1","{AUTO}","{AUTO}","error",first,token);}
 |
	LOOKAHEAD({getToken(1).image.trim().equals("")}) <PCDATA> {return productionEndTerminal("Misc2","{AUTO}","{AUTO}","error",first,token);}
 |
	n=PI(true){ replaceName(n);} {return productionEndTerminal("Misc3","{AUTO}","{AUTO}","error",first,token);}

 )  }

FSTInfo PI(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<?" <PI_END> {return productionEndTerminal("PI","-","-","error",first,token);}

 )  }

FSTInfo Prolog(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=XMLDecl(true){ replaceName(n);} (n=Misc(true){ replaceName(n);})* {return productionEndTerminal("Prolog","-","-","error",first,token);}

 )  }

FSTInfo XMLDecl(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<?xml" (n=Attribute(true){ replaceName(n);})+ <QEND> {return productionEndTerminal("XMLDecl","-","-","error",first,token);}

 )  }

FSTInfo CDSect(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<![CDATA[" <CDEND> {return productionEndTerminal("CDSect","-","-","error",first,token);}

 )  }

FSTInfo Comment(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<!--" <COMMENT_END> {return productionEndTerminal("Comment","-","-","error",first,token);}

 )  }

FSTInfo Element(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(EmptyElemTag()) n=EmptyElemTag(inTerminal){ replaceName("EmptyElemTag", n);}{ replaceName(n);} {return productionEndNonTerminal("ElementContent1","-","{EmptyElemTag}");}
 |
	n=STag(inTerminal){ replaceName("STag", n);}{ replaceName(n);} (n=Content(inTerminal){ replaceName(n);})* n=ETag(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ElementContent2","-","{STag}");}

 )  }

FSTInfo ElementId(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<ELEMENT_ID>{ replaceName(new FSTInfo("<ELEMENT_ID>",t.toString()));} {return productionEndTerminal("ElementId","{<ELEMENT_ID>}","{<ELEMENT_ID>}","error",first,token);}

 )  }

FSTInfo EmptyElemTag(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<" n=ElementId(inTerminal){ replaceName("ElementId", n);}{ replaceName(n);} (n=Attribute(inTerminal){ replaceName(n);})* <SLASHEND> {return productionEndNonTerminal("EmptyElemTag","{ElementId}","{ElementId}");}

 )  }

FSTInfo STag(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<" n=ElementId(inTerminal){ replaceName("ElementId", n);}{ replaceName(n);} (n=Attribute(inTerminal){ replaceName(n);})* <ELEMENT_END> {return productionEndNonTerminal("STag","-","{ElementId}_{Attr_name}");}

 )  }

FSTInfo ETag(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"</" n=ElementId(true){ replaceName(n);} <ELEMENT_END> {return productionEndTerminal("ETag","-","-","error",first,token);}

 )  }

FSTInfo Attribute(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<ATTR_NAME>{ replaceName(new FSTInfo("<ATTR_NAME>",t.toString()));} <ATTR_EQ> t=<ATTR_VAL>{ replaceName(new FSTInfo("<ATTR_VAL>",t.toString()));} {return productionEndTerminal("Attr_{<ATTR_NAME>}","{<ATTR_VAL>}","{<ATTR_VAL>}","error",first,token);}

 )  }

FSTInfo Content(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Element(inTerminal){ replaceName("Element", n);}{ replaceName(n);} {return productionEndNonTerminal("Element","{Element}","{Element}");}
 |
	n=Comment(true){ replaceName(n);} {return productionEndTerminal("CommentContent","{AUTO}","{AUTO}","error",first,token);}
 |
	n=CDSect(true){ replaceName(n);} {return productionEndTerminal("CDSectContent","{AUTO}","{AUTO}","error",first,token);}
 |
	<PCDATA> {return productionEndTerminal("PCDataContent","{AUTO}","{AUTO}","error",first,token);}

 )  }

