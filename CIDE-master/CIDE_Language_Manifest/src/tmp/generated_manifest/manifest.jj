// Automatically generated code.  Edit at your own risk!
// Generated by bali2javacc v2002.09.04.

//-----------------------------------//
// Options block:
//-----------------------------------//

options {
    CACHE_TOKENS = true ;
    JAVA_UNICODE_ESCAPE = true ;
    //OPTIMIZE_TOKEN_MANAGER = true ;
    STATIC = false ;
}

//-----------------------------------//
// Parser code block:
//-----------------------------------//

PARSER_BEGIN(ManifestParser)
package tmp.generated_manifest;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;

public class ManifestParser {

}

PARSER_END(ManifestParser)


TOKEN : {
    <#ALPHANUM: ["a"-"z", "A"-"Z","0"-"9"]>
|   <#HEADERCHAR: <ALPHANUM>|"-"|"_">
|   <#OTHER:  ~["\n","\r"] >
|   <#SPACE: " ">
}


TOKEN : {
    <EXPORTPACKAGE: "Export-Package: "> : PACKAGE
|   <NAME: <ALPHANUM> (<HEADERCHAR>)*>
|   <COLON: ":">
|   <VALUE: " " (<OTHER>)*  ("\r\n"|"\n"|"\r")>
|   <NEWLINE: ("\r\n"|"\n"|"\r")>
}

<PACKAGE> SPECIAL_TOKEN : { 
	<LINEBREAK: ("\r\n"|"\n"|"\r") " " > | " "
}
<PACKAGE> TOKEN : {
    <COMMA: ",">
|   <PACKAGEDCL:  (["a"-"z", "A"-"Z","0"-"9","."])+>
|   <PACKAGEEND: ("\r\n"|"\n"|"\r")> : DEFAULT
}
File File() : { 
	Line line;
	ArrayList<Line> lineList = new ArrayList<Line>();
	Token t;
	ASTStringNode eof;
	Token firstToken=token;
} { (
	(line=Line(){lineList.add(line);})+ t=<EOF>{eof=new ASTStringNode(t.image,new WToken(t));} 
	{return new File(lineList, eof, firstToken.next,token);}
 ) }

Line Line() : { 
	Header header;
	Export export;
	Token firstToken=token;
} { (
	header=Header() 
	{return new Line1(header, firstToken.next,token);} |
	export=Export() 
	{return new Line2(export, firstToken.next,token);}
 ) }

Header Header() : { 
	Token t;
	ASTStringNode name;
	ASTStringNode value;
	ASTStringNode value1;
	ArrayList<ASTStringNode> value1List = new ArrayList<ASTStringNode>();
	Token firstToken=token;
} { (
	t=<NAME>{name=new ASTStringNode(t.image,new WToken(t));} ":" t=<VALUE>{value=new ASTStringNode(t.image,new WToken(t));} (t=<VALUE>{value1=new ASTStringNode(t.image,new WToken(t));}{value1List.add(value1);})* 
	{return new Header(name, value, value1List, firstToken.next,token);}
 ) }

Export Export() : { 
	Token t;
	ASTStringNode packagedcl;
	ArrayList<ASTStringNode> list0=new ArrayList<ASTStringNode>();
	ASTStringNode packagedcl1;
	ArrayList<ASTStringNode> packagedcl1List = new ArrayList<ASTStringNode>();
	ASTStringNode packageend;
	Token firstToken=token;
} { (
	"Export-Package: " t=<PACKAGEDCL>{packagedcl=new ASTStringNode(t.image,new WToken(t));}{list0.add(packagedcl);} ("," t=<PACKAGEDCL>{packagedcl1=new ASTStringNode(t.image,new WToken(t));}{list0.add(packagedcl1);})* t=<PACKAGEEND>{packageend=new ASTStringNode(t.image,new WToken(t));} 
	{return new Export(list0, packageend, firstToken.next,token);}
 ) }

