

//namespace com.sleepycat.je.dbi;class EnvironmentImpl

private void doClose(  boolean doCheckpoint) throws DatabaseException {
    StringBuffer errors=new StringBuffer();
    try {
      this.hook319();
      try {
        envState.checkState(DbEnvState.VALID_FOR_CLOSE,DbEnvState.CLOSED);
      }
 catch (      DatabaseException DBE) {
        throw DBE;
      }
      requestShutdownDaemons();
      if (doCheckpoint && !isReadOnly && (envState != DbEnvState.INVALID)&& logManager.getLastLsnAtRecovery() != fileManager.getLastUsedLsn()) {
        CheckpointConfig ckptConfig=new CheckpointConfig();
        ckptConfig.setForce(true);
        ckptConfig.setMinimizeRecoveryTime(true);
        try {
          invokeCheckpoint(ckptConfig,false,"close");
        }
 catch (        DatabaseException IE) {
          errors.append("\nException performing checkpoint: ");
          errors.append(IE.toString()).append("\n");
        }
      }
      try {
        shutdownDaemons();
      }
 catch (      InterruptedException IE) {
        errors.append("\nException shutting down daemon threads: ");
        errors.append(IE.toString()).append("\n");
      }
      this.hook318();
      try {
        logManager.flush();
      }
 catch (      DatabaseException DBE) {
        errors.append("\nException flushing log manager: ");
        errors.append(DBE.toString()).append("\n");
      }
      try {
        fileManager.clear();
      }
 catch (      IOException IOE) {
        errors.append("\nException clearing file manager: ");
        errors.append(IOE.toString()).append("\n");
      }
catch (      DatabaseException DBE) {
        errors.append("\nException clearing file manager: ");
        errors.append(DBE.toString()).append("\n");
      }
      try {
        fileManager.close();
      }
 catch (      IOException IOE) {
        errors.append("\nException clearing file manager: ");
        errors.append(IOE.toString()).append("\n");
      }
catch (      DatabaseException DBE) {
        errors.append("\nException clearing file manager: ");
        errors.append(DBE.toString()).append("\n");
      }
      try {
        inMemoryINs.clear();
      }
 catch (      DatabaseException DBE) {
        errors.append("\nException closing file manager: ");
        errors.append(DBE.toString()).append("\n");
      }
      this.hook337();
      DbEnvPool.getInstance().remove(envHome);
      this.hook325(errors);
    }
  finally {
      envState=DbEnvState.CLOSED;
    }
    if (errors.length() > 0 && savedInvalidatingException == null) {
      throw new RunRecoveryException(this,errors.toString());
    }
  }
