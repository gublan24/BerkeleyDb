namespace com.sleepycat.je.dbi;

class SortedLSNTreeWalker
{
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.je.utilint.DbLsn;
  depend com.sleepycat.je.tree.Node;
  depend com.sleepycat.je.tree.IN;
  depend com.sleepycat.je.tree.DIN;
  depend com.sleepycat.je.tree.DBIN;
  depend com.sleepycat.je.tree.BIN;
  depend com.sleepycat.je.log.LogEntryType;
  depend com.sleepycat.je.cleaner.OffsetList;
  depend com.sleepycat.je.DatabaseException;
  depend java.util.Set;
  depend java.util.Iterator;
  depend java.util.HashSet;
  depend java.util.Arrays;
    protected DatabaseImpl dbImpl;

    private EnvironmentImpl envImpl;

    private long rootLsn;

    private boolean dups;

    private boolean removeINsFromINList;

    private boolean setDbState;

    private long[] currentLSNs;

    private int currentLSNIdx = 0;

    private OffsetList accumulatedLSNFileNumbers;

    private OffsetList accumulatedLSNFileOffsets;

    private TreeNodeProcessor callback;

    protected boolean accumulateLNs = false;

    public SortedLSNTreeWalker(DatabaseImpl dbImpl, boolean removeINsFromINList, boolean setDbState, long rootLsn,
	    TreeNodeProcessor callback) throws DatabaseException {
	this.dbImpl = dbImpl;
	this.envImpl = dbImpl.getDbEnvironment();
	if (envImpl == null) {
	    throw new DatabaseException("environmentImpl is null for target db " + dbImpl.getDebugName());
	}
	this.dups = dbImpl.getSortedDuplicates();
	this.removeINsFromINList = removeINsFromINList;
	this.setDbState = setDbState;
	this.rootLsn = rootLsn;
	this.callback = callback;
	currentLSNs = new long[0];
	currentLSNIdx = 0;
    }

    private boolean extractINsForDb(INList inList) throws DatabaseException {
	return new SortedLSNTreeWalker_extractINsForDb(this, inList).execute();
    }

    /** 
     * Find all non-resident nodes, and execute the callback. The root IN's LSN is not returned to the callback.
     */
    public void walk() throws DatabaseException {
	walkInternal();
    }

    protected void walkInternal() throws DatabaseException {
	INList inList = envImpl.getInMemoryINs();
	IN root = null;
	if (!extractINsForDb(inList)) {
	    if (rootLsn == DbLsn.NULL_LSN) {
		return;
	    }
	    root = getRootIN(rootLsn);
	    accumulateLSNs(root);
	    releaseRootIN(root);
	}
	this.hook359();
	while (true) {
	    maybeGetMoreINs();
	    if (currentLSNs != null && currentLSNIdx < currentLSNs.length) {
		fetchAndProcessLSN(currentLSNs[currentLSNIdx++]);
	    } else {
		break;
	    }
	}
    }

    private void maybeGetMoreINs() {
	if ((currentLSNs != null && currentLSNIdx >= currentLSNs.length)) {
	    if (accumulatedLSNFileNumbers == null || accumulatedLSNFileNumbers.size() == 0) {
		currentLSNs = null;
		currentLSNIdx = Integer.MAX_VALUE;
		return;
	    }
	    long[] tempFileNumbers = accumulatedLSNFileNumbers.toArray();
	    long[] tempFileOffsets = accumulatedLSNFileOffsets.toArray();
	    int nLSNs = tempFileNumbers.length;
	    currentLSNIdx = 0;
	    currentLSNs = new long[nLSNs];
	    for (int i = 0; i < nLSNs; i++) {
		currentLSNs[i] = DbLsn.makeLsn(tempFileNumbers[i], tempFileOffsets[i]);
	    }
	    Arrays.sort(currentLSNs);
	    accumulatedLSNFileNumbers = null;
	    accumulatedLSNFileOffsets = null;
	}
    }

    private void accumulateLSNs(IN in) throws DatabaseException {
	boolean accumulate = true;
	if (!accumulateLNs) {
	    if ((!dups && (in instanceof BIN)) || (in instanceof DBIN)) {
		accumulate = false;
	    }
	}
	for (int i = 0; i < in.getNEntries(); i++) {
	    if (in.isEntryPendingDeleted(i) || in.isEntryKnownDeleted(i)) {
		continue;
	    }
	    long lsn = in.getLsn(i);
	    Node node = in.getTarget(i);
	    if (accumulate && (node == null)) {
		if (accumulatedLSNFileNumbers == null) {
		    accumulatedLSNFileNumbers = new OffsetList();
		    accumulatedLSNFileOffsets = new OffsetList();
		}
		accumulatedLSNFileNumbers.add(DbLsn.getFileNumber(lsn), false);
		accumulatedLSNFileOffsets.add(DbLsn.getFileOffset(lsn), false);
		addToLsnINMap(new Long(lsn), in, i);
	    } else {
		callback.processLSN(lsn, (node == null) ? LogEntryType.LOG_LN : node.getLogType());
	    }
	}
	if (in instanceof DIN) {
	    if (in.isRoot()) {
		DIN din = (DIN) in;
		callback.processLSN(din.getDupCountLNRef().getLsn(), LogEntryType.LOG_DUPCOUNTLN);
	    }
	}
    }

    private void fetchAndProcessLSN(long lsn) throws DatabaseException {
	Node node = fetchLSN(lsn);
	if (node != null) {
	    callback.processLSN(lsn, node.getLogType());
	    if (node instanceof IN) {
		accumulateLSNs((IN) node);
	    }
	}
    }

    /** 
     * The default behavior fetches the rootIN from the log, but classes extending this may fetch the root from the tree.
     */
    protected IN getRootIN(long rootLsn) throws DatabaseException {
	return (IN) envImpl.getLogManager().get(rootLsn);
    }

    protected void releaseRootIN(IN ignore) throws DatabaseException {
    }

    protected void addToLsnINMap(Long lsn, IN in, int index) {
    }

    protected Node fetchLSN(long lsn) throws DatabaseException {
	return (Node) envImpl.getLogManager().get(lsn);
    }

    protected void hook359() throws DatabaseException {
    }

}
