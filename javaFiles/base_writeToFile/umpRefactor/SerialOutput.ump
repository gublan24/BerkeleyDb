namespace com.sleepycat.bind.serial;

class SerialOutput
{
  isA ObjectOutputStream;
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.util.RuntimeExceptionWrapper;
  depend com.sleepycat.je.DatabaseException;
  depend java.io.OutputStream;
  depend java.io.ObjectStreamConstants;
  depend java.io.ObjectStreamClass;
  depend java.io.ObjectOutputStream;
  depend java.io.IOException;
  depend java.io.ByteArrayOutputStream;
    private final static byte[] STREAM_HEADER;

    private ClassCatalog classCatalog;

    /** 
     * Creates a serial output stream.
     * @param outis the output stream to which the compact serialized objectswill be written.
     * @param classCatalogis the catalog to which the class descriptions for theserialized objects will be written.
     */
    public SerialOutput(OutputStream out, ClassCatalog classCatalog) throws IOException {
	super(out);
	this.classCatalog = classCatalog;
	useProtocolVersion(ObjectStreamConstants.PROTOCOL_VERSION_2);
    }

    protected void writeClassDescriptor(ObjectStreamClass classdesc) throws IOException {
	try {
	    byte[] id = classCatalog.getClassID(classdesc);
	    writeByte(id.length);
	    write(id);
	} catch (DatabaseException e) {
	    throw new RuntimeExceptionWrapper(e);
	} catch (ClassNotFoundException e) {
	    throw new RuntimeExceptionWrapper(e);
	}
    }

    /** 
     * Returns the fixed stream header used for all serialized streams in PROTOCOL_VERSION_2 format. To save space this header can be removed and serialized streams before storage and inserted before deserializing. {@link SerialOutput} always uses PROTOCOL_VERSION_2 serialization formatto guarantee that this header is fixed.  {@link SerialBinding} removesthis header from serialized streams automatically.
     * @return the fixed stream header.
     */
    public static byte[] getStreamHeader() {
	return STREAM_HEADER;
    }

}
