namespace com.sleepycat.je.txn;

class TxnManager {

    depend com.sleepycat.je.TransactionStats;
    depend com.sleepycat.je.StatsConfig;

    private int numCommits;

    private int numAborts;

    private int numXAPrepares;

    private int numXACommits;

    private int numXAAborts;

    /** 
     * Collect transaction related stats.
     */
    public TransactionStats txnStat(StatsConfig config) throws DatabaseException {
        TransactionStats stats = new TransactionStats();
        Label820://this.hook820(config, stats);
        stats.setNCommits(numCommits);
        stats.setNAborts(numAborts);
        stats.setNXAPrepares(numXAPrepares);
        stats.setNXACommits(numXACommits);
        stats.setNXAAborts(numXAAborts);
        stats.setNActive(allTxns.size());
        TransactionStats.Active[] activeSet = new TransactionStats.Active[stats.getNActive()];
        stats.setActiveTxns(activeSet);
        Iterator iter = allTxns.iterator();
        int i = 0;
        while (iter.hasNext()) {
            Locker txn = (Locker) iter.next();
            activeSet[i] = new TransactionStats.Active(txn.toString(), txn.getId(), 0);
            i++;
        }
        if (config.getClear()) {
            numCommits = 0;
            numAborts = 0;
            numXACommits = 0;
            numXAAborts = 0;
        }
      //End hook820
        return stats;
    }

    /** 
     * Collect lock related stats.
     */
    public LockStats lockStat(StatsConfig config) throws DatabaseException {
        return lockManager.lockStat(config);
    }

 //   void hook820(StatsConfig config, TransactionStats stats) throws DatabaseException {
 //       stats.setNCommits(numCommits);
 //       stats.setNAborts(numAborts);
 //       stats.setNXAPrepares(numXAPrepares);
 //       stats.setNXACommits(numXACommits);
 //       stats.setNXAAborts(numXAAborts);
  //      stats.setNActive(allTxns.size());
 //       TransactionStats.Active[] activeSet = new TransactionStats.Active[stats.getNActive()];
 //       stats.setActiveTxns(activeSet);
 //       Iterator iter = allTxns.iterator();
 //       int i = 0;
 //       while (iter.hasNext()) {
 //           Locker txn = (Locker) iter.next();
 //           activeSet[i] = new TransactionStats.Active(txn.toString(), txn.getId(), 0);
 //           i++;
 //       }
 //       if (config.getClear()) {
 //           numCommits = 0;
 //           numAborts = 0;
 //           numXACommits = 0;
 //           numXAAborts = 0;
 //       }
 //   }

    after Label824: TxnManager(EnvironmentImpl ) {
        numCommits = 0;
        numAborts = 0;
        numXAPrepares = 0;
        numXACommits = 0;
        numXAAborts = 0;
        //original();
    }

    after Label825: unRegisterTxn(Txn , boolean ){

        if (isCommit) {
            numCommits++;
        } else {
            numAborts++;
        }
        //original(isCommit);
    }

    after Label826: registerXATxn(Xid , Txn , boolean ) {
        if (isPrepare) {
            numXAPrepares++;
        }
        //original(isPrepare);
    }

    after Label827: unRegisterXATxn(Xid , boolean ){
        if (isCommit) {
            numXACommits++;
        } else {
            numXAAborts++;
        }
         //        original(isCommit);
    }

}
