namespace com.sleepycat.je.txn;

class LockManager
{
  depend com.sleepycat.je.StatsConfig;
    private long nRequests;

    private long nWaits;

    /** 
     * Statistics
     */
    public LockStats lockStat(StatsConfig config) throws DatabaseException {
			return new LockManager_lockStat(this, config).execute();
    }

    after Label774: (EnvironmentImpl ) {
			nRequests = 0;
			nWaits = 0;
			//original();
    }

    protected LockAttemptResult attemptLockInternal(Long nodeId, Locker locker, LockType type,
	    boolean nonBlockingRequest, int lockTableIndex) throws DatabaseException {
			nRequests++;
			return original(nodeId, locker, type, nonBlockingRequest, lockTableIndex);
    }

    after Label775: attemptLockInternal(Long nodeId, Locker locker, LockType type, boolean nonBlockingRequest, int lockTableIndex) {
			nWaits++;
			//original();
    }

    after Label776: dumpLockTableInternal(LockStats , int ) {
			stats.accumulateNTotalLocks(lockTable.size());
			//original(stats, lockTable);
    }

    after Label777: dumpLockTableInternal(LockStats , int ) {
			stats.setNWaiters(stats.getNWaiters() + lock.nWaiters());
			stats.setNOwners(stats.getNOwners() + lock.nOwners());
			//original(stats, lock);
    }

    after Label778: dumpLockTableInternal(LockStats , int ) {

			if (info.getLockType().isWriteLock()) {
					stats.setNWriteLocks(stats.getNWriteLocks() + 1);
			} else {
					stats.setNReadLocks(stats.getNReadLocks() + 1);
			}
			//original(stats, info);
				}

}
