namespace com.sleepycat.je.cleaner;

class Cleaner
{
  depend com.sleepycat.je.StatsConfig;
  depend com.sleepycat.je.EnvironmentStats;
    int nBacklogFiles = 0;

    int nCleanerDeletions = 0;

    int nINsObsolete = 0;

    int nINsCleaned = 0;

    int nINsDead = 0;

    int nINsMigrated = 0;

    int nLNsObsolete = 0;

    int nLNsCleaned = 0;

    int nLNsDead = 0;

    int nLNsLocked = 0;

    int nLNsMigrated = 0;

    int nLNsMarked = 0;

    int nLNQueueHits = 0;

    int nPendingLNsProcessed = 0;

    int nMarkedLNsProcessed = 0;

    int nToBeCleanedLNsProcessed = 0;

    int nClusterLNsProcessed = 0;

    int nPendingLNsLocked = 0;

    int nEntriesRead = 0;

    long nRepeatIteratorReads = 0;

    /** 
     * Load stats.
     */
    public void loadStats(StatsConfig config, EnvironmentStats stat) throws DatabaseException {
			stat.setCleanerBacklog(nBacklogFiles);
			stat.setNCleanerRuns(nCleanerRuns);
			stat.setNCleanerDeletions(nCleanerDeletions);
			stat.setNINsObsolete(nINsObsolete);
			stat.setNINsCleaned(nINsCleaned);
			stat.setNINsDead(nINsDead);
			stat.setNINsMigrated(nINsMigrated);
			stat.setNLNsObsolete(nLNsObsolete);
			stat.setNLNsCleaned(nLNsCleaned);
			stat.setNLNsDead(nLNsDead);
			stat.setNLNsLocked(nLNsLocked);
			stat.setNLNsMigrated(nLNsMigrated);
			stat.setNLNsMarked(nLNsMarked);
			stat.setNLNQueueHits(nLNQueueHits);
			stat.setNPendingLNsProcessed(nPendingLNsProcessed);
			stat.setNMarkedLNsProcessed(nMarkedLNsProcessed);
			stat.setNToBeCleanedLNsProcessed(nToBeCleanedLNsProcessed);
			stat.setNClusterLNsProcessed(nClusterLNsProcessed);
			stat.setNPendingLNsLocked(nPendingLNsLocked);
			stat.setNCleanerEntriesRead(nEntriesRead);
			stat.setNRepeatIteratorReads(nRepeatIteratorReads);
			if (config.getClear()) {
					nCleanerRuns = 0;
					nCleanerDeletions = 0;
					nINsObsolete = 0;
					nINsCleaned = 0;
					nINsDead = 0;
					nINsMigrated = 0;
					nLNsObsolete = 0;
					nLNsCleaned = 0;
					nLNsDead = 0;
					nLNsLocked = 0;
					nLNsMigrated = 0;
					nLNsMarked = 0;
					nLNQueueHits = 0;
					nPendingLNsProcessed = 0;
					nMarkedLNsProcessed = 0;
					nToBeCleanedLNsProcessed = 0;
					nClusterLNsProcessed = 0;
					nPendingLNsLocked = 0;
					nEntriesRead = 0;
					nRepeatIteratorReads = 0;
			}
				}

    after Label96:deleteSafeToDeleteFiles() {

			nCleanerDeletions++;
			//original();
    }

    /** 
     * Update the lowUtilizationFiles and mustBeCleanedFiles fields with new read-only collections, and update the backlog file count.
     */
    after updateReadOnlyFileCollections() {
			//original();
			nBacklogFiles = fileSelector.getBacklog();
    }

    after Label97: processPendingLN(LN , DatabaseImpl , byte , byte, TreeLocation ){
				nPendingLNsProcessed++;
				//original();
    }

    after Label98: processPendingLN(LN , DatabaseImpl , byte , byte, TreeLocation ){
			nLNsDead++;
			//original();
    }

    after Label99: processPendingLN(LN , DatabaseImpl , byte , byte, TreeLocation ){
			nPendingLNsLocked++;
			//original();
    }

    after Label100: processPendingLN(LN , DatabaseImpl , byte , byte, TreeLocation ){

			nLNsDead++;
			//original();
    }

    after Label101: shouldMigrateLN(boolean , boolean , boolean , boolean , long ) {
				nMarkedLNsProcessed++;
			//original();
    }

    after Label102: shouldMigrateLN(boolean , boolean , boolean , boolean , long ) {
			nToBeCleanedLNsProcessed++;
			//original();
    }

    after Label103: shouldMigrateLN(boolean , boolean , boolean , boolean , long ) {
			nClusterLNsProcessed++;
			//original();
    }

    after Label104:  migrateLN(DatabaseImpl , long , BIN , int , boolean , boolean , long , String ) {
			nLNsMigrated++;
			//original();
    }

    after Label105: migrateLN(DatabaseImpl , long, BIN , int , boolean , boolean , long , String )  {

			if (wasCleaned) {
					nLNsDead++;
			}
			//original(wasCleaned);
    }

    after Label106: migrateLN(DatabaseImpl , long, BIN , int , boolean , boolean , long , String )  {
			if (wasCleaned) {
					nLNsLocked++;
			}
			//original(wasCleaned);
    }

    after Label107: migrateLN(DatabaseImpl , long, BIN , int , boolean , boolean , long , String )  {
			if (wasCleaned) {
					nLNsDead++;
			}
			//original(wasCleaned);
    }

    after Label108: migrateLN(DatabaseImpl , long, BIN , int , boolean , boolean , long , String )  {

			if (wasCleaned) {
					nLNsDead++;
			}
			//original(wasCleaned);
    }

    after Label109: migrateDupCountLN(DatabaseImpl , long , DIN , ChildReference , boolean , boolean , long , String ) { 

	nLNsMigrated++;
	//original();
    }

    after Label110: migrateDupCountLN(DatabaseImpl , long , DIN , ChildReference , boolean , boolean , long , String ) { 

			if (wasCleaned) {
					nLNsLocked++;
			}
			//original(wasCleaned);
    }

    after Label111:migrateDupCountLN(DatabaseImpl , long , DIN , ChildReference , boolean ,	boolean , long , String ){
			if (wasCleaned) {
					nLNsDead++;
			}
			//original(wasCleaned);
				}

}
