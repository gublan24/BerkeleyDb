namespace com.sleepycat.je.log.entry;

class DeletedDupLNLogEntry
{
  isA LNLogEntry;
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.je.txn.Txn;
  depend com.sleepycat.je.tree.LN;
  depend com.sleepycat.je.tree.Key;
  depend com.sleepycat.je.log.LogUtils;
  depend com.sleepycat.je.log.LogEntryType;
  depend com.sleepycat.je.dbi.DatabaseId;
  depend com.sleepycat.je.DatabaseException;
  depend java.nio.ByteBuffer;
    private byte[] dataAsKey;

    /** 
     * Constructor to read an entry.
     */
    public DeletedDupLNLogEntry(boolean isTransactional) {
	super(com.sleepycat.je.tree.LN.class, isTransactional);
    }

    /** 
     * Constructor to make an object that can write this entry.
     */
    public DeletedDupLNLogEntry(LogEntryType entryType, LN ln, DatabaseId dbId, byte[] key, byte[] dataAsKey,
	    long abortLsn, boolean abortKnownDeleted, Txn txn) {
	super(entryType, ln, dbId, key, abortLsn, abortKnownDeleted, txn);
	this.dataAsKey = dataAsKey;
    }

    /** 
     * Extends its super class to read in the extra dup key.
     * @see LNLogEntry#readEntry
     */
    public void readEntry(ByteBuffer entryBuffer, int entrySize, byte entryTypeVersion, boolean readFullItem)
	    throws DatabaseException {
	super.readEntry(entryBuffer, entrySize, entryTypeVersion, readFullItem);
	if (readFullItem) {
	    dataAsKey = LogUtils.readByteArray(entryBuffer);
	} else {
	    dataAsKey = null;
	}
    }

    /** 
     * Extends super class to dump out extra key.
     * @see LNLogEntry#dumpEntry
     */
    public StringBuffer dumpEntry(StringBuffer sb, boolean verbose) {
	super.dumpEntry(sb, verbose);
	sb.append(Key.dumpString(dataAsKey, 0));
	return sb;
    }

    /** 
     * Extend super class to add in extra key.
     * @see LNLogEntry#getLogSize
     */
    public int getLogSize() {
	return super.getLogSize() + LogUtils.getByteArrayLogSize(dataAsKey);
    }

    /** 
     * @see LNLogEntry#writeToLog
     */
    public void writeToLog(ByteBuffer destBuffer) {
	super.writeToLog(destBuffer);
	LogUtils.writeByteArray(destBuffer, dataAsKey);
    }

    /** 
     * Get the data-as-key out of the entry.
     */
    public byte[] getDupKey() {
	return dataAsKey;
    }

}
