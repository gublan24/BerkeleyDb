namespace com.sleepycat.je.tree;

class INDeleteInfo
{
  isA LoggableObject,LogReadable,LogWritable;
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.je.log.LoggableObject;
  depend com.sleepycat.je.log.LogWritable;
  depend com.sleepycat.je.log.LogUtils;
  depend com.sleepycat.je.log.LogReadable;
  depend com.sleepycat.je.log.LogException;
  depend com.sleepycat.je.log.LogEntryType;
  depend com.sleepycat.je.dbi.DatabaseId;
  depend java.nio.ByteBuffer;
    private long deletedNodeId;

    private byte[] deletedIdKey;

    DatabaseId dbId = new DatabaseId();

    /** 
     * Create a new delete info entry.
     */
    public INDeleteInfo(long deletedNodeId, byte[] deletedIdKey, DatabaseId dbId) {
	this.deletedNodeId = deletedNodeId;
	this.deletedIdKey = deletedIdKey;
	this.dbId = dbId;
    }



    public long getDeletedNodeId() {
	return deletedNodeId;
    }

    public byte[] getDeletedIdKey() {
	return deletedIdKey;
    }

    public DatabaseId getDatabaseId() {
	return dbId;
    }

    /** 
     * @see LoggableObject#getLogType
     */
    public LogEntryType getLogType() {
	return LogEntryType.LOG_IN_DELETE_INFO;
    }

    /** 
     * @see LoggableObject#marshallOutsideWriteLatchCan be marshalled outside the log write latch.
     */
    public boolean marshallOutsideWriteLatch() {
	return true;
    }

    /** 
     * @see LoggableObject#countAsObsoleteWhenLogged
     */
    public boolean countAsObsoleteWhenLogged() {
	return false;
    }

    /** 
     * @see LoggableObject#postLogWork
     */
    public void postLogWork(long justLoggedLsn) {
    }

    /** 
     * @see LoggableObject#getLogSize
     */
    public int getLogSize() {
	return LogUtils.LONG_BYTES + LogUtils.getByteArrayLogSize(deletedIdKey) + dbId.getLogSize();
    }

    /** 
     * @see LogWritable#writeToLog
     */
    public void writeToLog(ByteBuffer logBuffer) {
	LogUtils.writeLong(logBuffer, deletedNodeId);
	LogUtils.writeByteArray(logBuffer, deletedIdKey);
	dbId.writeToLog(logBuffer);
    }

    /** 
     * @see LogReadable#readFromLog
     */
    public void readFromLog(ByteBuffer itemBuffer, byte entryTypeVersion) throws LogException {
	deletedNodeId = LogUtils.readLong(itemBuffer);
	deletedIdKey = LogUtils.readByteArray(itemBuffer);
	dbId.readFromLog(itemBuffer, entryTypeVersion);
    }

    /** 
     * @see LogReadable#dumpLog
     */
    public void dumpLog(StringBuffer sb, boolean verbose) {
	sb.append("<INDeleteEntry node=\"").append(deletedNodeId);
	sb.append("\">");
	sb.append(Key.dumpString(deletedIdKey, 0));
	dbId.dumpLog(sb, verbose);
	sb.append("</INDeleteEntry>");
    }

    /** 
     * @see LogReadable#logEntryIsTransactional
     */
    public boolean logEntryIsTransactional() {
	return false;
    }

    /** 
     * @see LogReadable#getTransactionId
     */
    public long getTransactionId() {
	return 0;
    }

}
