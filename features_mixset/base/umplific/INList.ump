namespace com.sleepycat.je.dbi;

class INList
{
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.je.tree.IN;
  depend com.sleepycat.je.DatabaseException;
  depend java.util.TreeSet;
  depend java.util.SortedSet;
  depend java.util.Set;
  depend java.util.Iterator;
  depend java.util.HashSet;
    private static final String DEBUG_NAME = INList.class.getName();

    private SortedSet ins = null;

    private EnvironmentImpl envImpl;

    INList(EnvironmentImpl envImpl) {
	this.envImpl = envImpl;
	ins = new TreeSet();
	Label338: ;//this.hook338(envImpl);
    }

    /** 
     * Used only by tree verifier when validating INList. Must be called with orig.majorLatch acquired.
     */
    public INList(INList orig, EnvironmentImpl envImpl) throws DatabaseException {
	ins = new TreeSet(orig.getINs());
	Lanbel340: //this.hook340();
	this.envImpl = envImpl;
	Label339: //this.hook339(envImpl);
    }

    public SortedSet getINs() {
	return ins;
    }

    public int getSize() {
	return ins.size();
    }

    /** 
     * An IN has just come into memory, add it to the list.
     */
    public void add(IN in) throws DatabaseException {
	new INList_add(this, in).execute();
    }

    private void addAndSetMemory(Set set, IN in) {
	new INList_addAndSetMemory(this, set, in).execute();
    }

    /** 
     * An IN is getting evicted or is displaced by recovery.  Caller is responsible for acquiring the major latch before calling this and releasing it when they're done.
     */
    public void removeLatchAlreadyHeld(IN in) throws DatabaseException {
		boolean removeDone = ins.remove(in);
		Label341: //removeDone = this.hook341(in, removeDone);
		assert removeDone;
		//this.hook346(in);
    Label346:
    }

    /** 
     * An IN is getting swept or is displaced by recovery.
     */
    public void remove(IN in) throws DatabaseException {
				try {
						 	removeLatchAlreadyHeld(in); //original(in);
					} finally {
							LabelRemove_1://releaseMajorLatch();
					}
    }

    public SortedSet tailSet(IN in) throws DatabaseException {
	return ins.tailSet(in);
    }

    public IN first() throws DatabaseException {
	return (IN) ins.first();
    }

    /** 
     * Return an iterator over the main 'ins' set.  Returned iterator will not show the elements in addedINs. The major latch should be held before entering.  The caller is responsible for releasing the major latch when they're finished with the iterator.
     * @return an iterator over the main 'ins' set.
     */
    public Iterator iterator() {
	return ins.iterator();
    }

    /** 
     * Clear the entire list during recovery and at shutdown.
     */
    public void clear() throws DatabaseException {
	ins.clear();
	//this.hook342();
    }

    public void dump() {
	System.out.println("size=" + getSize());
	Iterator iter = ins.iterator();
	while (iter.hasNext()) {
	    IN theIN = (IN) iter.next();
	    System.out.println(
		    "db=" + theIN.getDatabase().getId() + " nid=: " + theIN.getNodeId() + "/" + theIN.getLevel());
	}
    }

 //   protected void hook338(EnvironmentImpl envImpl) {
   // }

 //   protected void hook339(EnvironmentImpl envImpl) throws DatabaseException {
  //  }

   // protected void hook340() throws DatabaseException {
   // }

//    protected boolean hook341(IN in, boolean removeDone) throws DatabaseException {
//	return removeDone;
 //   }

  //  protected void hook342() throws DatabaseException {
  //  }

    protected void hook346(IN in) throws DatabaseException {
    }

}
