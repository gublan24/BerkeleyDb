namespace com.sleepycat.je.recovery;

class RootFlusher
{
  isA WithRootLatched;
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.je.tree.WithRootLatched;
  depend com.sleepycat.je.tree.IN;
  depend com.sleepycat.je.tree.ChildReference;
  depend com.sleepycat.je.log.LogManager;
  depend com.sleepycat.je.dbi.DatabaseImpl;
  depend com.sleepycat.je.DatabaseException;
    private DatabaseImpl db;

    private boolean flushed;

    private boolean stillRoot;

    private LogManager logManager;

    private long targetNodeId;

    RootFlusher(DatabaseImpl db, LogManager logManager, long targetNodeId) {
	this.db = db;
	flushed = false;
	this.logManager = logManager;
	this.targetNodeId = targetNodeId;
	stillRoot = false;
    }

    /** 
     * Flush the rootIN if dirty.
     */
    public IN doWork(ChildReference root) throws DatabaseException {
			if (root == null) {
					return null;
			}
			IN rootIN = (IN) root.fetchTarget(db, null);
			Label599: //this.hook599(root, rootIN);
			if (rootIN.getNodeId() == targetNodeId) {
							stillRoot = true;
							if (rootIN.getDirty()) {
						long newLsn = rootIN.log(logManager);
						root.setLsn(newLsn);
						flushed = true;
							}
					}
		//hook599
    Label599_1:
		return null;
    }

    boolean getFlushed() {
	return flushed;
    }

    boolean stillRoot() {
	return stillRoot;
    }

 /*   protected void hook599(ChildReference root, IN rootIN) throws DatabaseException {
			if (rootIN.getNodeId() == targetNodeId) {
					stillRoot = true;
					if (rootIN.getDirty()) {
				long newLsn = rootIN.log(logManager);
				root.setLsn(newLsn);
				flushed = true;
					}
			}
    }
*/

}
