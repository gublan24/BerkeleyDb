namespace com.sleepycat.je.txn;

class TxnManager {

    depend de.ovgu.cide.jakutil.*;
    depend com.sleepycat.je.utilint.DbLsn;
    depend com.sleepycat.je.dbi.MemoryBudget;
    depend com.sleepycat.je.dbi.EnvironmentImpl;
    depend com.sleepycat.je.TransactionConfig;
    depend com.sleepycat.je.Transaction;
    depend com.sleepycat.je.LockStats;
    depend com.sleepycat.je.DatabaseException;
    depend javax.transaction.xa.Xid;
    depend java.util.Set;
    depend java.util.Map;
    depend java.util.Iterator;
    depend java.util.HashSet;
    depend java.util.HashMap;
    depend java.util.Collections;

    static final long NULL_TXN_ID = -1;

    private static final String DEBUG_NAME = TxnManager.class.getName();

    private LockManager lockManager;

    private EnvironmentImpl env;

    private Set allTxns;

    private Map allXATxns;

    private Map thread2Txn;

    private long lastUsedTxnId;

    private int nActiveSerializable;

    public TxnManager(EnvironmentImpl env) throws DatabaseException {
        Label822:           ;  //this.hook822(env);
   			if (env.isNoLocking()) {
            lockManager = new DummyLockManager(env);
        } else {
            lockManager = new SyncedLockManager(env);
        }
        this.env = env;
        allTxns = new HashSet();
        Label821:           ;  //this.hook821(env);
        allXATxns = Collections.synchronizedMap(new HashMap());
        thread2Txn = Collections.synchronizedMap(new HashMap());
        Label824:            ;  //this.hook824();
        lastUsedTxnId = 0;
    }

    /** 
     * Set the txn id sequence.
     */
    synchronized public void setLastTxnId(long lastId) {
        this.lastUsedTxnId = lastId;
    }

    /** 
     * Get the last used id, for checkpoint info.
     */
    public synchronized long getLastTxnId() {
        return lastUsedTxnId;
    }

    /** 
     * Get the next transaction id to use.
     */
    synchronized long incTxnId() {
        return ++lastUsedTxnId;
    }

    /** 
     * Create a new transaction.
     * @param parentfor nested transactions, not yet supported
     * @param txnConfigspecifies txn attributes
     * @return the new txn
     */
    public Txn txnBegin(Transaction parent, TransactionConfig txnConfig) throws DatabaseException {
        if (parent != null) {
            throw new DatabaseException("Nested transactions are not supported yet.");
        }
        return new Txn(env, txnConfig);
    }

    /** 
     * Give transactions and environment access to lock manager.
     */
    public LockManager getLockManager() {
        return lockManager;
    }

    /** 
     * Called when txn is created.
     */
    void registerTxn(Txn txn) throws DatabaseException {
        allTxns.add(txn);
        if (txn.isSerializableIsolation()) {
            nActiveSerializable++;
        }
    }

    /** 
     * Called when txn ends.
     */
    void unRegisterTxn(Txn txn, boolean isCommit) throws DatabaseException {
        allTxns.remove(txn);
        //	Label:           ;  //this.hook828(txn);
        Label828:
            Label825: //Label:           ;  //this.hook825(isCommit);
        if (txn.isSerializableIsolation()) {
            nActiveSerializable--;
        }
    }

    /** 
     * Called when txn is created.
     */
    public void registerXATxn(Xid xid, Txn txn, boolean isPrepare) throws DatabaseException {
        if (!allXATxns.containsKey(xid)) {
            allXATxns.put(xid, txn);
            //	    Label:           ;  //this.hook829();
            Label829:
        }
        Label826: //Label:           ;  //this.hook826(isPrepare);
    }

    /** 
     * Called when txn ends.
     */
    void unRegisterXATxn(Xid xid, boolean isCommit) throws DatabaseException {
        if (allXATxns.remove(xid) == null) {
            throw new DatabaseException("XA Transaction " + xid + " can not be unregistered.");
        }
        //	Label:           ;  //this.hook830();
        Label830:
            Label827: //Label:           ;  //this.hook827(isCommit);
    }

    /** 
     * Retrieve a Txn object from an Xid.
     */
    public Txn getTxnFromXid(Xid xid) throws DatabaseException {
        return (Txn) allXATxns.get(xid);
    }

    /** 
     * Called when txn is assoc'd with this thread.
     */
    public void setTxnForThread(Transaction txn) {
        Thread curThread = Thread.currentThread();
        thread2Txn.put(curThread, txn);
    }

    /** 
     * Called when txn is assoc'd with this thread.
     */
    public Transaction unsetTxnForThread() throws DatabaseException {
        Thread curThread = Thread.currentThread();
        return (Transaction) thread2Txn.remove(curThread);
    }

    /** 
     * Retrieve a Txn object for this Thread.
     */
    public Transaction getTxnForThread() throws DatabaseException {
        return (Transaction) thread2Txn.get(Thread.currentThread());
    }

    public Xid[] XARecover() throws DatabaseException {
        Set xidSet = allXATxns.keySet();
        Xid[] ret = new Xid[xidSet.size()];
        ret = (Xid[]) xidSet.toArray(ret);
        return ret;
    }

    /** 
     * Returns whether there are any active serializable transactions, excluding the transaction given (if non-null). This is intentionally returned without latching, since latching would not make the act of reading an integer more atomic than it already is.
     */
    public boolean areOtherSerializableTransactionsActive(Locker excludeLocker) {
        int exclude = (excludeLocker != null && excludeLocker.isSerializableIsolation()) ? 1 : 0;
        return (nActiveSerializable - exclude > 0);
    }

    /** 
     * Get the earliest LSN of all the active transactions, for checkpoint.
     */
    public long getFirstActiveLsn() throws DatabaseException {
			try{
						  long firstActive = DbLsn.NULL_LSN;
						  Label823: //firstActive = this.hook823(firstActive);
							Iterator iter = allTxns.iterator();
						  while (iter.hasNext()) {
						      long txnFirstActive = ((Txn) iter.next()).getFirstActiveLsn();
						      if (firstActive == DbLsn.NULL_LSN) {
						          firstActive = txnFirstActive;
						      } else if (txnFirstActive != DbLsn.NULL_LSN) {
						          if (DbLsn.compareTo(txnFirstActive, firstActive) < 0) {
						              firstActive = txnFirstActive;
						          }
						      }
						  }
			}
			finally{
			Label823_1:
			}
//end of hook823
        return firstActive;
    }

   // protected void hook821(EnvironmentImpl env) throws DatabaseException {}
/*
    protected void hook822(EnvironmentImpl env) throws DatabaseException {
        if (env.isNoLocking()) {
            lockManager = new DummyLockManager(env);
        } else {
            lockManager = new SyncedLockManager(env);
        }
    }

    protected long hook823(long firstActive) throws DatabaseException {
        Iterator iter = allTxns.iterator();
        while (iter.hasNext()) {
            long txnFirstActive = ((Txn) iter.next()).getFirstActiveLsn();
            if (firstActive == DbLsn.NULL_LSN) {
                firstActive = txnFirstActive;
            } else if (txnFirstActive != DbLsn.NULL_LSN) {
                if (DbLsn.compareTo(txnFirstActive, firstActive) < 0) {
                    firstActive = txnFirstActive;
                }
            }
        }
        return firstActive;
    }
*/
    //    protected void hook824() throws DatabaseException {
    //    }

    protected void hook825(boolean isCommit) throws DatabaseException {}

    protected void hook826(boolean isPrepare) throws DatabaseException {}

    protected void hook827(boolean isCommit) throws DatabaseException {}

    //    protected void hook828(Txn txn) throws DatabaseException {
    //    }

    protected void hook829() throws DatabaseException {}

    protected void hook830() throws DatabaseException {}

}
