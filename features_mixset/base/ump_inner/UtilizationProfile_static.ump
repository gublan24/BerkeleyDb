// Original file:/home/abdulaziz/Desktop/BerkeleyDb/javaFiles/base_x/com/sleepycat/je/cleaner/UtilizationProfile.java
namespace com.sleepycat.je.cleaner;
class UtilizationProfile {
   static class UtilizationProfile_clearCache {
      UtilizationProfile_clearCache(    UtilizationProfile _this){
        this._this=_this;
      }
      void execute(){
        _this.fileSummaryMap=new TreeMap();
        _this.cachePopulated=false;
      }
      protected UtilizationProfile _this;
      protected int memorySize;
      protected MemoryBudget mb;
    }
   static class UtilizationProfile_removeFile {
      UtilizationProfile_removeFile(    UtilizationProfile _this,    Long fileNum){
        this._this=_this;
        this.fileNum=fileNum;
      }
      void execute() throws DatabaseException {
  synchronized (_this) {
          assert _this.cachePopulated;
          if (_this.fileSummaryMap.remove(fileNum) != null) {
            //           ;  //this.hook192();
            Label192:
          }
        }
        _this.deleteFileSummary(fileNum);
      }
      protected UtilizationProfile _this;
      protected Long fileNum;
      protected MemoryBudget mb;
     // protected void hook192() throws DatabaseException {
     // }
    }
   static class UtilizationProfile_putFileSummary {
      UtilizationProfile_putFileSummary(    UtilizationProfile _this,    TrackedFileSummary tfs){
        this._this=_this;
        this.tfs=tfs;
      }
      PackedOffsets execute() throws DatabaseException {
        if (_this.env.isReadOnly()) {
          throw new DatabaseException("Cannot write file summary in a read-only environment");
        }
        if (tfs.isEmpty()) {
          return null;
        }
        if (!_this.cachePopulated) {
          return null;
        }
        fileNum=tfs.getFileNumber();
        fileNumLong=new Long(fileNum);
        summary=(FileSummary)_this.fileSummaryMap.get(fileNumLong);
        if (summary == null) {
          file=new File(_this.env.getFileManager().getFullFileName(fileNum,FileManager.JE_SUFFIX));
          if (!file.exists()) {
            return null;
          }
          summary=new FileSummary();
        }
        tmp=new FileSummary();
        tmp.add(summary);
        tmp.add(tfs);
        sequence=tmp.getEntriesCounted();
        ln=new FileSummaryLN(summary);
        ln.setTrackedSummary(tfs);
        _this.insertFileSummary(ln,fileNum,sequence);
        summary=ln.getBaseSummary();
        if (_this.fileSummaryMap.put(fileNumLong,summary) == null) {
          //           ;  //this.hook193();
          Label193:
        }
        return ln.getObsoleteOffsets();
      }
      protected UtilizationProfile _this;
      protected TrackedFileSummary tfs;
      protected long fileNum;
      protected Long fileNumLong;
      protected FileSummary summary;
      protected File file;
      protected FileSummary tmp;
      protected int sequence;
      protected FileSummaryLN ln;
      protected MemoryBudget mb;
    //  protected void hook193() throws DatabaseException {
     // }
    }
   static class UtilizationProfile_populateCache {
      UtilizationProfile_populateCache(    UtilizationProfile _this){
        this._this=_this;
      }
      boolean execute() throws DatabaseException {
        assert !_this.cachePopulated;
        if (!_this.openFileSummaryDatabase()) {
          return false;
        }
        //           ;  //this.hook194();
        Label194:
        existingFiles=_this.env.getFileManager().getAllFileNumbers();
        locker=null;
        cursor=null;
        try {
          locker=new BasicLocker(_this.env);
          cursor=new CursorImpl(_this.fileSummaryDb,locker);
          keyEntry=new DatabaseEntry();
          dataEntry=new DatabaseEntry();
          if (cursor.positionFirstOrLast(true,null)) {
            status=cursor.getCurrentAlreadyLatched(keyEntry,dataEntry,LockType.NONE,true);
            if (status != OperationStatus.SUCCESS) {
              status=cursor.getNext(keyEntry,dataEntry,LockType.NONE,true,false);
            }
            while (status == OperationStatus.SUCCESS) {
              Label176:           ;  //this.hook176();
              ln=(FileSummaryLN)cursor.getCurrentLN(LockType.NONE);
              if (ln == null) {
                status=cursor.getNext(keyEntry,dataEntry,LockType.NONE,true,false);
                continue;
              }
              keyBytes=keyEntry.getData();
              isOldVersion=ln.hasStringKey(keyBytes);
              fileNum=ln.getFileNumber(keyBytes);
              fileNumLong=new Long(fileNum);
              if (Arrays.binarySearch(existingFiles,fileNumLong) >= 0) {
                _this.fileSummaryMap.put(fileNumLong,ln.getBaseSummary());
                if (isOldVersion) {
                  _this.insertFileSummary(ln,fileNum,0);
                  Label182:           ;  //this.hook182();
                  cursor.delete();
                  Label181:           ;  //this.hook181();
                }
   else {
                 //            ;  //this.hook191();
                    Label191:
                }
              }
   else {
                _this.fileSummaryMap.remove(fileNumLong);
                if (isOldVersion) {
                  Label184:           ;  //this.hook184();
                  cursor.delete();
                  Label183:           ;  //this.hook183();
                }
   else {
                  _this.deleteFileSummary(fileNumLong);
                }
              }
              if (isOldVersion) {
                status=cursor.getNext(keyEntry,dataEntry,LockType.NONE,true,false);
              }
   else {
                if (!_this.getFirstFSLN(cursor,fileNum + 1,keyEntry,dataEntry,LockType.NONE)) {
                  status=OperationStatus.NOTFOUND;
                }
              }
            }
          }
        }
    finally {
          if (cursor != null) {
            Label185:           ;  //this.hook185();
            cursor.close();
          }
          if (locker != null) {
            locker.operationEnd();
          }
          //           ;  //this.hook195();
          Label195: ;
        }
        _this.cachePopulated=true;
        return true;
      }
      protected UtilizationProfile _this;
      protected int oldMemorySize;
      protected Long[] existingFiles;
      protected Locker locker;
      protected CursorImpl cursor;
      protected DatabaseEntry keyEntry;
      protected DatabaseEntry dataEntry;
      protected OperationStatus status;
      protected FileSummaryLN ln;
      protected byte[] keyBytes;
      protected boolean isOldVersion;
      protected long fileNum;
      protected Long fileNumLong;
      protected int newMemorySize;
      protected MemoryBudget mb;
/*
      protected void hook176() throws DatabaseException {
      }
      protected void hook181() throws DatabaseException {
      }
      protected void hook182() throws DatabaseException {
      }
      protected void hook183() throws DatabaseException {
      }
      protected void hook184() throws DatabaseException {
      }
      protected void hook185() throws DatabaseException {
      }
*/
     // protected void hook191() throws DatabaseException {
     // }
      //protected void hook194() throws DatabaseException {
      //}
      //protected void hook195() throws DatabaseException {
      //}
    }
}
