
namespace com.sleepycat.je.cleaner;
class FileProcessor {
  static class RootDoWork{
      isA WithRootLatched;
      private DatabaseImpl db;
      private IN inClone;
      private long lsn;
      RootDoWork(    DatabaseImpl db,    IN inClone,    long lsn){
        this.db=db;
        this.inClone=inClone;
        this.lsn=lsn;
      }
      public IN doWork(    ChildReference root) throws DatabaseException {
        if (root == null || root.fetchTarget(db,null).getNodeId() != inClone.getNodeId()) {
          return null;
        }
        if (DbLsn.compareTo(root.getLsn(),lsn) <= 0) {
          IN rootIN=(IN)root.fetchTarget(db,null);
          rootIN.latch(Cleaner.UPDATE_GENERATION);
          return rootIN;
        }
   else {
          return null;
        }
      }
    }
   static class FileProcessor_processFile {
      FileProcessor_processFile(    FileProcessor _this,    Long fileNum){
        this._this=_this;
        this.fileNum=fileNum;
      }
      boolean execute() throws DatabaseException, IOException {
        obsoleteOffsets=new PackedOffsets();
        tfs=_this.profile.getObsoleteDetail(fileNum,obsoleteOffsets,true);
        obsoleteIter=obsoleteOffsets.iterator();
        nextObsolete=-1;
        readBufferSize=_this.cleaner.readBufferSize;
        Label128:   ; //this.hook128();
        //this.hook161();
        Label161:   ;
        Label119:   ; //this.hook119();
        Label127:   ; //this.hook127();
        Label154:   ; //this.hook154();
        dbCache=new HashMap();
        try {
          reader=new CleanerFileReader(_this.env,readBufferSize,DbLsn.NULL_LSN,fileNum);
          Label137:   ; //this.hook137();
          dbMapTree=_this.env.getDbMapTree();
          location=new TreeLocation();
          nProcessedLNs=0;
          while (reader.readNextEntry()) {
            Label146:   ; //this.hook146();
            lsn=reader.getLastLsn();
            fileOffset=DbLsn.getFileOffset(lsn);
            isLN=reader.isLN();
            isIN=reader.isIN();
            isRoot=reader.isRoot();
            isObsolete=false;
            if (_this.env.isClosing()) {
              return false;
            }
            while (nextObsolete < fileOffset && obsoleteIter.hasNext()) {
              nextObsolete=obsoleteIter.next();
            }
            if (nextObsolete == fileOffset) {
              isObsolete=true;
            }
            if (!isObsolete && !isLN && !isIN&& !isRoot) {
              isObsolete=true;
            }
            if (!isObsolete && isLN && reader.getLN().isDeleted()) {
              isObsolete=true;
            }
            if (!isObsolete && tfs != null && tfs.containsObsoleteOffset(fileOffset)) {
              isObsolete=true;
            }
            if (isObsolete) {
              Label147:   ; //this.hook147();
              Label156:   ; //this.hook156();
              continue;
            }
            Label120:   ; //this.hook120();
            if (isLN) {
              targetLN=reader.getLN();
              dbId2=reader.getDatabaseId();
              key=reader.getKey();
              dupKey=reader.getDupTreeKey();
              aLsn=new Long(DbLsn.getFileOffset(lsn));
              aLninfo=new LNInfo(targetLN,dbId2,key,dupKey);
              Label130:   ; //this.hook130();
  						p=null;
        			Label131:   ; //this.hook131();
        			_this.processLN(fileNum,location,aLsn,aLninfo,p,dbCache);
//end hook130
              nProcessedLNs+=1;
              if (nProcessedLNs % _this.PROCESS_PENDING_EVERY_N_LNS == 0) {
                _this.cleaner.processPending();
              }
            }
   else           if (isIN) {
              targetIN=reader.getIN();
              dbId3=reader.getDatabaseId();
              db3=dbMapTree.getDb(dbId3,_this.cleaner.lockTimeout,dbCache);
              targetIN.setDatabase(db3);
              _this.processIN(targetIN,db3,lsn);
            }
   else           if (isRoot) {
              _this.env.rewriteMapTreeRoot(lsn);
            }
   else {
              assert false;
            }
          }
          Label129:   ; //this.hook129();
          Label155:   ; //this.hook155();
          Label145:   ; //this.hook145();
        }
    finally {
          //this.hook162();
          Label162:   ;
          if (tfs != null) {
            tfs.setAllowFlush(true);
          }
        }
        return true;
      }
      protected FileProcessor _this;
      protected Long fileNum;
      protected PackedOffsets obsoleteOffsets;
      protected TrackedFileSummary tfs;
      protected PackedOffsets.Iterator obsoleteIter;
      protected long nextObsolete;
      protected int readBufferSize;
      protected int lookAheadCacheSize;
      protected int adjustMem;
      protected MemoryBudget budget;
      protected Set checkPendingDbSet;
      protected Map dbCache;
      protected CleanerFileReader reader;
      protected DbTree dbMapTree;
      protected TreeLocation location;
      protected int nProcessedLNs;
      protected long lsn;
      protected long fileOffset;
      protected boolean isLN;
      protected boolean isIN;
      protected boolean isRoot;
      protected boolean isObsolete;
      protected DatabaseId dbId1;
      protected LN targetLN;
      protected DatabaseId dbId2;
      protected byte[] key;
      protected byte[] dupKey;
      protected Long aLsn;
      protected LNInfo aLninfo;
      protected Object p;
      protected IN targetIN;
      protected DatabaseId dbId3;
      protected DatabaseImpl db3;
      protected DatabaseId dbId;
      protected DatabaseImpl db;

    }

}
