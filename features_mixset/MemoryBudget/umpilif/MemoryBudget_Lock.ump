namespace com.sleepycat.je.txn;

class Lock
{
    private static final int REMOVE_LOCKINFO_OVERHEAD = 0 - MemoryBudget.LOCKINFO_OVERHEAD;

    after Label760: addWaiterToEndOfList(LockInfo , MemoryBudget , int ){
			mb.updateLockMemoryUsage(MemoryBudget.LOCKINFO_OVERHEAD, lockTableIndex);
      //	original(mb, lockTableIndex);
    }

    after Label761:addWaiterToHeadOfList(LockInfo , MemoryBudget , int ) {
			mb.updateLockMemoryUsage(MemoryBudget.LOCKINFO_OVERHEAD, lockTableIndex);
			//original(mb, lockTableIndex);
    }

    after Label762:flushWaiter(Locker , MemoryBudget , int ){
			mb.updateLockMemoryUsage(REMOVE_LOCKINFO_OVERHEAD, lockTableIndex);
			//original(mb, lockTableIndex);
    }

    after Label763:flushWaiter(Locker , MemoryBudget , int ){
			mb.updateLockMemoryUsage(REMOVE_LOCKINFO_OVERHEAD, lockTableIndex);
			//original(mb, lockTableIndex);
    }

    after Label764:addOwner(LockInfo , MemoryBudget , int ) {
			mb.updateLockMemoryUsage(MemoryBudget.LOCKINFO_OVERHEAD, lockTableIndex);
      //			original(mb, lockTableIndex);
    }

    after Label765: flushOwner(LockInfo , MemoryBudget , int ){
			if (removed) {
					mb.updateLockMemoryUsage(REMOVE_LOCKINFO_OVERHEAD, lockTableIndex);
			}
      //			original(mb, lockTableIndex, removed);
		}

    after Label766:flushOwner(Locker , MemoryBudget , int ) {
		if (flushedInfo != null) {
			  mb.updateLockMemoryUsage(REMOVE_LOCKINFO_OVERHEAD, lockTableIndex);
			}
     //		original(mb, lockTableIndex, flushedInfo);
		}

    after Label767:release(Locker , MemoryBudget, int ){
			mb.updateLockMemoryUsage(REMOVE_LOCKINFO_OVERHEAD, lockTableIndex);
		//			original(mb, lockTableIndex);
    }

    after Label768:transfer(Locker , Locker , MemoryBudget , int ) {
			mb.updateLockMemoryUsage(0 - (numRemovedLockInfos * MemoryBudget.LOCKINFO_OVERHEAD), lockTableIndex);
		//			original(mb, lockTableIndex, numRemovedLockInfos);
    }

}
