namespace com.sleepycat.je.txn;

class Txn
{
    private final int READ_LOCK_OVERHEAD = MemoryBudget.HASHSET_ENTRY_OVERHEAD;

    private final int WRITE_LOCK_OVERHEAD = MemoryBudget.HASHMAP_ENTRY_OVERHEAD + MemoryBudget.LONG_OVERHEAD;

    private int accumulatedDelta = 0;

    private void updateMemoryUsage(int delta) {
			inMemorySize += delta;
			accumulatedDelta += delta;
			if (accumulatedDelta > ACCUMULATED_LIMIT || accumulatedDelta < -ACCUMULATED_LIMIT) {
					envImpl.getMemoryBudget().updateMiscMemoryUsage(accumulatedDelta);
					accumulatedDelta = 0;
			}
    }

    int getAccumulatedDelta() {
	   return accumulatedDelta;
    }

    after Label809:init(EnvironmentImpl , TransactionConfig ){
	    updateMemoryUsage(MemoryBudget.TXN_OVERHEAD);
	    //original();
    }

    after Label810:addReadLock(Lock){
			delta += READ_LOCK_OVERHEAD;
			updateMemoryUsage(delta);
			//original(delta);
    }

  after Label811:addReadLock(Lock){
			delta = MemoryBudget.HASHSET_OVERHEAD;
			//return original(delta);
    }

    after Label812:removeLock(long, Lock ){
			updateMemoryUsage(0 - READ_LOCK_OVERHEAD);
//			original();
    }

  after Label813:removeLock(long, Lock ){
			updateMemoryUsage(0 - WRITE_LOCK_OVERHEAD);
//			original();
    }

    after Label814:moveWriteToReadLock(long , Lock )  {
	    updateMemoryUsage(0 - WRITE_LOCK_OVERHEAD);
	    //original();
    }

}
