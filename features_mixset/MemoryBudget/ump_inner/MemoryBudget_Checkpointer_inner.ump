
namespace com.sleepycat.je.recovery;

class Checkpointer {

      after Label553: selectDirtyINs(boolean , boolean ) {
        ;
			 MemoryBudget mb = envImpl.getMemoryBudget();

      }
      
      after Label554: selectDirtyINs(boolean , boolean ) {
            mb.refreshTreeMemoryUsage(totalSize);

      }

      after Label530: selectDirtyINs(boolean , boolean ) {
                    totalSize = mb.accumulateNewUsage(in, totalSize);

      }
    
   static class Checkpointer_doCheckpoint {

      after Label548:execute(){
        dirtyMapMemSize=0;
        //original();
      }

      after Label549:execute(){
        mb.updateMiscMemoryUsage(0 - dirtyMapMemSize);
        //original();
      }

      after Label550:execute(){
        mb.updateMiscMemoryUsage(totalSize);
        //original();
      }
      after Label551:execute(){
        totalSize=0;
        //original();
      }
      after Label552:execute(){
        size=nodeSet.size() * MemoryBudget.CHECKPOINT_REFERENCE_SIZE;
        totalSize+=size;
        dirtyMapMemSize+=size;
        //original();
      }
    }
}
