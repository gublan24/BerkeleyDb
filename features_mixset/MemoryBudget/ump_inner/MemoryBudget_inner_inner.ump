// Original file:/home/abdulaziz/Desktop/BerkeleyDb/ALL_FEATURE/features/MemoryBudget/com/sleepycat/je/dbi/MemoryBudget.java
namespace com.sleepycat.je.dbi;
class MemoryBudget {
   static class MemoryBudget_sinit {
    
    before execute(){
        is64=false;
        isJVM14=true;  
    }

    after execute(){
      //  original();
        overrideArch=System.getProperty(FORCE_JVM_ARCH);
        try {
          if (overrideArch == null) {
            arch=System.getProperty(JVM_ARCH_PROPERTY);
            if (arch != null) {
              is64=Integer.parseInt(arch) == 64;
            }
          }
   else {
            is64=Integer.parseInt(overrideArch) == 64;
          }
        }
   catch (      NumberFormatException NFE) {
          NFE.printStackTrace(System.err);
        }
        if (is64) {
          if (isJVM14) {
            RE=new RuntimeException("1.4 based 64 bit JVM not supported");
            RE.printStackTrace(System.err);
            throw RE;
          }
          LONG_OVERHEAD=LONG_OVERHEAD_64;
          BYTE_ARRAY_OVERHEAD=BYTE_ARRAY_OVERHEAD_64;
          OBJECT_OVERHEAD=OBJECT_OVERHEAD_64;
          ARRAY_ITEM_OVERHEAD=ARRAY_ITEM_OVERHEAD_64;
          HASHMAP_OVERHEAD=HASHMAP_OVERHEAD_64;
          HASHMAP_ENTRY_OVERHEAD=HASHMAP_ENTRY_OVERHEAD_64;
          HASHSET_OVERHEAD=HASHSET_OVERHEAD_64;
          HASHSET_ENTRY_OVERHEAD=HASHSET_ENTRY_OVERHEAD_64;
          TWOHASHMAPS_OVERHEAD=TWOHASHMAPS_OVERHEAD_64;
          TREEMAP_OVERHEAD=TREEMAP_OVERHEAD_64;
          TREEMAP_ENTRY_OVERHEAD=TREEMAP_ENTRY_OVERHEAD_64;
          LN_OVERHEAD=LN_OVERHEAD_64;
          DUPCOUNTLN_OVERHEAD=DUPCOUNTLN_OVERHEAD_64;
          BIN_FIXED_OVERHEAD=BIN_FIXED_OVERHEAD_64_15;
          DIN_FIXED_OVERHEAD=DIN_FIXED_OVERHEAD_64_15;
          DBIN_FIXED_OVERHEAD=DBIN_FIXED_OVERHEAD_64_15;
          IN_FIXED_OVERHEAD=IN_FIXED_OVERHEAD_64_15;
          TXN_OVERHEAD=TXN_OVERHEAD_64_15;
          CHECKPOINT_REFERENCE_SIZE=CHECKPOINT_REFERENCE_SIZE_64_15;
          KEY_OVERHEAD=KEY_OVERHEAD_64;
          LOCK_OVERHEAD=LOCK_OVERHEAD_64;
          LOCKINFO_OVERHEAD=LOCKINFO_OVERHEAD_64;
          UTILIZATION_PROFILE_ENTRY=UTILIZATION_PROFILE_ENTRY_64;
          TFS_LIST_INITIAL_OVERHEAD=TFS_LIST_INITIAL_OVERHEAD_64;
          TFS_LIST_SEGMENT_OVERHEAD=TFS_LIST_SEGMENT_OVERHEAD_64;
          LN_INFO_OVERHEAD=LN_INFO_OVERHEAD_64;
          LONG_LIST_PER_ITEM_OVERHEAD=LONG_LIST_PER_ITEM_OVERHEAD_64;
        }
   else {
          LONG_OVERHEAD=LONG_OVERHEAD_32;
          BYTE_ARRAY_OVERHEAD=BYTE_ARRAY_OVERHEAD_32;
          OBJECT_OVERHEAD=OBJECT_OVERHEAD_32;
          ARRAY_ITEM_OVERHEAD=ARRAY_ITEM_OVERHEAD_32;
          HASHMAP_OVERHEAD=HASHMAP_OVERHEAD_32;
          HASHMAP_ENTRY_OVERHEAD=HASHMAP_ENTRY_OVERHEAD_32;
          HASHSET_OVERHEAD=HASHSET_OVERHEAD_32;
          HASHSET_ENTRY_OVERHEAD=HASHSET_ENTRY_OVERHEAD_32;
          TWOHASHMAPS_OVERHEAD=TWOHASHMAPS_OVERHEAD_32;
          TREEMAP_OVERHEAD=TREEMAP_OVERHEAD_32;
          TREEMAP_ENTRY_OVERHEAD=TREEMAP_ENTRY_OVERHEAD_32;
          LN_OVERHEAD=LN_OVERHEAD_32;
          DUPCOUNTLN_OVERHEAD=DUPCOUNTLN_OVERHEAD_32;
          if (isJVM14) {
            BIN_FIXED_OVERHEAD=BIN_FIXED_OVERHEAD_32_14;
            DIN_FIXED_OVERHEAD=DIN_FIXED_OVERHEAD_32_14;
            DBIN_FIXED_OVERHEAD=DBIN_FIXED_OVERHEAD_32_14;
            IN_FIXED_OVERHEAD=IN_FIXED_OVERHEAD_32_14;
            TXN_OVERHEAD=TXN_OVERHEAD_32_14;
            CHECKPOINT_REFERENCE_SIZE=CHECKPOINT_REFERENCE_SIZE_32_14;
          }
   else {
            BIN_FIXED_OVERHEAD=BIN_FIXED_OVERHEAD_32_15;
            DIN_FIXED_OVERHEAD=DIN_FIXED_OVERHEAD_32_15;
            DBIN_FIXED_OVERHEAD=DBIN_FIXED_OVERHEAD_32_15;
            IN_FIXED_OVERHEAD=IN_FIXED_OVERHEAD_32_15;
            TXN_OVERHEAD=TXN_OVERHEAD_32_15;
            CHECKPOINT_REFERENCE_SIZE=CHECKPOINT_REFERENCE_SIZE_32_15;
          }
          KEY_OVERHEAD=KEY_OVERHEAD_32;
          LOCK_OVERHEAD=LOCK_OVERHEAD_32;
          LOCKINFO_OVERHEAD=LOCKINFO_OVERHEAD_32;
          UTILIZATION_PROFILE_ENTRY=UTILIZATION_PROFILE_ENTRY_32;
          TFS_LIST_INITIAL_OVERHEAD=TFS_LIST_INITIAL_OVERHEAD_32;
          TFS_LIST_SEGMENT_OVERHEAD=TFS_LIST_SEGMENT_OVERHEAD_32;
          LN_INFO_OVERHEAD=LN_INFO_OVERHEAD_32;
          LONG_LIST_PER_ITEM_OVERHEAD=LONG_LIST_PER_ITEM_OVERHEAD_32;
        }
      }
    }
   static class MemoryBudget_reset {
      after execute() {
        //original();
        _this.trackerBudget=true ? newTrackerBudget : newMaxMemory;
        _this.cacheBudget=newMaxMemory - newLogBufferBudget;
        _this.nLockTables=configManager.getInt(EnvironmentParams.N_LOCK_TABLES);
        _this.lockMemoryUsage=new long[_this.nLockTables];
      }
    }
}
