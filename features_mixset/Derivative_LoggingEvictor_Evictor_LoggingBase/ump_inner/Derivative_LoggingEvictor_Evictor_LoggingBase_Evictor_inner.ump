
namespace com.sleepycat.je.evictor;
class Evictor {

  after Label371: evictBatch(String , long ) {

			logger = envImpl.getLogger();
            if (logger.isLoggable(detailedTraceLevel)) {
                /* Ugh, only create trace message when logging. */
								Label369: ;
                Tracer.trace(detailedTraceLevel, envImpl, msg +   
                             " finished=" + finished +
                             " source=" + source +
                             " requiredEvictBytes=" +
                             formatter.format(requiredEvictBytes) +
                             " evictBytes=" + 
                             formatter.format(evictBytes) +
                             " inListSize=" + inListStartSize +
                             " nNodesScanned=" + nNodesScannedThisRun +
       
                             " nBatchSets=" + nBatchSets);
            }


      }
    



      after Label372: isRunnable(String ) { 
				logger = envImpl.getLogger();
        if (logger.isLoggable(detailedTraceLevel)) {

            /* 
             * Generate debugging output. Note that Runtime.freeMemory
             * fluctuates over time as the JVM grabs more memory, so you really
             * have to do totalMemory - freeMemory to get stack usage.  (You
             * can't get the concept of memory available from free memory.)
             */
            Runtime r = Runtime.getRuntime();
            long totalBytes = r.totalMemory();
            long freeBytes= r.freeMemory();
            long usedBytes = r.totalMemory() - r.freeMemory(); 
            StringBuffer sb = new StringBuffer();
            sb.append(" source=").append(source);
						Label370: ;

            sb.append(" requiredEvict=").
                append(formatter.format(currentRequiredEvictBytes));
            sb.append(" JVMtotalBytes= ").append(formatter.format(totalBytes));
            sb.append(" JVMfreeBytes= ").append(formatter.format(freeBytes));
            sb.append(" JVMusedBytes= ").append(formatter.format(usedBytes));
            logger.log(detailedTraceLevel, sb.toString());
        }
        
      }
    
}
