namespace com.sleepycat.je.incomp;

class INCompressor
{
  isA DaemonThread;
  depend de.ovgu.cide.jakutil.*;
  depend com.sleepycat.je.utilint.Tracer;
  depend com.sleepycat.je.utilint.PropUtil;
  depend com.sleepycat.je.utilint.DaemonThread;
  depend com.sleepycat.je.tree.Tree.SearchType;
  depend com.sleepycat.je.tree.Tree;
  depend com.sleepycat.je.tree.NodeNotEmptyException;
  depend com.sleepycat.je.tree.Node;
  depend com.sleepycat.je.tree.Key;
  depend com.sleepycat.je.tree.IN;
  depend com.sleepycat.je.tree.DIN;
  depend com.sleepycat.je.tree.DBIN;
  depend com.sleepycat.je.tree.CursorsExistException;
  depend com.sleepycat.je.tree.BINReference;
  depend com.sleepycat.je.tree.BIN;
  depend com.sleepycat.je.dbi.EnvironmentImpl;
  depend com.sleepycat.je.dbi.DbTree;
  depend com.sleepycat.je.dbi.DatabaseImpl;
  depend com.sleepycat.je.config.EnvironmentParams;
  depend com.sleepycat.je.cleaner.UtilizationTracker;
  depend com.sleepycat.je.cleaner.TrackedFileSummary;
  depend com.sleepycat.je.DatabaseException;
  depend java.util.logging.Level;
  depend java.util.Map;
  depend java.util.List;
  depend java.util.Iterator;
  depend java.util.HashMap;
  depend java.util.Collection;
  depend java.util.ArrayList;
    private static final String TRACE_COMPRESS = "INCompress:";

    private static final boolean DEBUG = false;

    private EnvironmentImpl env;

    private long lockTimeout;

    private Map binRefQueue;

    private Object binRefQueueSync;

    public INCompressor(EnvironmentImpl env, long waitTime, String name) throws DatabaseException {
	super(waitTime, name, env);
	this.env = env;
	lockTimeout = PropUtil
		.microsToMillis(env.getConfigManager().getLong(EnvironmentParams.COMPRESSOR_LOCK_TIMEOUT));
	binRefQueue = new HashMap();
	binRefQueueSync = new Object();
    }

    public String toString() {
	StringBuffer sb = new StringBuffer();
	sb.append("<INCompressor name=\"").append(name).append("\"/>");
	return sb.toString();
    }

    synchronized public void clearEnv() {
	env = null;
    }

    /** 
     * The default daemon work queue is not used because we need a map, not a set.
     */
    public void addToQueue(Object o) throws DatabaseException {
	throw new DatabaseException("INCompressor.addToQueue should never be called.");
    }

    public int getBinRefQueueSize() throws DatabaseException {
	int size = 0;
	synchronized (binRefQueueSync) {
	    size = binRefQueue.size();
	}
	return size;
    }

    /** 
     * Adds the BIN and deleted Key to the queue if the BIN is not already in the queue, or adds the deleted key to an existing entry if one exists.
     */
    public void addBinKeyToQueue(BIN bin, Key deletedKey, boolean doWakeup) throws DatabaseException {
	synchronized (binRefQueueSync) {
	    addBinKeyToQueueAlreadyLatched(bin, deletedKey);
	}
	if (doWakeup) {
	    wakeup();
	}
    }

    /** 
     * Adds the BINReference to the queue if the BIN is not already in the queue, or adds the deleted keys to an existing entry if one exists.
     */
    public void addBinRefToQueue(BINReference binRef, boolean doWakeup) throws DatabaseException {
	synchronized (binRefQueueSync) {
	    addBinRefToQueueAlreadyLatched(binRef);
	}
	if (doWakeup) {
	    wakeup();
	}
    }

    /** 
     * Adds an entire collection of BINReferences to the queue at once.  Use this to avoid latching for each add.
     */
    public void addMultipleBinRefsToQueue(Collection binRefs, boolean doWakeup) throws DatabaseException {
	synchronized (binRefQueueSync) {
	    Iterator it = binRefs.iterator();
	    while (it.hasNext()) {
		BINReference binRef = (BINReference) it.next();
		addBinRefToQueueAlreadyLatched(binRef);
	    }
	}
	if (doWakeup) {
	    wakeup();
	}
    }

    /** 
     * Adds the BINReference with the latch held.
     */
    private void addBinRefToQueueAlreadyLatched(BINReference binRef) {
	Long node = new Long(binRef.getNodeId());
	BINReference existingRef = (BINReference) binRefQueue.get(node);
	if (existingRef != null) {
	    existingRef.addDeletedKeys(binRef);
	} else {
	    binRefQueue.put(node, binRef);
	}
    }

    /** 
     * Adds the BIN and deleted Key with the latch held.
     */
    private void addBinKeyToQueueAlreadyLatched(BIN bin, Key deletedKey) {
	Long node = new Long(bin.getNodeId());
	BINReference existingRef = (BINReference) binRefQueue.get(node);
	if (existingRef != null) {
	    if (deletedKey != null) {
		existingRef.addDeletedKey(deletedKey);
	    }
	} else {
	    BINReference binRef = bin.createReference();
	    if (deletedKey != null) {
		binRef.addDeletedKey(deletedKey);
	    }
	    binRefQueue.put(node, binRef);
	}
    }

    public boolean exists(long nodeId) {
	Long node = new Long(nodeId);
	synchronized (binRefQueueSync) {
	    return (binRefQueue.get(node) != null);
	}
    }

    private BINReference removeCompressibleBinReference(long nodeId) {
	Long node = new Long(nodeId);
	BINReference foundRef = null;
	synchronized (binRefQueueSync) {
	    BINReference target = (BINReference) binRefQueue.remove(node);
	    if (target != null) {
		if (target.deletedKeysExist()) {
		    foundRef = target;
		} else {
		    binRefQueue.put(node, target);
		}
	    }
	}
	return foundRef;
    }

    /** 
     * Return the number of retries when a deadlock exception occurs.
     */
    protected int nDeadlockRetries() throws DatabaseException {
	return env.getConfigManager().getInt(EnvironmentParams.COMPRESSOR_RETRY);
    }

    public synchronized void onWakeup() throws DatabaseException {
			if (env.isClosed()) {
					return;
			}
			Label403: //this.hook403();
			doCompress();
    }

    /** 
     * The real work to doing a compress. This may be called by the compressor thread or programatically.
     */
    public synchronized void doCompress() throws DatabaseException {
			if (!isRunnable()) {
					return;
			}
			Map queueSnapshot = null;
			int binQueueSize = 0;
			synchronized (binRefQueueSync) {
					binQueueSize = binRefQueue.size();
					if (binQueueSize > 0) {
				queueSnapshot = binRefQueue;
				binRefQueue = new HashMap();
					}
			}
			if (binQueueSize > 0) {
					Label404: //this.hook404();
					Label392: //this.hook392(binQueueSize);
					Label393: //this.hook393();
					UtilizationTracker tracker = new UtilizationTracker(env);
					Map dbCache = new HashMap();
					DbTree dbTree = env.getDbMapTree();
					BINSearch binSearch = new BINSearch();
					try {
				Iterator it = queueSnapshot.values().iterator();
				while (it.hasNext()) {
						if (env.isClosed()) {
					return;
						}
						BINReference binRef = (BINReference) it.next();
						if (!findDBAndBIN(binSearch, binRef, dbTree, dbCache)) {
					continue;
						}
						if (binRef.deletedKeysExist()) {
					boolean requeued = compressBin(binSearch.db, binSearch.bin, binRef, tracker);
					if (!requeued) {
							checkForRelocatedSlots(binSearch.db, binRef, tracker);
					}
						} else {
					BIN foundBin = binSearch.bin;
					byte[] idKey = foundBin.getIdentifierKey();
					boolean isDBIN = foundBin.containsDuplicates();
					byte[] dupKey = null;
					if (isDBIN) {
							dupKey = ((DBIN) foundBin).getDupKey();
					}
					Label394: //this.hook394(foundBin);
					pruneBIN(binSearch.db, binRef, idKey, isDBIN, dupKey, tracker);
						}
				}
				TrackedFileSummary[] summaries = tracker.getTrackedFiles();
				if (summaries.length > 0) {
						env.getUtilizationProfile().countAndLogSummaries(summaries);
				}
					} finally {
				Label395: //this.hook395();
				Label405: //this.hook405();
					}
			}
    }

    /** 
     * Compresses a single BIN and then deletes the BIN if it is empty.
     * @param bin is latched when this method is called, and unlatched when itreturns.
     * @return true if the BINReference was requeued by this method.
     */
    private boolean compressBin(DatabaseImpl db, BIN bin, BINReference binRef, UtilizationTracker tracker)
	    throws DatabaseException {
	try {
			boolean empty = false;
			boolean requeued = false;
			byte[] idKey = bin.getIdentifierKey();
			byte[] dupKey = null;
			boolean isDBIN = bin.containsDuplicates();
			Label396: //this.hook396(bin, binRef, empty, requeued, dupKey, isDBIN);
			int nCursors = bin.nCursors();
			if (nCursors > 0) {
					addBinRefToQueue(binRef, false);
					requeued = true;
					Label414: //this.hook414();
			} else {
					requeued = bin.compress(binRef, true);
					if (!requeued) {
				empty = (bin.getNEntries() == 0);
				if (empty) {
						if (isDBIN) {
					dupKey = ((DBIN) bin).getDupKey();
						}
				}
					}
			}
			// End of 396
			if (empty) {
					requeued = pruneBIN(db, binRef, idKey, isDBIN, dupKey, tracker);
			}
	} finally {
Label396_1: //
}

			return requeued;
    }

    /** 
     * If the target BIN is empty, attempt to remove the empty branch of the  tree.
     * @return true if the pruning was unable to proceed and the BINReferencewas requeued.
     */
    private boolean pruneBIN(DatabaseImpl dbImpl, BINReference binRef, byte[] idKey, boolean containsDups,
	    byte[] dupKey, UtilizationTracker tracker) throws DatabaseException {
			boolean requeued = false;
			try {
					Tree tree = dbImpl.getTree();
					if (containsDups) {
				tree.deleteDup(idKey, dupKey, tracker);
					} else {
				tree.delete(idKey, tracker);
					}
					Label406: //this.hook406();
			} catch (NodeNotEmptyException NNEE) {
					Label407: //this.hook407();
			} catch (CursorsExistException e) {
					addBinRefToQueue(binRef, false);
					Label408: //this.hook408();
					requeued = true;
			}
			return requeued;
    }

    private void checkForRelocatedSlots(DatabaseImpl db, BINReference binRef, UtilizationTracker tracker)
	    throws DatabaseException {
	Iterator iter = binRef.getDeletedKeyIterator();
	if (iter != null) {
	    byte[] mainKey = binRef.getKey();
	    boolean isDup = (binRef.getData() != null);
	    while (iter.hasNext()) {
		Key key = (Key) iter.next();
		BIN splitBin = isDup ? searchForBIN(db, mainKey, key.getKey()) : searchForBIN(db, key.getKey(), null);
		if (splitBin != null) {
		    BINReference splitBinRef = splitBin.createReference();
		    splitBinRef.addDeletedKey(key);
		    compressBin(db, splitBin, splitBinRef, tracker);
		}
	    }
	}
    }

    private boolean isRunnable() throws DatabaseException {
	return true;
    }

    /** 
     * Search the tree for the BIN or DBIN that corresponds to this BINReference.
     * @param binRef the BINReference that indicates the bin we want.
     * @return the BIN or DBIN that corresponds to this BINReference. Thenode is latched upon return. Returns null if the BIN can't be found.
     */
    public BIN searchForBIN(DatabaseImpl db, BINReference binRef) throws DatabaseException {
	return searchForBIN(db, binRef.getKey(), binRef.getData());
    }

    private BIN searchForBIN(DatabaseImpl db, byte[] mainKey, byte[] dupKey) throws DatabaseException {
	try {
	    Tree tree = db.getTree();
	    I
N in = tree.search(mainKey, SearchType.NORMAL, -1, null, false);
	    if (in == null) {
		return null;
	    }
	    if (dupKey == null) {
		return (BIN) in;
	    }
	    DIN duplicateRoot = null;
	    DBIN duplicateBin = null;
	    BIN bin = (BIN) in;
	    Label397: //this.hook397(mainKey, dupKey, tree, duplicateRoot, duplicateBin, bin);
      int index = bin.findEntry(mainKey, false, true);
			if (index >= 0) {
					Node node = null;
					if (!bin.isEntryKnownDeleted(index)) {
				node = bin.fetchTarget(index);
					}
					if (node == null) {
				Label400: //this.hook400(bin);
				throw new ReturnObject(null);
					}
					if (node.containsDuplicates()) {
				duplicateRoot = (DIN) node;
				Label401: //this.hook401(duplicateRoot, bin);
				duplicateBin = (DBIN) tree.searchSubTree(duplicateRoot, dupKey, SearchType.NORMAL, -1, null, false);
				throw new ReturnObject(duplicateBin);
					} else {
				throw new ReturnObject(bin);
					}
			} else {
					Label402: //this.hook402(bin);
					throw new ReturnObject(null);
			}
      //End of hook397
	    throw ReturnHack.returnObject;
	} catch (ReturnObject r) {
hook397_1:
	    return (BIN) r.value;
	}
    }

    /** 
     * Lazily compress a single BIN. Do not do any pruning. The target IN should be latched when we enter, and it will be remain latched.
     */
    public void lazyCompress(IN in) throws DatabaseException {
			if (!in.isCompressible()) {
					return;
			}
			Label398: //this.hook398(in);
			BIN bin = (BIN) in;
			int nCursors = bin.nCursors();
			if (nCursors > 0) {
					return;
			} else {
					BINReference binRef = removeCompressibleBinReference(bin.getNodeId());
					if ((binRef == null) || (!binRef.deletedKeysExist())) {
				return;
					} else {
				boolean requeued = bin.compress(binRef, false);
				Label409://this.hook409();
				if (!requeued && binRef.deletedKeysExist()) {
						addBinRefToQueue(binRef, false);
						Label410: //this.hook410();
				} else {
						if (bin.getNEntries() == 0) {
					addBinRefToQueue(binRef, false);
					Label411: //this.hook411();
						}
				}
					}
			}
    }

    private boolean findDBAndBIN(BINSearch binSearch, BINReference binRef, DbTree dbTree, Map dbCache)
	    throws DatabaseException {
			binSearch.db = dbTree.getDb(binRef.getDatabaseId(), lockTimeout, dbCache);
			boolean close = binSearch.db == null;
			Label415: //close = this.hook415(binSearch, close);
			if (close) {
					Label412: //this.hook412();
					return false;
			}
			Label391: //this.hook391();
			binSearch.bin = searchForBIN(binSearch.db, binRef);
			if ((binSearch.bin == null) || binSearch.bin.getNodeId() != binRef.getNodeId()) {
					Label399: //this.hook399(binSearch);
					Label413: //this.hook413();
					return false;
			}
			return true;
    }

 //   protected void hook391() throws DatabaseException {
 //   }

//    protected void hook392(int binQueueSize) throws DatabaseException {
//    }

//    protected void hook393() throws DatabaseException {
//    }

//    protected void hook394(BIN foundBin) throws DatabaseException {
//    }

//    protected void hook395() throws DatabaseException {
//    }

//    protected void hook396(BIN bin, BINReference binRef, boolean empty, boolean requeued, byte[] dupKey, boolean isDBIN)
//	    throws DatabaseException {
//    }

//    protected void hook397(byte[] mainKey, byte[] dupKey, Tree tree, DIN duplicateRoot, DBIN duplicateBin, BIN bin)
//	    throws DatabaseException {
//    }

   // protected void hook398(IN in) throws DatabaseException {
   // }

   // protected void hook399(BINSearch binSearch) throws DatabaseException {
   // }

   // protected void hook400(BIN bin) throws DatabaseException {
   // }

  //  protected void hook401(DIN duplicateRoot, BIN bin) throws DatabaseException {
  //  }

 //   protected void hook402(BIN bin) throws DatabaseException {
 //   }

 //   protected void hook403() throws DatabaseException {
 //   }

  //  protected void hook404() throws DatabaseException {
   // }

//    protected void hook405() throws DatabaseException {
//    }

//    protected void hook406() throws DatabaseException, NodeNotEmptyException, CursorsExistException {
//    }

//    protected void hook407() throws DatabaseException {
//    }

//    protected void hook408() throws DatabaseException {
//    }

 //   protected void hook409() throws DatabaseException {
 //   }

//    protected void hook410() throws DatabaseException {
//    }

//    protected void hook411() throws DatabaseException {
//    }

//    protected void hook412() throws DatabaseException {
//    }

   // protected void hook413() throws DatabaseException {
    //}

  //  protected void hook414() throws DatabaseException {
  //  }

//    protected boolean hook415(BINSearch binSearch, boolean close) throws DatabaseException {
//	return close;
//    }

}
