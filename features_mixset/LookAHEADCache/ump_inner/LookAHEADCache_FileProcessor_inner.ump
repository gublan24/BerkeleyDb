
namespace com.sleepycat.je.cleaner;
class FileProcessor {

 
      after Label132: processLN(Long , TreeLocation , Long , LNInfo , LookAheadCache , Map ) {

        offset = lookAheadCache.nextOffset();
				info = lookAheadCache.remove(offset);

      }

      after Label133:processLN(Long , TreeLocation , Long , LNInfo , LookAheadCache , Map ) {

					if (!isDupCountLN) {
								for (int i = 0; i < bin.getNEntries(); i += 1) {
									long lsn = bin.getLsn(i);
									if (i != index && !bin.isEntryKnownDeleted(i)
											&& !bin.isEntryPendingDeleted(i)
											&& DbLsn.getFileNumber(lsn) == fileNum.longValue()) {

										Long myOffset = new Long(DbLsn.getFileOffset(lsn));
										LNInfo myInfo = lookAheadCache.remove(myOffset);

										if (myInfo != null) {
										Label117: ;
											processFoundLN(myInfo, lsn, lsn, bin, i, null);
										}
									}
								}
							}
       
      }
    





      after Label127:  processFile(Long ) {
        ;
        		LookAheadCache lookAheadCache = new LookAheadCache(lookAheadCacheSize);

      }


      after Label128:  processFile(Long ) {
				;
				int lookAheadCacheSize = cleaner.lookAheadCacheSize;

      }

      after Label129:  processFile(Long ) {
        	while (!lookAheadCache.isEmpty()) {
			Label120: ;
				processLN(fileNum, location, null,null,lookAheadCache, dbCache);
			}

		

      }

      after Label130:  processFile(Long ) {
			lookAheadCache.add(aLsn, aLninfo);

      if (lookAheadCache.isFull()) {
						processLN(fileNum, location, aLsn, aLninfo,
								lookAheadCache, dbCache);
					}

      }
      after Label131: execute() {
        p=lookAheadCache;
        //original();
      }
    
}
