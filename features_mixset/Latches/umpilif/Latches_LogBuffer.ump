namespace com.sleepycat.je.log;

class LogBuffer
{
  depend com.sleepycat.je.latch.LatchSupport;
  depend com.sleepycat.je.latch.Latch;
    private Latch readLatch;

    /** 
     * When modifying the buffer, acquire the readLatch. Call release() to release the latch. Note that containsLsn() acquires the latch for reading.
     */
    public void latchForWrite() throws DatabaseException {
	readLatch.acquire();
    }

    /** 
     * @see LogSource#release
     */
    public void release() throws DatabaseException {
	readLatch.releaseIfOwner();
    }

    after Label479 :  LogBuffer(int , EnvironmentImpl ) {

	readLatch = LatchSupport.makeLatch(DEBUG_NAME, env);
	////original(env);
    }

  before reinit(){
	readLatch.acquire();
	//original();
	//readLatch.release();
    }  


  after reinit(){
	readLatch.release();
    }

    /** 
     * This LSN has been written to the log.
     */
    before registerLsn(long )  {
	readLatch.acquire();
    }


    after registerLsn(long )  {
	    readLatch.release();
	
    }


    /** 
     * Support for reading a log entry out of a still-in-memory log
     * @return true if this buffer holds the entry at this LSN. The buffer willbe latched for read. Returns false if LSN is not here, and releases the read latch.
     */
  before containsLsn(long )  {
	readLatch.acquire();
	//return //original(lsn);
    }

    after Label480: containsLsn(long ) {
	readLatch.release();
	//original();
    }

}
