namespace com.sleepycat.je.tree;

class BIN {
    after Label603: descendOnParentSearch(SearchResult, boolean, boolean, long, Node, boolean) {

        ((IN) child).releaseLatch();
        //original(child);
    }

    after Label604: descendOnParentSearch(SearchResult, boolean, boolean, long, Node, boolean) {

        releaseLatch();
        //original();
    }

    after Label605: descendOnParentSearch(SearchResult, boolean, boolean, long, Node, boolean) {
        releaseLatch();
        //original();
    }

    after Label606: descendOnParentSearch(SearchResult, boolean, boolean, long, Node, boolean) {
        releaseLatch();
        //original();
    }

    /** 
     * Register a cursor with this bin. Caller has this bin already latched.
     * @param cursorCursor to register.
     */
    before addCursor(CursorImpl) {
        assert isLatchOwner();
        //original(cursor);
    }

    /** 
     * Unregister a cursor with this bin. Caller has this bin already latched.
     * @param cursorCursor to unregister.
     */
    before removeCursor(CursorImpl) {
        assert isLatchOwner();
        //original(cursor);
    }

    /** 
     * Adjust any cursors that are referring to this BIN. This method is called during a split operation. "this" is the BIN being split. newSibling is the new BIN into which the entries from "this" between newSiblingLow and newSiblingHigh have been copied.
     * @param newSibling -the newSibling into which "this" has been split.
     * @param newSiblingLow,newSiblingHigh - the low and high entry of "this" that were moved into newSibling.
     */
    before adjustCursors(IN, int, int) {
        assert newSibling.isLatchOwner();
        assert this.isLatchOwner();
        //original(newSibling, newSiblingLow, newSiblingHigh);
    }

    /** 
     * Adjust cursors referring to this BIN following an insert.
     * @param insertIndex -The index of the new entry.
     */
    before adjustCursorsForInsert(int) {
        assert this.isLatchOwner();
        //original(insertIndex);
    }

    /** 
     * Adjust cursors referring to the given binIndex in this BIN following a mutation of the entry from an LN to a DIN. The entry was moved from a BIN to a newly created DBIN so each cursor must be added to the new DBIN.
     * @param binIndex -The index of the DIN (previously LN) entry in the BIN.
     * @param dupBin -The DBIN into which the LN entry was moved.
     * @param dupBinIndex -The index of the moved LN entry in the DBIN.
     * @param excludeCursor -The cursor being used for insertion and that should not be updated.
     */
    before adjustCursorsForMutation(int, DBIN, int, CursorImpl) {
        assert this.isLatchOwner();
        //original(binIndex, dupBin, dupBinIndex, excludeCursor);
    }

    after Label607: isValidForDelete() {
        needToLatch = !isLatchOwner();
    }

    after Label607_1: isValidForDelete() {
        if (needToLatch && isLatchOwner()) {
            releaseLatch();
        }
    }

    after Label608: isValidForDelete() {
        if (needToLatch) {
            latch();
        }
        //original(needToLatch);
    }

}
