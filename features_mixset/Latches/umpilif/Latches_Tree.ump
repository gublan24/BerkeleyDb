namespace com.sleepycat.je.tree;

class Tree {

    depend com.sleepycat.je.latch.SharedLatch;
    depend com.sleepycat.je.latch.LatchSupport;
    depend com.sleepycat.je.latch.LatchNotHeldException;
    
private SharedLatch rootLatch;

    private void releaseNodeLadderLatches(ArrayList nodeLadder) throws LatchNotHeldException {

        ListIterator iter = nodeLadder.listIterator(nodeLadder.size());
        while (iter.hasPrevious()) {
            SplitInfo info3 = (SplitInfo) iter.previous();
            info3.child.releaseLatch();
        }
    }

    /** 
     * constructor helper
     */
    before init(DatabaseImpl) {
        rootLatch = LatchSupport.makeSharedLatch("RootLatch", (database != null) ? database.getDbEnvironment() : null);
        ////original(database);
    }

    /** 
     * Set the root for the tree. Should only be called within the root latch.
     */
    before setRoot(ChildReference, boolean) {
        assert(notLatched || rootLatch.isWriteLockedByCurrentThread());
        ////original(newRoot, notLatched);
    }

    after Label670_1: withRootLatchedExclusive(WithRootLatched ) {
        //	try {	    //original(wrl);} finally {
        rootLatch.release();
        //	}
    }

    after Label671_1: withRootLatchedExclusive(WithRootLatched ) {
        //	try {   //original(wrl);	} finally {
        rootLatch.release();
        //}
    }

    after Label672: delete(byte , UtilizationTracker ){
        rootLatch.acquireExclusive();
    }


    after Label672_1: delete(byte , UtilizationTracker  ){

        releaseNodeLadderLatches(nodeLadder);
        if (rootIN != null) {
            rootIN.releaseLatch();
        }
        rootLatch.release();
    }

    /** 
     * This entire tree is empty, clear the root and log a new MapLN
     * @return the rootIN that has been detached, or null if there hasn't beenany removal.
     */
    before logTreeRemoval(IN, UtilizationTracker) {
        assert rootLatch.isWriteLockedByCurrentThread();
        //	return //original(rootIN, tracker);
    }

    after Label673: cascadeUpdates(ArrayList, BIN, int) {
        assert rootLatch.isWriteLockedByCurrentThread();
        //original();
    }

    after Label674_1: deleteDupSubtree(byte, BIN, int) {
        //try {// deletedSubtreeRoot = //original(idKey, mainKey, in, deletedSubtreeRoot);} finally {
        in .releaseLatch();
        //}
        //return deletedSubtreeRoot;
    }

    after Label675: deleteDupSubtree(byte, BIN, int) {

        if (duplicateRoot != null) {
            duplicateRoot.releaseLatch();
        }
        //original(duplicateRoot);
    }

    after Label676: deleteDupSubtree(byte, BIN, int) {
        releaseNodeLadderLatches(nodeLadder);
        //original(nodeLadder);
    }

    after Label677: getFirstNode(DIN) {
        assert dupRoot.isLatchOwner();
        //original(dupRoot);
    }

    after Label678: getLastNode(DIN) {
        assert dupRoot.isLatchOwner();
        //original(dupRoot);
    }

    after Label679: getParentINForChildIN(IN, boolean, boolean, int, List) {
        child.releaseLatch();
        //original(child);
    }

    after Label680: getParentINForChildIN(IN, boolean, boolean, int, List) {
        assert child.isLatchOwner();
        //original(child);
    }

    after Label681: getParentINForChildIN(long, boolean, boolean, byte, byte, boolean, boolean, int, List, boolean) {

        potentialParent.releaseLatchIfOwner();
        //original(potentialParent);
    }

    after Label682: getParentBINForChildLN(TreeLocation, byte, byte, LN, boolean, boolean, boolean, boolean) {
        searchResult.releaseLatchIfOwner();
        //original(searchResult);
    }

    after Label683_1: getParentBINForChildLN(TreeLocation, byte, byte, LN, boolean, boolean, boolean, boolean) {
        //	try {	    //original(location, mainKey, dupKey, ln, splitsAllowed, findDeletedEntries, searchDupTree, updateGeneration,		    exactSearch, indicateIfExact, childNode);} 


            location.bin.releaseLatchIfOwner();
    

    }

    after Label684: searchDupTreeByNodeId(TreeLocation, Node, LN, boolean, boolean) {
        if (oldBIN != null) {
            oldBIN.releaseLatch();
        }
        //original(oldBIN);
    }

    after Label685: searchDupTreeForDBIN(TreeLocation, byte, DIN, LN, boolean, boolean, boolean, boolean, boolean) {
        dupRoot.latch();
    }

    after Label685_1: searchDupTreeForDBIN(TreeLocation, byte, DIN, LN, boolean, boolean, boolean, boolean, boolean) {

        //	try {	    //original(location, dupKey, dupRoot, ln, findDeletedEntries, indicateIfExact, exactSearch, splitsAllowed, updateGeneration);} 

            dupRoot.releaseLatchIfOwner();
     
    }

    after Label686_1: getNextBinInternal(boolean, BIN, boolean) {
        //					try {							//original(traverseWithinDupTree, forward, idKey, next, parent, nextIN);} 

     //   catch (DatabaseException e) {
            next.releaseLatchIfOwner();
            if (parent != null) {
                parent.releaseLatchIfOwner();
            }
            if (nextIN != null) {
                nextIN.releaseLatchIfOwner();
            }

      //  }
    }

    after Label687: getNextBinInternal(boolean, BIN, boolean) {
        assert LatchSupport.countLatchesHeld() == 1: LatchSupport.latchesHeldToString();
        //original();
    }

    after Label688_1: splitRoot() {

        curRoot.releaseLatch();

    }

    after Label689: splitRoot() {

        curRoot.latch();
        //original(curRoot);
    }

    after Label690: searchSubTree(IN, byte, SearchType, long, BINBoundary, boolean) {
        assert parent.isLatchOwner();
        //original(parent);
    }

    after Label691: searchSubTree(IN, byte, SearchType, long, BINBoundary, boolean) {

        parent.releaseLatch();
        //original(parent);
    }

    after Label692: searchSubTree(IN, byte, SearchType, long, BINBoundary, boolean) {
        parent.releaseLatch();
        //original(parent);
    }

    after Label693: searchSubTree(IN, byte, SearchType, long, BINBoundary, boolean) {
        child.releaseLatch();
        //original(child);
    }

    after Label694: searchSubTree(IN, byte, SearchType, long, BINBoundary, boolean) {
        if (child != null) {
            child.releaseLatchIfOwner();
        }
        parent.releaseLatchIfOwner();
        //original(parent, child);
    }

    after Label695: searchDeletableSubTree(IN, byte, ArrayList) {
        assert parent.isLatchOwner();
        //original(parent);
    }

    after Label696: searchDeletableSubTree(IN, byte, ArrayList) {
        info5.child.releaseLatch();
        //original(info5);
    }

    after Label697: searchDeletableSubTree(IN, byte, ArrayList) {
        releaseNodeLadderLatches(nodeLadder);
        //original(nodeLadder);
    }

    after Label698_1: searchSubTreeUntilSplit(IN, byte, long, boolean) {
      
            if (child != null) {
                child.releaseLatchIfOwner();
            }
            parent.releaseLatchIfOwner();

        
    }

        after Label699: searchSubTreeUntilSplit(IN, byte, long, boolean) {
            assert parent.isLatchOwner();
            //original(parent);
        }

        after Label700: searchSubTreeUntilSplit(IN, byte, long, boolean) {
            parent.releaseLatch();
            //original(parent);
        }

        after Label701_1: getRootIN(boolean) {

            rootLatch.release();

        }

        after Label702: getRootIN(boolean) {
            rootLatch.acquireShared();
            //original();
        }

        after Label703_1: insert(LN, byte, boolean, CursorImpl, LockResult) {


            cursor.releaseBIN();

        }

        after Label704_1: insertDuplicate(byte, BIN, LN, LogManager, INList, CursorImpl, LockResult, boolean) {
            if (dupBin != null) {
                dupBin.releaseLatchIfOwner();
            }
            if (dupRoot != null) {
                dupRoot.releaseLatchIfOwner();
            }
        }

        after Label705: insertDuplicate(byte, BIN, LN, LogManager, INList, CursorImpl, LockResult, boolean) {
            dupRoot.releaseLatch();
            //original(dupRoot);
        }

        after Label706_1: maybeSplitDuplicateRoot(BIN, int) {

            curRoot.releaseLatch();

        }

        after Label707: maybeSplitDuplicateRoot(BIN, int) {
            newRoot.latch();
            //original(newRoot);
        }

        after Label708_1: createDuplicateTree(byte, LogManager, INList, LN, CursorImpl) {

            catch (DatabaseException e) {
                dupBin.releaseLatchIfOwner();
                dupRoot.releaseLatchIfOwner();
                throw e;
            }
        }

        after Label709: createDuplicateTree(byte, LogManager, INList, LN, CursorImpl) {
            dupBin.latch();
            //original(dupBin);
        }

        after Label710: createDuplicateTree(byte, LogManager, INList, LN, CursorImpl) {
            dupRoot.latch();
            //original(dupRoot);
        }

        after Label711_1: findBinForInsert(byte, LogManager, INList, CursorImpl) {

            if (rootLatchIsHeld) {
                rootLatch.release();
            }
        }


        after Label712: findBinForInsert(byte , LogManager , INList , CursorImpl ) {
            bin.releaseLatch();
            //original(bin);
        }

        after Label713: accountForSubtreeRemoval(INList , IN , UtilizationTracker ) {
            inList.latchMajor();
        }


        after Label713_1: accountForSubtreeRemoval(INList , IN , UtilizationTracker ) {
            inList.releaseMajorLatch();

        }

        after Label714: validateDelete(int ) {
            rootLatch.acquireShared();
            try {
                //original(inMemoryList);
            } finally {
                rootLatch.release();
            }
        }

        after Label715: validateDelete(int ) {
            rootLatch.acquireShared();
        }
        after Label715_1: validateDelete(int ) {

            //	try {    //original(index);	} finally {
            rootLatch.release();
            //}
        }

        after Label728: withRootLatchedShared(WithRootLatched ) {
            rootLatch.acquireExclusive();
            //original();
        }

        after Label729: withRootLatchedShared(WithRootLatched ) {
            rootLatch.acquireShared();
            //original();
        }

        after Label730: deleteDup(byte, byte, UtilizationTracker) {
            assert in .isLatchOwner();
            //original(in);
        }

        after Label731: searchDupTreeForDBIN(TreeLocation, byte, DIN, LN, boolean, boolean, boolean, boolean, boolean) {
            location.bin.releaseLatch();
            //original(location);
        }

        after Label732: getNextBinInternal(boolean, BIN, boolean) {
            assert(LatchSupport.countLatchesHeld() == 1): LatchSupport.latchesHeldToString();
            //original();
        }

        after Label733: getNextBinInternal(boolean, BIN, boolean) {
            assert(LatchSupport.countLatchesHeld() == 0): LatchSupport.latchesHeldToString();
            //original();
        }

        after Label734: getNextBinInternal(boolean, BIN, boolean) {
            next.releaseLatch();
            //original(next);
        }

        after Label735(IN  ) {
            nextIN.latch();
            assert(LatchSupport.countLatchesHeld() == 2): LatchSupport.latchesHeldToString();
            //original(nextIN);
        }

        after Label736: getNextBinInternal(boolean, BIN, boolean) {
            parent.releaseLatch();
            //original(parent);
        }

        after Label737: getNextBinInternal(boolean, BIN, boolean) {
            parent.releaseLatch();
            assert LatchSupport.countLatchesHeld() == 1: LatchSupport.latchesHeldToString();
            //original(parent);
        }

        after Label738: searchSubTreeUntilSplit(IN, byte, long, boolean) {
            parent.releaseLatch();
            //original(parent);
        }

        after Label739: searchSubTreeUntilSplit(IN, byte, long, boolean) {
            child.releaseLatch();
            parent.releaseLatch();
            //original(parent, child);
        }

        after Label740: searchSubTreeUntilSplit(IN, byte, long, boolean) {
            child.releaseLatch();
            //original(child);
        }

        after Label741: insert(LN, byte, boolean, CursorImpl, LockResult) {
            assert bin.isLatchOwner();
            //original(bin);
        }

        after Label742: insertDuplicate(byte, BIN, LN, LogManager, INList, CursorImpl, LockResult, boolean) {
            dupBin.releaseLatch();
            //original(dupBin);
        }

        after Label743: insertDuplicate(byte, BIN, LN, LogManager, INList, CursorImpl, LockResult, boolean) {
            cursor.releaseBIN();
            //original(cursor);
        }

        after Label744: insertDuplicate(byte, BIN, LN, LogManager, INList, CursorImpl, LockResult, boolean) {
            dupRoot.latch();
            //original(dupRoot);
        }

        after Label745: insertDuplicate(byte, BIN, LN, LogManager, INList, CursorImpl, LockResult, boolean) {
            cursor.releaseBIN();
            //original(cursor);
        }

        after Label746: insertDuplicate(byte, BIN, LN, LogManager, INList, CursorImpl, LockResult, boolean) {
            cursor.latchBIN();
            //original(cursor);
        }

        after Label747: createDuplicateTree(byte, LogManager, INList, LN, CursorImpl) {
            dupBin.releaseLatch();
            //original(dupBin);
        }

        after Label748: findBinForInsert(byte, LogManager, INList, CursorImpl) {
            rootLatch.acquireShared();
            //original();
        }

        after Label749: findBinForInsert(byte, LogManager, INList, CursorImpl) {
            rootLatch.release();
            //original();
        }

        after Label750: findBinForInsert(byte, LogManager, INList, CursorImpl) {
            bin.latch();
            //original(bin);
        }

        after Label751: findBinForInsert(byte, LogManager, INList, CursorImpl) {
            rootLatch.release();
            rootLatch.acquireExclusive();
            //original();
        }

        after Label752: findBinForInsert(byte, LogManager, INList, CursorImpl) {
            rootLatch.release();
            //original();
        }

        after Label753: findBinForInsert(byte, LogManager, INList, CursorImpl) {
            rootLatch.release();
            //original();
        }

    }
