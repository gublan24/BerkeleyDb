namespace com.sleepycat.je.dbi;

class CursorImpl {

    depend com.sleepycat.je.latch.LatchSupport;
    depend com.sleepycat.je.latch.LatchNotHeldException;

    public void releaseBIN() throws LatchNotHeldException {
        if (bin != null) {
            bin.releaseLatchIfOwner();
        }
    }

    public void latchBINs() throws DatabaseException {
        latchBIN();
        latchDBIN();
    }

    public void releaseBINs() throws LatchNotHeldException {
        releaseBIN();
        releaseDBIN();
    }

    public void releaseDBIN() throws LatchNotHeldException {
        if (dupBin != null) {
            dupBin.releaseLatchIfOwner();
        }
    }

    private boolean checkAlreadyLatched(boolean alreadyLatched) {
        if (alreadyLatched) {
            if (dupBin != null) {
                return dupBin.isLatchOwner();
            } else if (bin != null) {
                return bin.isLatchOwner();
            }
        }
        return true;
    }

    after Label206:  cloneCursor(boolean , CursorImpl ){

        latchBINs();

    }

    after Label207:  cloneCursor(boolean , CursorImpl ) {
        releaseBINs();

    }

    after Label208:  addCursor(BIN ) {

        assert bin.isLatchOwner();

    }

    after Label209: removeCursorBIN()  {
        abin.releaseLatch();
        //original(abin);
    }

    after Label210: removeCursorDBIN() {
        abin.releaseLatch();
        //original(abin);
    }

    after Label211: clearDupBIN(boolean ) {
        dupBin.releaseLatch();
        //original();
    }



//    after Label212: {
     //   latchBIN();
 //       try {
            //original(lockType);
  //      } finally {           releaseBIN();
   //     }    }

    after Label213_1: delete(boolean ) {


            if (dupRoot != null) {
                dupRoot.releaseLatchIfOwner();
            }

    }

    after Label214: delete(boolean ) {
        releaseBINs();

    }

    after Label215: delete(boolean ) {

        releaseBINs();

    }

    after Label216:  delete(boolean ) {
        releaseBINs();

    }
after Label266: delete(boolean ) {
    releaseBINs();

}

after Label267: delete(boolean ) {
    releaseBIN();

}

after Label268: delete(boolean ) {
    dupRoot.releaseLatch();

}
    after Label217: putLN(byte, LN , boolean ) { 
        assert LatchSupport.countLatchesHeld() == 0;
        //original();
    }

    after Label218_1: putCurrent(DatabaseEntry , DatabaseEntry , DatabaseEntry ) {
    //    try {
            //original(data, foundKey, foundData, isDup);
      //  } finally {
            releaseBINs();
        //}
    }

    after Label219: putCurrent(DatabaseEntry , DatabaseEntry , DatabaseEntry ) {

        latchBINs();
        //original();
    }

    after Label220: getCurrent(DatabaseEntry , DatabaseEntry , LockType ){
        if (dupBin == null) {
            latchBIN();
        } else {
            latchDBIN();
        }
        //original();
    }

    after Label221: getCurrentAlreadyLatched(DatabaseEntry , DatabaseEntry , LockType ,        boolean ){

            releaseBINs();
        
    }

    after Label222:getCurrentLN(LockType ){
        latchBIN();
        //original();
    }

    after Label223_1: getCurrentLNAlreadyLatched(LockType ) {

       // try {
            //original(lockType);
        //} finally {
            releaseBINs();
        //}
    }

    after Label224: getNextWithKeyChangeStatus(DatabaseEntry , DatabaseEntry ,LockType , boolean, boolean ) {
        assert checkAlreadyLatched(alreadyLatched): dumpToString(true);
        //original(alreadyLatched);
    }

    after Label225: getNextWithKeyChangeStatus(DatabaseEntry , DatabaseEntry ,LockType , boolean, boolean ) {
        assert checkAlreadyLatched(alreadyLatched): dumpToString(true);
        if (!alreadyLatched) {
            latchBIN();
        } else {
            alreadyLatched = false;
        }
        //return //original(alreadyLatched);
    }

    after Label226:  getNextWithKeyChangeStatus(DatabaseEntry , DatabaseEntry ,LockType , boolean, boolean ) {
        alreadyLatched = false;
        //return //original(alreadyLatched);
    }

    after Label227:getNextWithKeyChangeStatus(DatabaseEntry , DatabaseEntry ,LockType , boolean, boolean ) {
        assert LatchSupport.countLatchesHeld() == 0;
        //original();
    }

    after Label228: getNextWithKeyChangeStatus(DatabaseEntry , DatabaseEntry ,LockType , boolean, boolean ) {
        latchBIN();
        //original();
    }

    after Label229: getNextWithKeyChangeStatus(DatabaseEntry , DatabaseEntry ,LockType , boolean, boolean ) {
        releaseBIN();
        //original();
    }

    after Label230: getNextWithKeyChangeStatus(DatabaseEntry , DatabaseEntry ,LockType , boolean, boolean ) {
        alreadyLatched = true;
        //original(alreadyLatched);
    }

    after Label231: getNextWithKeyChangeStatus(DatabaseEntry , DatabaseEntry ,LockType , boolean, boolean ) {
        assert LatchSupport.countLatchesHeld() == 0: LatchSupport.latchesHeldToString();
        //original();
    }

    before flushBINToBeRemoved() {

        binToBeRemoved.latch();
        //original();
    }


    after Label232:flushBINToBeRemoved() {
        binToBeRemoved.releaseLatch();
        //original();
    }

    before flushDBINToBeRemoved() {
        dupBinToBeRemoved.latch();
        //original();
    }

    after Label233: flushDBINToBeRemoved(){
        dupBinToBeRemoved.releaseLatch();
        //original();
    }

    around Label234-Label234_1: positionFirstOrLast(boolean , DIN ) {
        try {
            around_proceed:  
        } 
       catch (DatabaseException e) {
            if ( in != null) 
            { in .releaseLatch();
            }
            throw e;
        }
    }


    after Label235_1: searchAndPosition(DatabaseEntry , DatabaseEntry , SearchMode , LockType ) {

        releaseBIN();

    
}



after Label236: searchAndPositionBoth(boolean , Node , DatabaseEntry , boolean , LockType , long ){
    duplicateRoot.latch();
    releaseBIN();
    //original(duplicateRoot);
}

after Label237: lockLNDeletedAllowed(LN , LockType )  {
    latchBINs();
    //original();
}

after Label238: lockLNDeletedAllowed(LN , LockType )  {
    releaseBINs();
    //original();
}

after Label239: lockDupCountLN(DIN , LockType )  {
    dupRoot.latch();
    latchDBIN();
    //original(dupRoot);
}

after Label240: lockDupCountLN(DIN , LockType )  {

    latchBIN();
    //original();
}

after Label241: lockDupCountLN(DIN , LockType )  {
    dupRoot.releaseLatch();
    releaseBINs();
    //original(dupRoot);
}

after Label242: getLatchedDupRoot(boolean ){

    if (isDBINLatched) {
        if (!dupRoot.latchNoWait()) {
            releaseDBIN();
            dupRoot.latch();
            latchDBIN();
        }
    } else {
        dupRoot.latch();
    }
    //original(isDBINLatched, dupRoot);
}



after Label243: getLatchedDupRoot(boolean ){
    assert bin.isLatchOwner();
    //original();
}

		before  Label212: count(LockType)
		{
				    latchBIN();
		}

after Label264: count(LockType ) {
    dupRoot.releaseLatch();

}

after Label265: count(LockType ) {

    dupRoot.latch();
    releaseBIN();

}

after Label265_1: count(LockType ) {

	    releaseBIN();


}



after Label269:putCurrent(DatabaseEntry , DatabaseEntry , DatabaseEntry ) {
    releaseBINs();
    //original();
}

after Label270: putCurrent(DatabaseEntry , DatabaseEntry , DatabaseEntry ) {
    releaseBINs();
    //original();
}

after Label271: putCurrent(DatabaseEntry , DatabaseEntry , DatabaseEntry ) {
    releaseBINs();
    //original();
}

after Label272:  getCurrentLNAlreadyLatched(LockType ) {
    assert checkAlreadyLatched(true): dumpToString(true);
    //original();
}

after Label273:  getCurrentLNAlreadyLatched(LockType ) {
    releaseBIN();
    //original();
}

after Label274: positionFirstOrLast(boolean , DIN ){
    dupRoot.latch(); in .releaseLatch();
    //original(in, dupRoot);
}


}


