
namespace com.sleepycat.je.dbi;

class CursorImpl {

        after Label244: latchBINs () {

				 	while (bin != null) {
						BIN waitingOn = bin;
						waitingOn.latch();
						if (bin == waitingOn) {
							return bin;
						}
						waitingOn.releaseLatch();
					}

    		}



        after Label250: getNextDuplicate(DatabaseEntry , DatabaseEntry , LockType ,  boolean , boolean ) {
                    	assert checkAlreadyLatched(alreadyLatched) : dumpToString(true);
        }

        after Label251:  getNextDuplicate(DatabaseEntry , DatabaseEntry , LockType ,  boolean , boolean ) {
					 	if (!alreadyLatched) {
												latchDBIN();
										} else {
												alreadyLatched = false;
										}
        }
        after Label252: getNextDuplicate(DatabaseEntry , DatabaseEntry , LockType ,  boolean , boolean ) {
							releaseDBIN();
        }
        after Label253: getNextDuplicate(DatabaseEntry , DatabaseEntry , LockType ,  boolean , boolean ) {
            assert LatchSupport.countLatchesHeld() == 0;
        }
        after Label254:  getNextDuplicate(DatabaseEntry , DatabaseEntry , LockType ,  boolean , boolean ) {
         assert (LatchSupport.countLatchesHeld() == 0);
								dupBinToBeRemoved.latch();
        }
        after Label255:  getNextDuplicate(DatabaseEntry , DatabaseEntry , LockType ,  boolean , boolean ) {
            dupBinToBeRemoved.releaseLatch();
        }
        after Label256: getNextDuplicate(DatabaseEntry , DatabaseEntry , LockType ,  boolean , boolean ) {
            alreadyLatched = true;
        }
        after Label257: getNextDuplicate(DatabaseEntry , DatabaseEntry , LockType ,  boolean , boolean ) {
            assert LatchSupport.countLatchesHeld() == 0;

        }
    
        around Label248-Label248_1: lockNextKeyForInsert(DatabaseEntry , DatabaseEntry ) {
            latched = true;
            try {
                around_proceed:
            }
             finally {
            if (latched) {
                releaseBINs();
            }
        		}
        }

        after Label249: lockNextKeyForInsert(DatabaseEntry , DatabaseEntry ) {
					latched = false;

        }
  

        after Label246: latchDBIN() {
            
						while (dupBin != null) {
						BIN waitingOn = dupBin;
						waitingOn.latch();
						if (dupBin == waitingOn) {
							return dupBin;
						}
						waitingOn.releaseLatch();
						}
   
    		}






        around Label258: fetchCurrent(DatabaseEntry , DatabaseEntry , LockType , boolean ) {
     
                releaseBINs();
            
        }

        after Label259: fetchCurrent(DatabaseEntry , DatabaseEntry , LockType , boolean ) {
						  assert targetBin.isLatchOwner();

        }

        around Label260: fetchCurrent(DatabaseEntry , DatabaseEntry , LockType , boolean ) {
       					targetBin.releaseLatchIfOwner();
        }
        after Label261: fetchCurrent(DatabaseEntry , DatabaseEntry , LockType , boolean ) {
						      targetBin.releaseLatchIfOwner();

        }
        after Label262: fetchCurrent(DatabaseEntry , DatabaseEntry , LockType , boolean ) {
								duplicateRoot.latch();
						    targetBin.releaseLatch();

        }
        around Label263: fetchCurrent(DatabaseEntry , DatabaseEntry , LockType , boolean ) {

                releaseBINs();
       
        }
    
}
