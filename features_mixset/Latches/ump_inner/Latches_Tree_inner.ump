
namespace com.sleepycat.je.tree;

class Tree {


      after Label722: forceSplit(IN , byte )   {
        ;
				boolean isRootLatched = false;

      }

      after Label723: forceSplit(IN , byte )   {
       if (originalParent.isDbRoot()) {
                rootLatch.acquireExclusive();
                isRootLatched = true;
            }
            originalParent.latch();
      }

      after Label724: forceSplit(IN , byte )   {
         child.latch();
      }

      after Label725:  forceSplit(IN , byte )   {
        assert isRootLatched;

      }

      after Label726:  forceSplit(IN , byte )   {
                        child.releaseLatch();

      }

      after Label727:  forceSplit(IN , byte )   {
        if (!success) {
                if (child != null) {
                    child.releaseLatchIfOwner();
                }
                originalParent.releaseLatchIfOwner();
            }

            /*
             * Unlatch any remaining children. There should only be remainders
             * in the event of an exception.
             */
            if (nodeLadder.size() > 0) {
                iter = nodeLadder.listIterator(nodeLadder.size());
                while (iter.hasPrevious()) {
                    SplitInfo info = (SplitInfo) iter.previous();
                    info.child.releaseLatchIfOwner();
                }
            }

            if (isRootLatched) {
                rootLatch.release();
            }
      }
    


      after Label716_1: searchSplitsAllowed(byte, long , boolean )   {
			 		if (rootLatched) {
						rootLatch.release();	
				}
        
      }
      after Label717:  searchSplitsAllowed(byte, long , boolean )   {
				;
        rootLatch.acquireShared();
        boolean rootLatched = true;
	      boolean rootLatchedExclusive = false;
      }

      after Label718: searchSplitsAllowed(byte, long , boolean )   {
       	rootIN = null;
				rootLatch.release();
				rootLatch.acquireExclusive();
				rootLatchedExclusive = true;
				continue;
      }

      after Label719: searchSplitsAllowed(byte, long , boolean )   {
			    rootLatch.release();
			    rootLatched = false;
      }

      after Label720: searchSplitsAllowed(byte, long , boolean )   {
			    rootLatched = true;
			    rootLatch.acquireExclusive();
      }

      after Label721: searchSplitsAllowed(byte, long , boolean )   {
   			rootIN.latch();

      }
    


  inner class RootChildReference {

      after Label666: fetchTarget(    DatabaseImpl ,    IN )   {
        if (getTarget() == null && !rootLatch.isWriteLockedByCurrentThread()) {
          rootLatch.release();
          rootLatch.acquireExclusive();
        }

      }
      after Label667: setTarget(    Node ){
        assert rootLatch.isWriteLockedByCurrentThread();

      }
      after Label668: clearTarget(){
        assert rootLatch.isWriteLockedByCurrentThread();

      }
      after Label669: setLsn(    long ){
        assert rootLatch.isWriteLockedByCurrentThread();

      }
    }
}





