namespace com.sleepycat.je.log;

class FileManager
{
    private FileCache fileCache;

    Set getCacheKeys() {
			return fileCache.getCacheKeys();
    }

    /** 
     * Clear a file out of the file cache regardless of mode type.
     */
    private void clearFileCache(long fileNum) throws IOException, DatabaseException {
			fileCache.remove(fileNum);
    }

  //  protected void hook451() throws IOException, DatabaseException {
	//		fileCache.clear();
  //  }

  after Label457: FileManager(EnvironmentImpl, File , boolean )
  {
    		fileCache = new FileCache(configManager);
  }
 //   protected void hook457(DbConfigManager configManager) throws DatabaseException {
		//	fileCache = new FileCache(configManager);
//			original(configManager);
    //}

  //  protected void hook458(long fileNum) throws DatabaseException, IOException {
	//		clearFileCache(fileNum);
	//		original(fileNum);
   // }
  after Label458:renameFile(long, String )
  {
    clearFileCache(fileNum);
  }

//    protected void hook459(long fileNum) throws DatabaseException, IOException {
//			clearFileCache(fileNum);
//			original(fileNum);
//    }
  after Label459: deleteFile(long)
  {
			clearFileCache(fileNum);
  }

  around Label460-Label460_1:getFileHandle(long ){

			while (true) {
			  around_proceed: //original(fileNum, fileId, fileHandle);
			}
		 }

  after Label461: abortCommittedTxns(ByteBuffer ) {
	data.position(0);

  }
 //   protected void hook461(ByteBuffer data) {
//	data.position(0);
//	original(data);
 //   }

    /** 
     * Close all file handles and empty the cache.
     */
//    public void clear() throws IOException, DatabaseException {
//	{
//	    this.hook451();
//	}
//	original();
 //   }

  before clear()
  {
    fileCache.clear();
  }


  after Label462: getFileHandle(long) 
  {
    fileHandle = fileCache.get(fileId);
	  if (fileHandle == null) // continue 
  }
 


  after Label464: getFileHandle(long )
	{
	fileCache.add(fileId, fileHandle);
	}    

 //protected void hook464(Long fileId, FileHandle fileHandle) throws LogException, DatabaseException {
	//fileCache.add(fileId, fileHandle);
	//original(fileId, fileHandle);
    //}

	

}
