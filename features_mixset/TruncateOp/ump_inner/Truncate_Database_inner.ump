
//namespace com.sleepycat.je;
class Database {
   static class Database_truncate {
      Database_truncate(    Database _this,    Transaction txn,    boolean countRecords){
        this._this=_this;
        this.txn=txn;
        this.countRecords=countRecords;
      }
      int execute() throws DatabaseException {
        _this.checkEnv();
        _this.checkRequiredDbState(_this.OPEN,"Can't call Database.truncate");
        _this.checkWritable("truncate");
        //this.hook39();
        Label39:
        locker=null;
        //this.hook40();
        Label40:
        operationOk=false;
        try {
          locker=LockerFactory.getWritableLocker(_this.envHandle,txn,_this.isTransactional(),true,null);
          _this.acquireTriggerListReadLock();
          //this.hook41();
          Label41:
          count=_this.truncateInternal(locker,countRecords);
          for (int i=0; i < _this.triggerList.size(); i+=1) {
            obj=_this.triggerList.get(i);
            if (obj instanceof SecondaryTrigger) {
              secDb=((SecondaryTrigger)obj).getDb();
              secDb.truncateInternal(locker,false);
            }
          }
          operationOk=true;
          return count;
        }
    finally {
          if (locker != null) {
            locker.operationEnd(operationOk);
          }
          //this.hook42();
          Label42: ;
        }
      }
      protected Database _this;
      protected Transaction txn;
      protected boolean countRecords;
      protected Locker locker;
      protected boolean triggerLock;
      protected boolean operationOk;
      protected int count;
      protected Object obj;
      protected SecondaryDatabase secDb;
   //   protected void hook39() throws DatabaseException {
   //   }
  //    protected void hook40() throws DatabaseException {
    //  }
  //    protected void hook41() throws DatabaseException {
  //    }
      //protected void hook42() throws DatabaseException {
      //}
    }
}
